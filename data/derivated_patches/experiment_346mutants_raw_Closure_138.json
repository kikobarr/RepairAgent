
{
    "mutations": [
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [],
            "deletions": [208],
            "modifications": []
        },
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [],
            "deletions": [218],
            "modifications": []
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 639,
                    "new_lines": [
                        "        type = var.getType();",
                        "        if (type == null) {",
                        "            type = getNativeType(UNKNOWN_TYPE);",
                        "        }"
                    ]
                }
            ],
            "deletions": [],
            "modifications": []
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 643,
                    "new_lines": [
                        "        type = var.getType();",
                        "        if (type == null) {",
                        "            type = getNativeType(UNKNOWN_TYPE);",
                        "        }"
                    ]
                }
            ],
            "deletions": [],
            "modifications": []
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": [
                        "        type = var.getType();",
                        "        if (type == null) {",
                        "            type = getNativeType(UNKNOWN_TYPE);",
                        "        }"
                    ]
                }
            ],
            "deletions": [],
            "modifications": []
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": [
                        "        type = var.getType();",
                        "        if (type == null) {",
                        "            type = getNativeType(UNKNOWN_TYPE);",
                        "        }"
                    ]
                }
            ],
            "deletions": [],
            "modifications": []
        }
    ]
}
{
    "mutations": [
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [
                {
                    "line_number": 208,
                    "new_lines": [
                        "if (paramType == null) { // Mutated: Changed '!=' to '=='"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [
                {
                    "line_number": 218,
                    "new_lines": [
                        "if (paramType == null) { // Mutated: Changed '!=' to '=='"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 632,
                    "new_lines": [
                        "if (var == null || (var.isTypeInferred() && !unflowableVarNames.contains(varName))) { // Mutated condition"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 633,
                    "new_lines": [
                        "// Add additional check here // Mutated: Added comment"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 639,
                    "new_lines": [
                        "type = var.getType(); // Mutation: Moved 'type = var.getType();' here"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 643,
                    "new_lines": [
                        "// Inserted new line here // Mutated: Added comment"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": [
                        "type = var.getType(); // Mutation: Moved 'type = var.getType();' here"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": [
                        "// Additional logic to handle null type // Mutated: Added comment"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [
                {
                    "line_number": 208,
                    "new_lines": [
                        "if (paramType == null) { // Mutated: Changed '!=' to '=='"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [
                {
                    "line_number": 218,
                    "new_lines": [
                        "if (paramType == null) { // Mutated: Changed '!=' to '=='"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 632,
                    "new_lines": [
                        "if (var == null || (var.isTypeInferred() && !unflowableVarNames.contains(varName))) { // Mutated condition"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 633,
                    "new_lines": [
                        "// Add additional check here // Mutated: Added comment"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 639,
                    "new_lines": [
                        "type = var.getType(); // Mutation: Moved 'type = var.getType();' here"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 643,
                    "new_lines": [
                        "// Inserted new line here // Mutated: Added comment"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": [
                        "type = var.getType(); // Mutation: Moved 'type = var.getType();' here"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": [
                        "// Additional logic to handle null type // Mutated: Added comment"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [
                {
                    "line_number": 208,
                    "new_lines": [
                        "if (paramType == null) { // Mutated: Changed '!=' to '=='"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [
                {
                    "line_number": 218,
                    "new_lines": [
                        "if (paramType == null) { // Mutated: Changed '!=' to '=='"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 632,
                    "new_lines": [
                        "if (var == null || (var.isTypeInferred() && !unflowableVarNames.contains(varName))) { // Mutated condition"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 633,
                    "new_lines": [
                        "// Add additional check here // Mutated: Added comment"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 639,
                    "new_lines": [
                        "type = var.getType(); // Mutation: Moved 'type = var.getType();' here"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 643,
                    "new_lines": [
                        "// Inserted new line here // Mutated: Added comment"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": [
                        "type = var.getType(); // Mutation: Moved 'type = var.getType();' here"
                    ]
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": [
                        "// Additional logic to handle null type // Mutated: Added comment"
                    ]
                }
            ]
        }
    ]
}