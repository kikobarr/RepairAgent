
{
    "fixes": [
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [
                {
                    "line_number": 208,
                    "new_lines": ["        if (paramType == null) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
            "insertions": [
                {
                    "line_number": 218,
                    "new_lines": ["            if (paramType == null) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 632,
                    "new_lines": ["      if (var == null ||", "          (var.isTypeInferred() && unflowableVarNames.contains(varName)) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 633,
                    "new_lines": ["          !(var == null ||", "          (var.isTypeInferred() && unflowableVarNames.contains(varName))) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 632,
                    "new_lines": ["      if (var != null &&", "          !(var.isTypeInferred() && unflowableVarNames.contains(varName)) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 633,
                    "new_lines": ["          !(var != null &&", "          (var.isTypeInferred() && unflowableVarNames.contains(varName))) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 639,
                    "new_lines": ["        type = var.getType();", "        if (type == null) {", "            type = getNativeType(UNKNOWN_TYPE);", "        }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": ["          if (type != null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 632,
                    "new_lines": ["      if (var != null &&", "          !(var.isTypeInferred() || unflowableVarNames.contains(varName)) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 633,
                    "new_lines": ["          !(var != null &&", "          (var.isTypeInferred() || unflowableVarNames.contains(varName))) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": ["          if (type != null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "              return;"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 639,
                    "new_lines": ["        if (var == null) {", "            return;"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 643,
                    "new_lines": ["        if (var == null) {", "            return;"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "              return;"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 639,
                    "new_lines": ["        if (var != null) {", "            return;"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 643,
                    "new_lines": ["        if (var != null) {", "            return;"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 632,
                    "new_lines": ["      if (var != null ||", "          !(var.isTypeInferred() && unflowableVarNames.contains(varName)) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 633,
                    "new_lines": ["          !(var != null ||", "          (var.isTypeInferred() && unflowableVarNames.contains(varName))) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": ["          if (type != null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 632,
                    "new_lines": ["      if (var != null &&", "          !(var.isTypeInferred() || unflowableVarNames.contains(varName)) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 633,
                    "new_lines": ["          !(var != null &&", "          (var.isTypeInferred() || unflowableVarNames.contains(varName))) {"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 644,
                    "new_lines": ["          if (type != null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "          }"]  } 
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeInference.java",
            "insertions": [
                {
                    "line_number": 647,
                    "new_lines": ["          if (type == null) {", "              type = getNativeType(UNKNOWN_TYPE);", "              return;"]  } 
            ]
        }
    ]
}