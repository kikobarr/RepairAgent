
{
    "mutations": [
        {
            "file_name": "com/google/javascript/jscomp/TypeCheck.java",
            "modifications": [
                {"line_number": 185, "modified_line": "      DiagnosticType.warning("},
                {"line_number": 186, "modified_line": "          "},
                {"line_number": 187, "modified_line": "          "},
                {"line_number": 188, "modified_line": "          "},
                {"line_number": 189, "modified_line": "          "},
                {"line_number": 190, "modified_line": "          "},
                {"line_number": 191, "modified_line": "          "},
                {"line_number": 242, "modified_line": "      HIDDEN_INTERFACE_PROPERTY_MISMATCH,"},
                {"line_number": 1048, "modified_line": "        }"},
                {"line_number": 1049, "modified_line": "        if (interfaceHasProperty) {"},
                {"line_number": 1050, "modified_line": "          JSType interfacePropType ="},
                {"line_number": 1051, "modified_line": "              interfaceType.getPrototype().getPropertyType(propertyName);"},
                {"line_number": 1052, "modified_line": "          if (interfacePropType.canAssignTo(propertyType)) {"},
                {"line_number": 1053, "modified_line": "            compiler.report(t.makeError(n,"},
                {"line_number": 1054, "modified_line": "                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"},
                {"line_number": 1055, "modified_line": "                interfaceType.getTopMostDefiningType(propertyName).toString(),"},
                {"line_number": 1056, "modified_line": "                interfacePropType.toString(), propertyType.toString());"},
                {"line_number": 1057, "modified_line": "          }"},
                {"line_number": 117, "modified_line": "      INTERFACE_METHOD_NOT_IMPLEMENTED);"},
                {"line_number": 110, "modified_line": " "},
                {"line_number": 588, "modified_line": " "},
                {"line_number": 589, "modified_line": " "}
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeCheck.java",
            "modifications": [
                {"line_number": 185, "modified_line": "      DiagnosticType.error("},
                {"line_number": 186, "modified_line": "          "},
                {"line_number": 187, "modified_line": "          "},
                {"line_number": 188, "modified_line": "          "},
                {"line_number": 189, "modified_line": "          "},
                {"line_number": 190, "modified_line": "          "},
                {"line_number": 191, "modified_line": "          "},
                {"line_number": 242, "modified_line": "      HIDDEN_INTERFACE_PROPERTY_MISMATCH,"},
                {"line_number": 1048, "modified_line": "        }"},
                {"line_number": 1049, "modified_line": "        if (interfaceHasProperty) {"},
                {"line_number": 1050, "modified_line": "          JSType interfacePropType ="},
                {"line_number": 1051, "modified_line": "              interfaceType.getPrototype().getPropertyType(propertyName);"},
                {"line_number": 1052, "modified_line": "          if (!interfacePropType.canAssignTo(propertyType)) {"},
                {"line_number": 1053, "modified_line": "            compiler.report(t.makeError(n,"},
                {"line_number": 1054, "modified_line": "                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"},
                {"line_number": 1055, "modified_line": "                interfaceType.getTopMostDefiningType(propertyName).toString(),"},
                {"line_number": 1056, "modified_line": "                interfacePropType.toString(), propertyType.toString());"},
                {"line_number": 1057, "modified_line": "          }"},
                {"line_number": 117, "modified_line": "      INTERFACE_METHOD_NOT_IMPLEMENTED);"},
                {"line_number": 110, "modified_line": " "},
                {"line_number": 588, "modified_line": " "},
                {"line_number": 589, "modified_line": " "}
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeCheck.java",
            "modifications": [
                {"line_number": 185, "modified_line": "      DiagnosticType.error("},
                {"line_number": 186, "modified_line": "          "},
                {"line_number": 187, "modified_line": "          "},
                {"line_number": 188, "modified_line": "          "},
                {"line_number": 189, "modified_line": "          "},
                {"line_number": 190, "modified_line": "          "},
                {"line_number": 191, "modified_line": "          "},
                {"line_number": 242, "modified_line": "      HIDDEN_INTERFACE_PROPERTY_MISMATCH,"},
                {"line_number": 1048, "modified_line": "        }"},
                {"line_number": 1049, "modified_line": "        if (interfaceHasProperty) {"},
                {"line_number": 1050, "modified_line": "          JSType interfacePropType ="},
                {"line_number": 1051, "modified_line": "              interfaceType.getPrototype().getPropertyType(propertyName);"},
                {"line_number": 1052, "modified_line": "          if (interfacePropType.canAssignTo(propertyType)) {"},
                {"line_number": 1053, "modified_line": "            compiler.report(t.makeError(n,"},
                {"line_number": 1054, "modified_line": "                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"},
                {"line_number": 1055, "modified_line": "                interfaceType.getTopMostDefiningType(propertyName).toString(),"},
                {"line_number": 1056, "modified_line": "                interfacePropType.toString(), propertyType.toString());"},
                {"line_number": 1057, "modified_line": "          }"},
                {"line_number": 117, "modified_line": "      INTERFACE_METHOD_NOT_IMPLEMENTED);"},
                {"line_number": 110, "modified_line": " "},
                {"line_number": 588, "modified_line": " "},
                {"line_number": 589, "modified_line": " "}
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeCheck.java",
            "modifications": [
                {"line_number": 185, "modified_line": "      DiagnosticType.error("},
                {"line_number": 186, "modified_line": "          "},
                {"line_number": 187, "modified_line": "          "},
                {"line_number": 188, "modified_line": "          "},
                {"line_number": 189, "modified_line": "          "},
                {"line_number": 190, "modified_line": "          "},
                {"line_number": 191, "modified_line": "          "},
                {"line_number": 242, "modified_line": "      HIDDEN_INTERFACE_PROPERTY_MISMATCH,"},
                {"line_number": 1048, "modified_line": "        }"},
                {"line_number": 1049, "modified_line": "        if (interfaceHasProperty) {"},
                {"line_number": 1050, "modified_line": "          JSType interfacePropType ="},
                {"line_number": 1051, "modified_line": "              interfaceType.getPrototype().getPropertyType(propertyName);"},
                {"line_number": 1052, "modified_line": "          if (!interfacePropType.canAssignTo(propertyType)) {"},
                {"line_number": 1053, "modified_line": "            compiler.report(t.makeError(n,"},
                {"line_number": 1054, "modified_line": "                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"},
                {"line_number": 1055, "modified_line": "                interfaceType.getTopMostDefiningType(propertyName).toString(),"},
                {"line_number": 1056, "modified_line": "                interfacePropType.toString(), propertyType.toString());"},
                {"line_number": 1057, "modified_line": "          }"},
                {"line_number": 117, "modified_line": "      INTERFACE_METHOD_NOT_IMPLEMENTED);"},
                {"line_number": 110, "modified_line": " "},
                {"line_number": 588, "modified_line": " "},
                {"line_number": 589, "modified_line": " "}
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeCheck.java",
            "modifications": [
                {"line_number": 185, "modified_line": "      DiagnosticType.error("},
                {"line_number": 186, "modified_line": "          "},
                {"line_number": 187, "modified_line": "          "},
                {"line_number": 188, "modified_line": "          "},
                {"line_number": 189, "modified_line": "          "},
                {"line_number": 190, "modified_line": "          "},
                {"line_number": 191, "modified_line": "          "},
                {"line_number": 242, "modified_line": "      HIDDEN_INTERFACE_PROPERTY_MISMATCH,"},
                {"line_number": 1048, "modified_line": "        }"},
                {"line_number": 1049, "modified_line": "        if (interfaceHasProperty) {"},
                {"line_number": 1050, "modified_line": "          JSType interfacePropType ="},
                {"line_number": 1051, "modified_line": "              interfaceType.getPrototype().getPropertyType(propertyName);"},
                {"line_number": 1052, "modified_line": "          if (interfacePropType.canAssignTo(propertyType)) {"},
                {"line_number": 1053, "modified_line": "            compiler.report(t.makeError(n,"},
                {"line_number": 1054, "modified_line": "                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"},
                {"line_number": 1055, "modified_line": "                interfaceType.getTopMostDefiningType(propertyName).toString(),"},
                {"line_number": 1056, "modified_line": "                interfacePropType.toString(), propertyType.toString());"},
                {"line_number": 1057, "modified_line": "          }"},
                {"line_number": 117, "modified_line": "      INTERFACE_METHOD_NOT_IMPLEMENTED);"},
                {"line_number": 110, "modified_line": " "},
                {"line_number": 588, "modified_line": " "},
                {"line_number": 589, "modified_line": " "}
            ]
        }
    ]
}
{
    "mutations": [
        {
            "file_name": "com/google/javascript/jscomp/TypeCheck.java",
            "insertions": [],
            "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117],
            "modifications": [
                {
                    "line_number": 185,
                    "modified_line": "  static final DiagnosticType INTERFACE_PROPERTY_MISMATCH ="
                },
                {
                    "line_number": 186,
                    "modified_line": "      DiagnosticType.error("
                },
                {
                    "line_number": 187,
                    "modified_line": "          \"JSC_INTERFACE_PROPERTY_MISMATCH\","
                },
                {
                    "line_number": 188,
                    "modified_line": "          \"mismatch of the {0} property type and the type \" +"
                },
                {
                    "line_number": 189,
                    "modified_line": "          \"of the property it overrides from interface {1}\\n\" +"
                },
                {
                    "line_number": 190,
                    "modified_line": "          \"original: {2}\\n\" +"
                },
                {
                    "line_number": 191,
                    "modified_line": "          \"override: {3}\");"
                },
                {
                    "line_number": 242,
                    "modified_line": "      INTERFACE_PROPERTY_MISMATCH,"
                },
                {
                    "line_number": 1048,
                    "modified_line": "        return;"
                },
                {
                    "line_number": 1049,
                    "modified_line": "        if (interfaceHasProperty) {"
                },
                {
                    "line_number": 1050,
                    "modified_line": "          JSType interfacePropType ="
                },
                {
                    "line_number": 1051,
                    "modified_line": "              interfaceType.getPrototype().getPropertyType(propertyName);"
                },
                {
                    "line_number": 1052,
                    "modified_line": "          if (!propertyType.canAssignTo(interfacePropType)) {"
                },
                {
                    "line_number": 1053,
                    "modified_line": "            compiler.report(t.makeError(n,"
                },
                {
                    "line_number": 1054,
                    "modified_line": "                INTERFACE_PROPERTY_MISMATCH, propertyName,"
                },
                {
                    "line_number": 1055,
                    "modified_line": "                interfaceType.getTopMostDefiningType(propertyName).toString(),"
                },
                {
                    "line_number": 1056,
                    "modified_line": "                interfacePropType.toString(), propertyType.toString()));"
                },
                {
                    "line_number": 1057,
                    "modified_line": "          }"
                },
                {
                    "line_number": 117,
                    "modified_line": "      INTERFACE_METHOD_NOT_IMPLEMENTED;"
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeCheck.java",
            "insertions": [],
            "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117],
            "modifications": [
                {
                    "line_number": 185,
                    "modified_line": "  static final DiagnosticType PROPERTY_TYPE_ERROR ="
                },
                {
                    "line_number": 186,
                    "modified_line": "      DiagnosticType.error("
                },
                {
                    "line_number": 187,
                    "modified_line": "          \"JSC_PROPERTY_TYPE_ERROR\","
                },
                {
                    "line_number": 188,
                    "modified_line": "          \"error in property type comparison: {0} and {1}\\n\" +"
                },
                {
                    "line_number": 189,
                    "modified_line": "          \"original: {2}\\n\" +"
                },
                {
                    "line_number": 190,
                    "modified_line": "          \"override: {3}\");"
                },
                {
                    "line_number": 242,
                    "modified_line": "      PROPERTY_TYPE_ERROR,"
                },
                {
                    "line_number": 1048,
                    "modified_line": "        return;"
                },
                {
                    "line_number": 1049,
                    "modified_line": "        if (interfaceHasProperty) {"
                },
                {
                    "line_number": 1050,
                    "modified_line": "          JSType interfacePropType ="
                },
                {
                    "line_number": 1051,
                    "modified_line": "              interfaceType.getPrototype().getPropertyType(propertyName);"
                },
                {
                    "line_number": 1052,
                    "modified_line": "          if (!propertyType.canAssignTo(interfacePropType)) {"
                },
                {
                    "line_number": 1053,
                    "modified_line": "            compiler.report(t.makeError(n,"
                },
                {
                    "line_number": 1054,
                    "modified_line": "                PROPERTY_TYPE_ERROR, propertyName,"
                },
                {
                    "line_number": 1055,
                    "modified_line": "                interfaceType.getTopMostDefiningType(propertyName).toString(),"
                },
                {
                    "line_number": 1056,
                    "modified_line": "                interfacePropType.toString(), propertyType.toString()));"
                },
                {
                    "line_number": 1057,
                    "modified_line": "          }"
                },
                {
                    "line_number": 117,
                    "modified_line": "      INTERFACE_METHOD_NOT_IMPLEMENTED;"
                }
            ]
        },
        {
            "file_name": "com/google/javascript/jscomp/TypeCheck.java",
            "insertions": [],
            "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117],
            "modifications": [
                {
                    "line_number": 185,
                    "modified_line": "  static final DiagnosticType PROPERTY_ASSIGNMENT_ERROR ="
                },
                {
                    "line_number": 186,
                    "modified_line": "      DiagnosticType.error("
                },
                {
                    "line_number": 187,
                    "modified_line": "          \"JSC_PROPERTY_ASSIGNMENT_ERROR\","
                },
                {
                    "line_number": 188,
                    "modified_line": "          \"error in property assignment: {0} cannot be assigned to {1}\\n\" +"
                },
                {
                    "line_number": 189,
                    "modified_line": "          \"original: {2}\\n\" +"
                },
                {
                    "line_number": 190,
                    "modified_line": "          \"override: {3}\");"
                },
                {
                    "line_number": 242,
                    "modified_line": "      PROPERTY_ASSIGNMENT_ERROR,"
                },
                {
                    "line_number": 1048,
                    "modified_line": "        return;"
                },
                {
                    "line_number": 1049,
                    "modified_line": "        if (interfaceHasProperty) {"
                },
                {
                    "line_number": 1050,
                    "modified_line": "          JSType interfacePropType ="
                },
                {
                    "line_number": 1051,
                    "modified_line": "              interfaceType.getPrototype().getPropertyType(propertyName);"
                },
                {
                    "line_number": 1052,
                    "modified_line": "          if (!propertyType.canAssignTo(interfacePropType)) {"
                },
                {
                    "line_number": 1053,
                    "modified_line": "            compiler.report(t.makeError(n,"
                },
                {
                    "line_number": 1054,
                    "modified_line": "                PROPERTY_ASSIGNMENT_ERROR, propertyName,"
                },
                {
                    "line_number": 1055,
                    "modified_line": "                interfaceType.getTopMostDefiningType(propertyName).toString(),"
                },
                {
                    "line_number": 1056,
                    "modified_line": "                interfacePropType.toString(), propertyType.toString()));"
                },
                {
                    "line_number": 1057,
                    "modified_line": "          }"
                },
                {
                    "line_number": 117,
                    "modified_line": "      INTERFACE_METHOD_NOT_IMPLEMENTED;"
                }
            ]
        }
    ]
}
{
    "mutations": [
        {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [], "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117], "modifications": [{"line_number": 185, "modified_line": "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ="}, {"line_number": 186, "modified_line": "     DiagnosticType.error("}, {"line_number": 187, "modified_line": "         \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\","}, {"line_number": 188, "modified_line": "         \"mismatch of the {0} property type and the type "}, {"line_number": 189, "modified_line": "         \"of the property it overrides from interface {1}\\n\" +"}, {"line_number": 190, "modified_line": "         \"original: {2}\\n\" +"}, {"line_number": 191, "modified_line": "         \"override: {3}\");"}, {"line_number": 242, "modified_line": "     HIDDEN_INTERFACE_PROPERTY_MISMATCH,"}, {"line_number": 1048, "modified_line": "       }"}, {"line_number": 1049, "modified_line": "       if (interfaceHasProperty) {"}, {"line_number": 1050, "modified_line": "         JSType interfacePropType ="}, {"line_number": 1051, "modified_line": "             interfaceType.getPrototype().getPropertyType(propertyName);"}, {"line_number": 1052, "modified_line": "         if (!interfacePropType.canAssignTo(propertyType)) {"}, {"line_number": 1053, "modified_line": "           compiler.report(t.makeError(n,"}, {"line_number": 1054, "modified_line": "               HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"}, {"line_number": 1055, "modified_line": "               interfaceType.getTopMostDefiningType(propertyName).toString(),"}, {"line_number": 1056, "modified_line": "               interfacePropType.toString(), propertyType.toString()));"}, {"line_number": 1057, "modified_line": "         }"}, {"line_number": 117, "modified_line": "     INTERFACE_METHOD_NOT_IMPLEMENTED);"}]},
        {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [], "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117], "modifications": [{"line_number": 185, "modified_line": "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ="}, {"line_number": 186, "modified_line": "     DiagnosticType.error("}, {"line_number": 187, "modified_line": "         \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\","}, {"line_number": 188, "modified_line": "         \"mismatch of the {0} property type and the type "}, {"line_number": 189, "modified_line": "         \"of the property it overrides from superclass {1}\\n\" +"}, {"line_number": 190, "modified_line": "         \"original: {2}\\n\" +"}, {"line_number": 191, "modified_line": "         \"override: {3}\");"}, {"line_number": 242, "modified_line": "     HIDDEN_INTERFACE_PROPERTY_MISMATCH,"}, {"line_number": 1048, "modified_line": "       }"}, {"line_number": 1049, "modified_line": "       if (interfaceHasProperty) {"}, {"line_number": 1050, "modified_line": "         JSType interfacePropType ="}, {"line_number": 1051, "modified_line": "             interfaceType.getPrototype().getPropertyType(propertyName);"}, {"line_number": 1052, "modified_line": "         if (!interfacePropType.canAssignTo(propertyType)) {"}, {"line_number": 1053, "modified_line": "           compiler.report(t.makeError(n,"}, {"line_number": 1054, "modified_line": "               HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"}, {"line_number": 1055, "modified_line": "               interfaceType.getTopMostDefiningType(propertyName).toString(),"}, {"line_number": 1056, "modified_line": "               interfacePropType.toString(), propertyType.toString()));"}, {"line_number": 1057, "modified_line": "         }"}, {"line_number": 117, "modified_line": "     INTERFACE_METHOD_NOT_IMPLEMENTED);"}]},
        {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [], "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117], "modifications": [{"line_number": 185, "modified_line": "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ="}, {"line_number": 186, "modified_line": "     DiagnosticType.error("}, {"line_number": 187, "modified_line": "         \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\","}, {"line_number": 188, "modified_line": "         \"mismatch of the {0} property type and the type "}, {"line_number": 189, "modified_line": "         \"of the property it overrides from superclass {1}\\n\" +"}, {"line_number": 190, "modified_line": "         \"original: {2}\\n\" +"}, {"line_number": 191, "modified_line": "         \"override: {3}\");"}, {"line_number": 242, "modified_line": "     HIDDEN_INTERFACE_PROPERTY_MISMATCH,"}, {"line_number": 1048, "modified_line": "       }"}, {"line_number": 1049, "modified_line": "       if (interfaceHasProperty) {"}, {"line_number": 1050, "modified_line": "         JSType interfacePropType ="}, {"line_number": 1051, "modified_line": "             interfaceType.getPrototype().getPropertyType(propertyName);"}, {"line_number": 1052, "modified_line": "         if (!propertyType.canAssignTo(interfacePropType)) {"}, {"line_number": 1053, "modified_line": "           compiler.report(t.makeError(n,"}, {"line_number": 1054, "modified_line": "               HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"}, {"line_number": 1055, "modified_line": "               interfaceType.getTopMostDefiningType(propertyName).toString(),"}, {"line_number": 1056, "modified_line": "               interfacePropType.toString(), propertyType.toString()));"}, {"line_number": 1057, "modified_line": "         }"}, {"line_number": 117, "modified_line": "     INTERFACE_METHOD_NOT_IMPLEMENTED);"}]},
        {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [], "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117], "modifications": [{"line_number": 185, "modified_line": "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ="}, {"line_number": 186, "modified_line": "     DiagnosticType.error("}, {"line_number": 187, "modified_line": "         \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\","}, {"line_number": 188, "modified_line": "         \"mismatch of the {0} property type and the type "}, {"line_number": 189, "modified_line": "         \"of the property it overrides from superclass {1}\\n\" +"}, {"line_number": 190, "modified_line": "         \"original: {2}\\n\" +"}, {"line_number": 191, "modified_line": "         \"override: {3}\");"}, {"line_number": 242, "modified_line": "     HIDDEN_INTERFACE_PROPERTY_MISMATCH,"}, {"line_number": 1048, "modified_line": "       }"}, {"line_number": 1049, "modified_line": "       if (interfaceHasProperty) {"}, {"line_number": 1050, "modified_line": "         JSType interfacePropType ="}, {"line_number": 1051, "modified_line": "             interfaceType.getPrototype().getPropertyType(propertyName);"}, {"line_number": 1052, "modified_line": "         if (!propertyType.canAssignTo(interfacePropType)) {"}, {"line_number": 1053, "modified_line": "           compiler.report(t.makeError(n,"}, {"line_number": 1054, "modified_line": "               HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"}, {"line_number": 1055, "modified_line": "               interfaceType.getTopMostDefiningType(propertyName).toString(),"}, {"line_number": 1056, "modified_line": "               interfacePropType.toString(), propertyType.toString()));"}, {"line_number": 1057, "modified_line": "         }"}, {"line_number": 117, "modified_line": "     INTERFACE_METHOD_NOT_IMPLEMENTED);"}]},
        {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [], "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117], "modifications": [{"line_number": 185, "modified_line": "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ="}, {"line_number": 186, "modified_line": "     DiagnosticType.error("}, {"line_number": 187, "modified_line": "         \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\","}, {"line_number": 188, "modified_line": "         \"mismatch of the {0} property type and the type "}, {"line_number": 189, "modified_line": "         \"of the property it overrides from superclass {1}\\n\" +"}, {"line_number": 190, "modified_line": "         \"original: {2}\\n\" +"}, {"line_number": 191, "modified_line": "         \"override: {3}\");"}, {"line_number": 242, "modified_line": "     HIDDEN_INTERFACE_PROPERTY_MISMATCH,"}, {"line_number": 1048, "modified_line": "       }"}, {"line_number": 1049, "modified_line": "       if (interfaceHasProperty) {"}, {"line_number": 1050, "modified_line": "         JSType interfacePropType ="}, {"line_number": 1051, "modified_line": "             interfaceType.getPrototype().getPropertyType(propertyName);"}, {"line_number": 1052, "modified_line": "         if (!interfacePropType.canAssignTo(propertyType)) {"}, {"line_number": 1053, "modified_line": "           compiler.report(t.makeError(n,"}, {"line_number": 1054, "modified_line": "               HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"}, {"line_number": 1055, "modified_line": "               interfaceType.getTopMostDefiningType(propertyName).toString(),"}, {"line_number": 1056, "modified_line": "               interfacePropType.toString(), propertyType.toString()));"}, {"line_number": 1057, "modified_line": "         }"}, {"line_number": 117, "modified_line": "     INTERFACE_METHOD_NOT_IMPLEMENTED);"}]},
        {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [], "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117], "modifications": [{"line_number": 185, "modified_line": "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ="}, {"line_number": 186, "modified_line": "     DiagnosticType.error("}, {"line_number": 187, "modified_line": "         \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\","}, {"line_number": 188, "modified_line": "         \"mismatch of the {0} property type and the type "}, {"line_number": 189, "modified_line": "         \"of the property it overrides from superclass {1}\\n\" +"}, {"line_number": 190, "modified_line": "         \"original: {2}\\n\" +"}, {"line_number": 191, "modified_line": "         \"override: {3}\");"}, {"line_number": 242, "modified_line": "     HIDDEN_INTERFACE_PROPERTY_MISMATCH,"}, {"line_number": 1048, "modified_line": "       }"}, {"line_number": 1049, "modified_line": "       if (interfaceHasProperty) {"}, {"line_number": 1050, "modified_line": "         JSType interfacePropType ="}, {"line_number": 1051, "modified_line": "             interfaceType.getPrototype().getPropertyType(propertyName);"}, {"line_number": 1052, "modified_line": "         if (!propertyType.canAssignTo(interfacePropType)) {"}, {"line_number": 1053, "modified_line": "           compiler.report(t.makeError(n,"}, {"line_number": 1054, "modified_line": "               HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"}, {"line_number": 1055, "modified_line": "               interfaceType.getTopMostDefiningType(propertyName).toString(),"}, {"line_number": 1056, "modified_line": "               interfacePropType.toString(), propertyType.toString()));"}, {"line_number": 1057, "modified_line": "         }"}, {"line_number": 117, "modified_line": "     INTERFACE_METHOD_NOT_IMPLEMENTED);"}]},
        {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [], "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117], "modifications": [{"line_number": 185, "modified_line": "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ="}, {"line_number": 186, "modified_line": "     DiagnosticType.error("}, {"line_number": 187, "modified_line": "         \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\","}, {"line_number": 188, "modified_line": "         \"mismatch of the {0} property type and the type "}, {"line_number": 189, "modified_line": "         \"of the property it overrides from superclass {1}\\n\" +"}, {"line_number": 190, "modified_line": "         \"original: {2}\\n\" +"}, {"line_number": 191, "modified_line": "         \"override: {3}\");"}, {"line_number": 242, "modified_line": "     HIDDEN_INTERFACE_PROPERTY_MISMATCH,"}, {"line_number": 1048, "modified_line": "       }"}, {"line_number": 1049, "modified_line": "       if (interfaceHasProperty) {"}, {"line_number": 1050, "modified_line": "         JSType interfacePropType ="}, {"line_number": 1051, "modified_line": "             interfaceType.getPrototype().getPropertyType(propertyName);"}, {"line_number": 1052, "modified_line": "         if (!interfacePropType.canAssignTo(propertyType)) {"}, {"line_number": 1053, "modified_line": "           compiler.report(t.makeError(n,"}, {"line_number": 1054, "modified_line": "               HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,"}, {"line_number": 1055, "modified_line": "               interfaceType.getTopMostDefiningType(propertyName).toString(),"}, {"line_number": 1056, "modified_line": "               interfacePropType.toString(), propertyType.toString()));"}, {"line_number": 1057, "modified_line": "         }"}, {"line_number": 117, "modified_line": "     INTERFACE_METHOD_NOT_IMPLEMENTED);"}]},
        {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [], "deletions": [185, 186, 187, 188, 189, 190, 191, 242, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 117], "modifications": [{"line_number": 185, "modified_line": "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ="}, {"line_number": 186, "modified_line": "     DiagnosticType.error("}, {"line_number": 187, "modified_line": "         \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\","}, {"line_number": 188, "modified_line": "         \"mismatch of the {0} property type and the type "}, {"line_number": 189, "modified_line": "         \"of the property it overrides from superclass {1}\\n\" +"}, {"line_number": 190, "modified_line": "         \"original: {2}\\n\" +"}, {"line_number": 191, "modified_line": "         \"override: {3}\");"}, {"line_number": 242, "modified_line": "     HIDDEN_INTERFACE_PROPERTY_MISMATCH,"}, {"line_number": 1048, "modified_line": "       }"}, {"line_number": 1049, "modified_line": "       if (interfaceHasProperty) {"}, {"line_number": 1050, "modified_line": "         JSType interfacePropType ="}, {"line_number": 1051, "modified_line": "             interfaceType.getPrototype().getPropertyType(propertyName);"}, {"line_number": 1052, "modified_line": "         if (!propertyType