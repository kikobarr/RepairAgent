[
    {"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": [{"line_number": 419, "modified_line": "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"}, {"line_number": 420, "modified_line": "        if (out != null && out.length > outAvail) {"}, {"line_number": 421, "modified_line": "            buffer = out;"}, {"line_number": 422, "modified_line": "            pos = outPos;"}, {"line_number": 423, "modified_line": "            readPos = outPos;"}, {"line_number": 424, "modified_line": "        }"}]},
    {"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    }"]], "insertions": [], "deletions": [169, 170, 171], "modifications": [{"line_number": 169, "modified_line": "                    if (c > 0 && b.length > len) {"}, {"line_number": 170, "modified_line": "                        base64.setInitialBuffer(b, offset, len);"}, {"line_number": 171, "modified_line": "                    }"}]}
][{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null) {", "            throw new IllegalArgumentException(\"Input byte array cannot be null\");", "        }", "        if (out.length != outAvail) {", "            throw new IllegalArgumentException(\"Input byte array length must match specified available length\");", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            if (outPos < 0) {", "                throw new IllegalArgumentException(\"Output position must be non-negative\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 424, "new_lines": ["            readPos = 0;"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            if (out.length < outAvail) {", "                throw new IllegalArgumentException(\"Output byte array length must be at least the specified available length\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            if (outPos < 0 || outPos > out.length) {", "                throw new IndexOutOfBoundsException(\"Output position is out of bounds\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null) {", "            throw new IllegalArgumentException(\"Input byte array cannot be null\");", "        }", "        if (outPos < 0 || outPos >= out.length) {", "            throw new IndexOutOfBoundsException(\"Output position is out of bounds\");", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            if (outPos < 0 || outPos >= out.length) {", "                throw new IndexOutOfBoundsException(\"Output position is out of bounds\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        }", "        if (outAvail <= 0) {", "            throw new IllegalArgumentException(\"Output available length must be greater than 0\");", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null) {", "            throw new NullPointerException(\"Input byte array cannot be null\");", "        }", "        if (out.length != outAvail) {", "            throw new IllegalArgumentException(\"Input byte array length must match specified available length\");", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            if (out.length < outAvail) {", "                throw new IllegalArgumentException(\"Output byte array length must be at least the specified available length\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null) {", "            throw new NullPointerException(\"Input byte array cannot be null\");", "        }", "        if (outPos < 0 || outPos >= out.length) {", "            throw new IndexOutOfBoundsException(\"Output position is out of bounds\");", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            if (outPos < 0) {", "                throw new IllegalArgumentException(\"Output position must be non-negative\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 424, "new_lines": ["            readPos = 0;"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            if (out.length < outAvail) {", "                throw new IllegalArgumentException(\"Output byte array length must be at least the specified available length\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            if (outPos < 0 || outPos > out.length) {", "                throw new IndexOutOfBoundsException(\"Output position is out of bounds\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null) {", "            throw new IllegalArgumentException(\"Input byte array cannot be null\");", "        }", "        if (out.length != outAvail) {", "            throw new IllegalArgumentException(\"Input byte array length must match specified available length\");", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            if (outPos < 0 || outPos > out.length) {", "                throw new IndexOutOfBoundsException(\"Output position is out of bounds\");", "            }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        }", "        if (outAvail <= 0) {", "            throw new IllegalArgumentException(\"Output available length must be greater than 0\");", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null) {", "            throw new NullPointerException(\"Input byte array cannot be null\");", "        }", "        if (outPos < 0 || outPos > out.length) {", "            throw new IndexOutOfBoundsException(\"Output position is out of bounds\");", "        }"]}], "deletions": [], "modifications": []}][
    {"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
    {"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    }"]], "insertions": [], "deletions": [169, 170, 171], "modifications": []}
][
    {"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 420, "new_lines": ["        if (out != null && out.length >= outAvail) {"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 420, "new_lines": ["        if (out != null && out.length > outAvail) {"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 420, "new_lines": ["        if (out != null && out.length != outAvail) {"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 420, "new_lines": ["        if (out != null && out.length <= outAvail) {"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 420, "new_lines": ["        if (out != null && out.length < outAvail) {"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 420, "new_lines": ["        if (out != null && out.length != outAvail && out.length > 0) {"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]},
        {"line_number": 422, "new_lines": ["            pos = 0;"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]},
        {"line_number": 422, "new_lines": ["            pos = 0;"]},
        {"line_number": 423, "new_lines": ["            readPos = 0;"]}
    ], 
    "deletions": [], 
    "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], 
    "insertions": [
        {"line_number": 422, "new_lines": ["            pos = 0;"]},
        {"line_number": 423, "new_lines": ["            readPos = 0;"]}
    ], 
    "deletions": [], 
    "modifications": []
}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length <= outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outPos;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos + 1;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        } else {", "            throw new IllegalArgumentException(\"Invalid buffer size\");"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length >= outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length != outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(byte[] out, int outPos, int outAvail) {", "        if (out == null || out.length != outAvail) {", "            throw new IllegalArgumentException(\"Invalid buffer\");", "        }"]}], "deletions": [420, 421, 422, 423, 424], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && outPos >= outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos - 1;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(byte[] out, int outPos, int outAvail) {", "        if (out == null || out.length != outAvail) {", "            throw new IllegalArgumentException(\"Invalid buffer\");", "        }"]}], "deletions": [420, 421, 422, 423, 424], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && outPos > outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos + 1;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 424, "new_lines": ["            // Increment read position by 1", "            readPos++;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length != outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(byte[] out, int outPos, int outAvail) {", "        if (out == null || out.length != outAvail) {", "            throw new IllegalArgumentException(\"Invalid buffer\");", "        }"]}], "deletions": [420, 421, 422, 423, 424], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && outPos <= outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        } else {", "            throw new IllegalArgumentException(\"Invalid buffer size\");"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length != outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && outPos > outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos - 1;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422",[
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length != outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null || out.length != outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null || outPos < 0 || outAvail < 0) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outPos;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = 0;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["    }", "    public int getPos() {", "        return pos;", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(int size) {", "    // Set the initial buffer size for the data structure", "    // This method is used to allocate memory for the buffer", "    // The size parameter specifies the initial size of the buffer", "    // If the size is less than or equal to 0, throw an IllegalArgumentException", "    if (size <= 0) {", "        throw new IllegalArgumentException(\"Buffer size must be greater than 0\");", "    }", "    ", "    // Initialize the buffer with the specified size", "    // This will allocate memory for the buffer with the given size", "    // The buffer can now hold 'size' number of elements", "    // The buffer is initialized with default values (e.g., 0 for integers, null for objects)", "    buffer = new Object[size];"]}], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(int size) {", "    // Set the initial buffer size for the data structure", "    // This method is used to allocate memory for the buffer", "    // The size parameter specifies the initial size of the buffer", "    // If the size is less than or equal to 0, throw an IllegalArgumentException", "    if (size <= 0) {", "        throw new IllegalArgumentException(\"Buffer size must be greater than 0\");", "    }", "    ", "    // Initialize the buffer with the specified size", "    // This will allocate memory for the buffer with the given size", "    // The buffer can now hold 'size' number of elements", "    // The buffer is initialized with default values (e.g., 0 for integers, null for objects)", "    buffer = new Object[size];"]}], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(int size) {", "    // Set the initial buffer size for the data structure", "    // This method is used to allocate memory for the buffer", "    // The size parameter specifies the initial size of the buffer", "    // If the size is less than or equal to 0, throw an IllegalArgumentException", "    if (size <= 0) {", "        throw new IllegalArgumentException(\"Buffer size must be greater than 0\");", "    }", "    ", "    // Initialize the buffer with the specified size", "    // This will allocate memory for the buffer with the given size", "    // The buffer can now hold 'size' number of elements", "    // The buffer is initialized with default values (e.g., 0 for integers, null for objects)", "    buffer = new Object[size];"]}], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(int size) {", "    // Set the initial buffer size for the data structure", "    // This method is used to allocate memory for the buffer", "    // The size parameter specifies the initial size of the buffer", "    // If the size is less than or equal to 0, throw an IllegalArgumentException", "    if (size <= 0) {", "        throw new IllegalArgumentException(\"Buffer size must be greater than 0\");", "    }", "    ", "    // Initialize the buffer with the specified size", "    // This will allocate memory for the buffer with the given size", "    // The buffer can now hold 'size' number of elements", "    // The buffer is initialized with default values (e.g., 0 for integers, null for objects)", "    buffer = new Object[size];"]}], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(int size) {", "    // Set the initial buffer size for the data structure", "    // This method is used to allocate memory for the buffer", "    // The size parameter specifies the initial size of the buffer", "    // If the size is less than or equal to 0, throw an IllegalArgumentException", "    if (size <= 0) {", "        throw new IllegalArgumentException(\"Buffer size must be greater than 0\");", "    }", "    ", "    // Initialize the buffer with the specified size", "    // This will allocate memory for the buffer with the given size", "    // The buffer can now hold 'size' number of elements", "    // The buffer is initialized with default values (e.g., 0 for integers, null for objects)", "    buffer = new Object[size];"]}], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(int size) {", "    // Set the initial buffer size for the data structure", "    // This method is used to allocate memory for the buffer", "    // The size parameter specifies the initial size of the buffer", "    // If the size is less than or equal to 0, throw an IllegalArgumentException", "    if (size <= 0) {", "        throw new IllegalArgumentException(\"Buffer size must be greater than 0\");", "    }", "    ", "    // Initialize the buffer with the specified size", "    // This will allocate memory for the buffer with the given size", "    // The buffer can now hold 'size' number of elements", "    // The buffer is initialized with default values (e.g., 0 for integers, null for objects)", "    buffer = new Object[size];"]}], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length > outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length < outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length <= outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[out.length];"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420",[
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    // Inserted comment for mutation 1"]} , {"line_number": 422, "new_lines": ["            pos = 0; // Mutated line to change pos value"]} ], "deletions": [420], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length >= outAvail) { // Mutated condition to fix bug"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["    // Added new line to fix bug"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [424], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [423], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [422], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [421], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length != outAvail) { // Fixed the condition to prevent ArrayIndexOutOfBoundsException"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail]; // Initialize buffer with specific size to prevent ArrayIndexOutOfBoundsException"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = 0; // Reset readPos to prevent ArrayIndexOutOfBoundsException"]} ], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && outPos >= 0 && out.length == outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outPos >= 0 ? outPos : 0;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos >= 0 ? outPos : 0;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length >= outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outPos >= 0 ? outPos : 1;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos >= 0 ? outPos : 1;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && outAvail > 0 && out.length == outAvail) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outPos >= 0 ? outPos : outAvail;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos >= 0 ? outPos : outAvail;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length == outAvail && outPos >= 0) {"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    }"]], "insertions": [], "deletions": [169, 170, 171], "modifications": []}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length > outAvail) {"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outAvail;"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 424, "new_lines": ["            readPos = outAvail;"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["    }", "    // Add a comment to mark the end of the method"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    void setInitialBuffer(byte[] out, int outPos, int outAvail) {", "    // Add a comment to describe the method functionality", "    // This method sets the initial buffer based on the provided parameters"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = out.length;"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];", "            pos = 0;"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out == null || out.length != outAvail) {"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outPos + 1;"]} ], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail];", "            pos = outPos;"]} ], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length >= outAvail) {"]}], "deletions": [421], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outPos;"]}], "deletions": [423], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = outPos;"]}], "deletions": [424], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            readPos = outPos;"]}], "deletions": [423], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length > outAvail) {"]}], "deletions": [421], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(byte[] out, int outPos, int outAvail) { // Modified to public access"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            readPos = 0; // Set readPos to 0"]}], "deletions": [423], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["    // Additional logic here"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    // Inserting a new line here", "    // More detailed logic goes here"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["    // Add a new feature here"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    // Inserting a fix for the bug here"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": [
{"line_number": 419, "modified_line": "    public void setInitialBuffer(byte[] out, int outPos, int outAvail) {"}
]},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": [
{"line_number": 420, "modified_line": "        if (out != null && out.length != outAvail) {"}
]},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": [
{"line_number": 423, "modified_line": "            readPos = pos;"} 
]},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": [
{"line_number": 419, "modified_line": "    void setInitialBuffer(byte[] out, int outPos, int outAvail) { // Modified the method signature"} 
]},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": [
{"line_number": 170, "modified_line": "                        base64.setInitialBuffer(b, offset, len); // Updated the method call"} 
]},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": [
{"line_number": 170, "modified_line": "                        base64.setInitialBuffer(b, offset, len); // Modified the method call to pass different arguments"} 
]},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": [
{"line_number": 170, "modified_line": "                        base64.setInitialBuffer(b, offset, len); // Changed the method call to use a different method"} 
]},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": [
{"line_number": 170, "modified_line": "                        base64.setInitialBuffer(b, offset, len); // Added a comment to explain the purpose of the method call"} 
]}][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    public void setInitialBuffer(int size) {", "    // Mutant 1: Changed parameter type to int", "    // This mutation aims to test if changing the parameter type fixes the bug", "    if (size <= 0) {", "        throw new IllegalArgumentException(\"Buffer size must be greater than 0\");", "    }", "    buffer = new Object[size];"]}]}],
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            // Mutant 2: Comment added to specify the purpose of readPos variable assignment"]}]}],
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["    // Mutant 3: Added a comment to explain the end of the method"]}]}],
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "deletions": [420], "modifications": [{"line_number": 420, "modified_line": "        if (out != null && out.length >= outAvail) {"}]}],
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "deletions": [423], "modifications": [{"line_number": 423, "modified_line": "            // Mutant 5: Removed readPos assignment"}]}],
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "deletions": [424], "modifications": [{"line_number": 424, "modified_line": "        // Mutant 6: Removed pos assignment"}]}],
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutant 7: Added a comment to indicate the end of the if block"]}]}],
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutant 8: Added a new line with a comment"]}]}],
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "deletions": [171], "modifications": [{"line_number": 170, "modified_line": "                        // Mutant 9: Modified the method call with a new comment"}]}],
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "deletions": [170], "modifications": [{"line_number": 170, "modified_line": "                        // Mutant 10: Removed the method call, keeping the if block empty"}]}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 419, "new_lines": ["    void setInitialBuffer(byte[] out, int outPos, int outAvail) {", "        if (out != null && outPos >= 0 && outAvail >= 0 && outPos < out.length && outAvail <= out.length) {", "            buffer = out;", "            pos = outPos;", "            readPos = outPos;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [423], "modifications": [{"line_number": 423, "modified_line": "            readPos = outPos + 1;"}]},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [420], "modifications": [{"line_number": 420, "modified_line": "        if (out != null && out.length >= outAvail) {"}]},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = pos; // Set readPos to pos instead of outPos"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        } else {", "            throw new IllegalArgumentException(\"Invalid buffer parameters\");"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [422], "modifications": [{"line_number": 422, "modified_line": "            pos = outPos + 1;"}]},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length == outAvail && outPos >= 0) {"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail]; // Initialize buffer with specified size"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail]; // Initialize buffer with specified size"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        throw new IndexOutOfBoundsException(); // Throw exception if buffer parameters are invalid"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        // Add a comment to indicate the end of the method"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length == outAvail && outPos >= 0 && outAvail > 0) {"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length == outAvail && outPos >= 0) {"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length == outAvail && outPos >= 0 && outAvail > 0) {"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail]; // Initialize buffer with specified size"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail]; // Initialize buffer with specified size"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail]; // Initialize buffer with specified size"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        throw new IndexOutOfBoundsException(); // Throw exception if buffer parameters are invalid"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        // Add a comment to indicate the end of the method"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length == outAvail && outPos >= 0) {"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length == outAvail && outPos >= 0) {"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail]; // Initialize buffer with specified size"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[outAvail]; // Initialize buffer with specified size"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["        throw new IndexOutOfBoundsException(); // Throw exception if buffer parameters are invalid"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 418, "new_lines": ["    // Mutation 1: Adding a comment before setting buffer", "    // to improve code readability and understanding"]}], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            // Mutation 2: Changing the assignment of pos to a different variable", "            pos = outPos + 1;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            // Mutation 3: Changing the assignment of readPos to a different value", "            readPos = outPos - 1;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            // Mutation 4: Changing the assignment of buffer to a different variable", "            buffer = new byte[out.length];"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 425, "new_lines": ["    // Mutation 5: Adding a new line after the method to log a message", "    System.out.println(\"Initial buffer set successfully.\");"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        // Mutation 6: Changing the condition to always true"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 7: Adding a comment to mark the end of the if block"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutation 8: Adding a comment to indicate the end of the method"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 169, "new_lines": ["    // Mutation 9: Adding a comment before the condition to explain its purpose", "    // The condition checks the values of c, b length, and len"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 10: Adding a log message after setting the initial buffer", "                        System.out.println(\"Initial buffer set successfully.\");"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 169, "new_lines": ["    // Mutation 11: Changing the condition to always true"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutation 12: Adding a comment to indicate the end of the method"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutation 13: Adding a log message after the end of the method", "                        System.out.println(\"End of setInitialBuffer method.\");"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 14: Adding a comment to explain the purpose of setting the initial buffer"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 169, "new_lines": ["    // Mutation 15: Changing the condition to always false"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 16: Adding a comment to indicate the buffer offset"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 17: Adding a comment to explain the purpose of setting the buffer offset"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 18: Adding a comment to indicate the buffer length"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 19: Adding a comment to explain the purpose of setting the buffer length"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 169, "new_lines": ["    // Mutation 20: Changing the condition to always true"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutation 21: Adding a comment to indicate the end of the method"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 169, "new_lines": ["    // Mutation 22: Changing the condition to always false"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutation 23: Adding a log message after the end of the method", "                        System.out.println(\"End of setInitialBuffer method.\");"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 24: Adding a comment to explain the purpose of setting the initial buffer"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 169, "new_lines": ["    // Mutation 25: Changing the condition to always true"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutation 26: Adding a comment to indicate the end of the method"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 169, "new_lines": ["    // Mutation 27: Changing the condition to always false"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 171, "new_lines": ["                        // Mutation 28: Adding a log message after the end of the method", "                        System.out.println(\"End of setInitialBuffer method.\");"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 170, "new_lines": ["                        // Mutation 29: Adding a comment to explain the purpose of setting the initial buffer"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [{"line_number": 169, "new_lines": ["    // Mutation 30: Changing the condition to always true"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            readPos = outPos + 1;"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[out.length];"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = 0;"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 421, "new_lines": ["            buffer = new byte[out.length];"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 422, "new_lines": ["            pos = outPos + 1;"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 423, "new_lines": ["            readPos = 0;"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [423], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [424], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length >= outAvail) {"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length <= outAvail) {"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [{"line_number": 420, "new_lines": ["        if (out != null && out.length != outAvail) {"]}], "deletions": [], "modifications": []
}
][
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64.java", "target_lines": [["419", "    void setInitialBuffer(byte[] out, int outPos, int outAvail) {"], ["420", "        if (out != null && out.length == outAvail) {"], ["421", "            buffer = out;"], ["422", "            pos = outPos;"], ["423", "            readPos = outPos;"], ["424", "        }"], ["425", "    }"]], "insertions": [], "deletions": [419, 420, 421, 422, 423, 424, 425], "modifications": []},
{"file_name": "org/apache/commons/codec/binary/Base64InputStream.java", "target_lines": [["169", "                    if (c > 0 && b.length == len) {"], ["170", "                        base64.setInitialBuffer(b, offset, len);"], ["171", "                    "]], "insertions": [], "deletions": [169, 170, 171], "modifications": []}
]