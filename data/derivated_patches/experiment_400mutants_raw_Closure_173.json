[
    {
        "file_name": "com/google/javascript/jscomp/CodeGenerator.java",
        "target_lines": [
            ["130", "      if (last.getType() == type &&"],
            ["131", "          NodeUtil.isAssociative(type)) {"],
            ["132", "        addExpr(first, p, context);"],
            ["133", "        cc.addOp(opstr, true);"],
            ["134", "        addExpr(last, p, rhsContext);"],
            ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]
        ],
        "insertions": [],
        "deletions": [130, 131, 132, 133, 134, 135],
        "modifications": [
            {"line_number": 130, "modified_line": "      if (last.getType() == type ||"},
            {"line_number": 131, "modified_line": "          NodeUtil.isAssociative(type)) {"}
        ]
    },
    {
        "file_name": "com/google/javascript/jscomp/CodeGenerator.java",
        "target_lines": [
            ["130", "      if (last.getType() == type &&"],
            ["131", "          NodeUtil.isAssociative(type)) {"],
            ["132", "        addExpr(first, p, context);"],
            ["133", "        cc.addOp(opstr, true);"],
            ["134", "        addExpr(last, p, rhsContext);"],
            ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]
        ],
        "insertions": [],
        "deletions": [130, 131, 132, 133, 134, 135],
        "modifications": [
            {"line_number": 130, "modified_line": "      if (last.getType() == type &&"},
            {"line_number": 131, "modified_line": "          !NodeUtil.isAssociative(type)) {"}
        ]
    },
    {
        "file_name": "com/google/javascript/jscomp/CodeGenerator.java",
        "target_lines": [
            ["130", "      if (last.getType() == type &&"],
            ["131", "          NodeUtil.isAssociative(type)) {"],
            ["132", "        addExpr(first, p, context);"],
            ["133", "        cc.addOp(opstr, true);"],
            ["134", "        addExpr(last, p, rhsContext);"],
            ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]
        ],
        "insertions": [],
        "deletions": [130, 131, 132, 133, 134, 135],
        "modifications": [
            {"line_number": 130, "modified_line": "      if (last.getType() == type &&"},
            {"line_number": 131, "modified_line": "          NodeUtil.isAssociative(type) || {"}
        ]
    }
][
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type &&"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) && !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type ||"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, false);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 133, "modified_line": "        cc.addOp(opstr, false);"}]},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, false);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 133, "modified_line": "        cc.addOp(opstr, false);"}]},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (!NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type &&"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type &&"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (!NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type ||"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type ||"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, false);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) && !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 133, "modified_line": "        cc.addOp(opstr, false);"}]},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, false);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) && !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 133, "modified_line": "        cc.addOp(opstr, false);"}]},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (!NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type &&"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type &&"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (!NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type ||"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type ||"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, false);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) && !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 133, "modified_line": "        cc.addOp(opstr, false);"}]},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, false);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) && !NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 133, "modified_line": "        cc.addOp(opstr, false);"}]},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number": 135, "modified_line": "      } else if (NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"}],
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) || NodeUtil.isAssignmentOp(last)) {"], "insertions": [], "deletions": [], "modifications": [{"line_number[
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType())) {"]}], "deletions": [130, 131, 133, 134, 135], "modifications": []}
][
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 130, "new_lines": ["        if (last.getType() == type && precedence(first.getType())) {"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 131, "new_lines": ["          NodeUtil.isAssociative(type) && precedence(first.getType())) {"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType())) { // Adjusted for operator precedence"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 133, "new_lines": ["        cc.addOp(opstr, precedence(first.getType()));"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 134, "new_lines": ["        addExpr(last, p, precedence(rhsContext));"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 135, "new_lines": ["      } else if (NodeUtil.isAssignmentOp(n) && precedence(last)) {"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 130, "new_lines": ["      if (last.getType() == type && precedence(first.getType())) { // Fixing operator precedence"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 131, "new_lines": ["          NodeUtil.isAssociative(type) && precedence(first.getType())) { // Adjusted for operator precedence"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType())) { // Adjusted for operator precedence"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 133, "new_lines": ["        cc.addOp(opstr, precedence(first.getType()));"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 134, "new_lines": ["        addExpr(last, p, precedence(rhsContext));"]}]}},
    {"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 135, "new_lines": ["      } else if (NodeUtil.isAssignmentOp(n) && precedence(last)) {"]}]}
][
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() != type &&"], ["131", "          !NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (!NodeUtil.isAssignmentOp(n) || !NodeUtil.isAssignmentOp(last)) {"]], "insertions": [], "deletions": [130, 131, 132, 133, 134, 135], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, false);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 133, "modified_line": "        cc.addOp(opstr, false);"}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(first, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 134, "modified_line": "        addExpr(first, p, rhsContext);"}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 132, "new_lines": ["        if (first.isLeaf()) { // Check if first is a leaf node"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 135, "new_lines": ["        if (NodeUtil.isCommutative(opstr)) { // Check if operator is commutative"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 131, "new_lines": ["          if (opstr.equals(\"+\") || opstr.equals(\"*\") { // Check if operator is addition or multiplication"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 133, "new_lines": ["        addPrecedence(first, p, context); // Adding precedence check"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 131, "new_lines": ["          if (opstr.equals(\"-\") && first.getType() == Node.MUL) { // Check for specific condition"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 134, "new_lines": ["        addExpr(last, p, rhsContext); // Adding expression for last node"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 135, "new_lines": ["        if (cc.isDebugMode()) { // Check if in debug mode before assignment operation"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 130, "new_lines": ["      if (cc.isDebugMode() && last.getType() == type) { // Check debug mode and type match"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 135, "new_lines": ["        if (cc.isDebugMode()) { // Check debug mode before assignment operation"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 132, "new_lines": ["        if (NodeUtil.isLeaf(last)) { // Check if last is a leaf node"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 131, "new_lines": ["          if (opstr.equals(\"+\") && first.getType() == Node.ADD) { // Check for specific condition"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 134, "new_lines": ["        addExpr(last, p, rhsContext); // Adding expression for last node"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 135, "new_lines": ["        if (cc.isDebugMode()) { // Check if in debug mode before assignment operation"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 130, "new_lines": ["      if (NodeUtil.isBinary(last) && last.getType() == type) { // Check if binary and type match"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 135, "new_lines": ["        if (NodeUtil.hasChildren(last)) { // Check if last has children before assignment operation"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 131, "new_lines": ["          if (opstr.equals(\"*\") && first.getType() == Node.DIV) { // Check for specific condition"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 134, "new_lines": ["        addExpr(last, p, rhsContext); // Adding expression for last node"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 135, "new_lines": ["        if (cc.isDebugMode()) { // Check debug mode before assignment operation"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 132, "new_lines": ["        if (!NodeUtil.isLeaf(first)) { // Check if first is not a leaf node"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 131, "new_lines": ["          if (opstr.equals(\"-\") && first.getType() == Node.ADD) { // Check for specific condition"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 134, "new_lines": ["        addExpr(last, p, rhsContext); // Adding expression for last node"]}]}],
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]], "insertions": [{"line_number": 135, "new_lines": ["        if (cc.isDebugMode()) { // Check if in debug mode before assignment operation"]}]}
][
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 130, "new_lines": ["        if (last.getType() == type && precedence(first.getType())) { // Adjusted for operator precedence"]}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 131, "new_lines": ["          NodeUtil.isAssociative(type) && precedence(first.getType())) { // Adjusted for operator precedence"]}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        addExpr(first, p, context); // Commented out for testing"]}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 133, "new_lines": ["        cc.addOp(opstr, true); // Inserted for testing"]}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 134, "new_lines": ["        addExpr(last, p, rhsContext); // Inserted for testing"]}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 135, "new_lines": ["      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) { // Inserted for testing"]}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "modifications": [{"line_number": 130, "modified_line": "      if (last.getType() == type && precedence(first.getType()) { // Modified for operator precedence"}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "modifications": [{"line_number": 131, "modified_line": "          NodeUtil.isAssociative(type) && precedence(first.getType()) { // Modified for operator precedence"}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "modifications": [{"line_number": 132, "modified_line": "        addExpr(first, p, context); // Modified for testing"}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "modifications": [{"line_number": 133, "modified_line": "        cc.addOp(opstr, true); // Modified for testing"}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "modifications": [{"line_number": 134, "modified_line": "        addExpr(last, p, rhsContext); // Modified for testing"}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "modifications": [{"line_number": 135, "modified_line": "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) { // Modified for testing"}]},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 102, "new_lines": ["// Inserted new line for testing"]}]} 
][
    {
        "file_name": "com/google/javascript/jscomp/CodeGenerator.java",
        "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"],
        "insertions": [
            {"line_number": 130, "new_lines": ["      if (last.getType() == type && precedence(first.getType()) { // Adjusted for operator precedence"]},
            {"line_number": 131, "new_lines": ["          NodeUtil.isAssociative(type)) {"]},
            {"line_number": 132, "new_lines": ["        addExpr(first, p, context); // Inserted for clarity"]},
            {"line_number": 133, "new_lines": ["        cc.addOp(opstr, true); // Added for consistency"]},
            {"line_number": 134, "new_lines": ["        addExpr(last, p, rhsContext); // Added for correctness"]},
            {"line_number": 135, "new_lines": ["      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]}
        ],
        "deletions": [130, 131, 132, 133, 134, 135],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/CodeGenerator.java",
        "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"],
        "insertions": [
            {"line_number": 130, "new_lines": ["      if (last.getType() == type && precedence(first.getType()) > precedence(last.getType())) { // Adjusted for operator precedence"]},
            {"line_number": 131, "new_lines": ["          NodeUtil.isAssociative(type)) {"]},
            {"line_number": 132, "new_lines": ["        addExpr(first, p, context);"]},
            {"line_number": 133, "new_lines": ["        cc.addOp(opstr, true);"]},
            {"line_number": 134, "new_lines": ["        addExpr(last, p, rhsContext);"]},
            {"line_number": 135, "new_lines": ["      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"]}
        ],
        "deletions": [130, 131, 132, 133, 134, 135],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/CodeGenerator.java",
        "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"],
        "insertions": [
            {"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType())) { // Adjusted for operator precedence"]}
        ],
        "deletions": [130, 131, 133, 134, 135],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/CodeGenerator.java",
        "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"],
        "insertions": [
            {"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType()) { // Adjusted for operator precedence"]}
        ],
        "deletions": [130, 131, 133, 134, 135],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/CodeGenerator.java",
        "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"],
        "insertions": [
            {"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType()) > precedence(last.getType())) { // Adjusted for operator precedence"]}
        ],
        "deletions": [130, 131, 133, 134, 135],
        "modifications": []
    }
][
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType()) { // Adjusted for operator precedence"]}]}], "deletions": [130, 131, 133, 134, 135], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(n.getType())) { // Adjusted for operator precedence"]}]}], "deletions": [130, 131, 133, 134, 135], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType()) { // Adjusted for operator precedence"]}]}], "deletions": [130, 131, 133, 134, 135], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType()) > precedence(last.getType())) { // Adjusted for operator precedence"]}]}], "deletions": [130, 131, 133, 134, 135], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType()) > precedence(last.getType())) { // Adjusted for operator precedence"]}]}], "deletions": [130, 131, 133, 134, 135], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeGenerator.java", "target_lines": [["130", "      if (last.getType() == type &&"], ["131", "          NodeUtil.isAssociative(type)) {"], ["132", "        addExpr(first, p, context);"], ["133", "        cc.addOp(opstr, true);"], ["134", "        addExpr(last, p, rhsContext);"], ["135", "      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {"], "insertions": [{"line_number": 132, "new_lines": ["        if (last.getType() == type && precedence(first.getType()) > precedence(last.getType())) { // Adjusted for operator precedence"]}]}], "deletions": [130, 131, 133, 134, 135], "modifications": []}
]