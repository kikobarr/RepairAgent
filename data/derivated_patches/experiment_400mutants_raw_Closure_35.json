[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); // Mutated code"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) { // Mutated code"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1128], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          } // Mutated code"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1132], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            } // Mutated code"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            // objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          // }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1132], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "        }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "        }"], ["1133", "      }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "      }"], ["1133", "      }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "      }"], ["1133", "    }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "      }"], ["1133", "    }"], ["1134", "    }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "// objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "      }"], ["1133", "    }"], ["1134", "    }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "objType.defineInferredProperty(prop, typeToInfer, null); // Mutated code"], ["1132", "      } //"], ["1133", "    }"], ["1134", "    }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType())[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(ARRAY_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(CHECKED_UNKNOWN_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(JSTypeNative.UNKNOWN_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(UNKNOWN_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(STRING_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(NUMBER_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(BOOLEAN_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(ARRAY_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(CHECKED_UNKNOWN_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(JSTypeNative.UNKNOWN_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(UNKNOWN_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  setJSType(getNativeType(STRING_TYPE)).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  equals(getNativeType(CHECKED_UNKNOWN_TYPE)).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getGreatestSubtype(getNativeType(assertedType)).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  equals(getNativeType(UNKNOWN_TYPE)).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  setJSType(getNativeType(CHECKED_UNKNOWN_TYPE)).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(BOOLEAN_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(JSTypeNative typeId).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(typeId).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(CHECKED_UNKNOWN_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  equals(getNativeType(UNKNOWN_TYPE)).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  setJSType(getNativeType(UNKNOWN_TYPE)).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(UNKNOWN_TYPE).getGreatestSubtype(propType);"}]}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},

# continue with more variants...
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(STRING_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = propType.getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = propType.getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NULL_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(NULL_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(STRING_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(BOOLEAN_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NULL_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(NULL_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NULL_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NULL_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(BOOLEAN_TYPE).getGreatestSubtype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeIn[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "              getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "              getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"}]}
]```python
[
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getGreatestSubtype(STRING_TYPE);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NULL_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129, 1130], "modifications": []}
]
```[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(UNKNOWN_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []}
]```json
[
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [{"line_number": 1129, "new_lines": ["// Inserted line for mutation"]}],"deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [{"line_number": 1130, "new_lines": ["// Inserted line for mutation"]}],"deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [{"line_number": 1131, "new_lines": ["// Inserted line for mutation"]}],"deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [{"line_number": 1132, "new_lines": ["// Inserted line for mutation"]}],"deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [{"line_number": 1133, "new_lines": ["// Inserted line for mutation"]}],"deletions": [], "modifications": []}
]
```[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  null;"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(null);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            null;"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            null;"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, null, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, typeToInfer);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1132], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1133], "modifications": []}
][
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(UNKNOWN_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(ARRAY_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(CHECKED_UNKNOWN_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(typeId).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(assertedType).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getGreatestSubtype(getNativeType(assertedType)).getLeastSupertype(propType);"}]}
]```python
[
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(BOOLEAN_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getGreatestSubtype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(VOID_TYPE).getGreatestSubtype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "typeToInfer = getNativeType(NUMBER_TYPE).getLeastSupertype(propType);"}]}
]
```  Here are 30 mutants of the target buggy lines for you:

1.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "                  null;"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

2.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = "], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

3.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "                  null;"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

4.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = "], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

5.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "                  null;"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

6.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = "], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

7.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  null;"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

8.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = "], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

9.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  null;"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
```

10.
```json
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = "], ["1130", "                  getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1131", "            }"]], "insertions": [], "deletions": [], "modifications": []}]
``````python
[
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1129], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1132], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(STRING_TYPE).getLeastSupertype(propType);"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1133], "modifications": []}
]
```