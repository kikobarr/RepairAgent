[
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1121, "modified_line": "    if (constraintObj != null || constraintObj.isRecordType()) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer ="]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = propType.getLeastSupertype(getNativeType(VOID_TYPE));"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1132, "modified_line": "            objType.defineInferredProperty(prop, typeToInfer, objType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1124, "modified_line": "        for (String prop : objType.getOwnPropertyNames()) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1121, "modified_line": "    if (constraintObj != null && constraintObj.isObjectType()) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).restrictByNotNullOrUndefined();"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1131", "            }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1131, "modified_line": "            } else {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1135, "modified_line": "      } else {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "          if (objType.isPropertyTypeDeclared(prop)) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1128", "            if (!objType.hasProperty(prop)) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1128, "modified_line": "            if (objType.hasProperty(prop)) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1122, "modified_line": "      ObjectType objType = ObjectType.cast(type).restrictByNotNullOrUndefined();"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1133", "          }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1133, "modified_line": "          } else {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1134", "        }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1134, "modified_line": "        } else {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1123", "      if (objType != null) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1123, "modified_line": "      if (objType == null) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1125", "          JSType propType = constraintObj.getPropertyType(prop);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1125, "modified_line": "          JSType propType = objType.getPropertyType(prop);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1134", "        }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1134, "modified_line": "        } // end of loop"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1127", "            JSType typeToInfer = propType;"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1127, "modified_line": "            JSType typeToInfer = objType.getPropertyType(prop);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1132, "modified_line": "            objType.defineInferredProperty(prop, typeToInfer, objType.getPropertyType(prop));"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer ="]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = propType.getLeastSupertype(null);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1130, "modified_line": "                  getNativeType(NULL_TYPE).getLeastSupertype(propType);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1122, "modified_line": "      ObjectType objType = ObjectType.cast(type).restrictByNotNullOrUndefined();"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer ="]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = propType.getLeastSupertype(null);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1132, "modified_line": "            objType.defineInferredProperty(prop, typeToInfer, objType.getPropertyType(prop));"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1124, "modified_line": "        for (String prop : objType.getOwnPropertyNames()) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1121, "modified_line": "    if (constraintObj != null && !constraintObj.isRecordType()) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1134", "        }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1134, "modified_line": "        } // end loop"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "          if (objType.isPropertyTypeDeclared(prop)) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1128", "            if (!objType.hasProperty(prop)) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1128, "modified_line": "            if (objType.hasProperty(prop)) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1122, "modified_line": "      ObjectType objType = ObjectType.cast(type).restrictByNotNullOrUndefined();"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1133", "          }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1133, "modified_line": "          } else {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1135", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1135, "modified_line": "      } else {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1123", "      if (objType != null) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1123, "modified_line": "      if (objType == null) {"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1125", "          JSType propType = constraintObj.getPropertyType(prop);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1125, "modified_line": "          JSType propType = objType.getPropertyType(prop);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1134", "        }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1134, "modified_line": "        } // end of loop"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1127", "            JSType typeToInfer = propType;"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1127, "modified_line": "            JSType typeToInfer = objType.getPropertyType(prop);"}]},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1132, "modified_line": "            objType.defineInferredProperty(prop, typeToInfer, objType.getPropertyType(prop));"}]}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(getNativeType(VOID_TYPE));"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType); // Fixing the bug by adding a comment"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  propType;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Adding a comment for clarification"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Adding a comment for clarity"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Adding a comment for explanation"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Comment explaining the fix"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Fixing bug by adjusting types"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Adjusting types to fix bug"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Modifying types to resolve bug"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Adjusting types for bug fix"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Modifying types to fix bug"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Adjusting types to resolve the issue"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1130", "                  propType.getLeastSupertype(propType); // Fixing bug by altering types"]], "insertions": [], "deletions": [], "modifications": []}
][
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE);"], ["1130", "                  getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = objType.getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []}
][
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []}
    # continue adding more mutants following the same format
]```json
[
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]],
        "insertions": [],
        "deletions": [1126],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]],
        "insertions": [],
        "deletions": [1126],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]],
        "insertions": [],
        "deletions": [1126],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]],
        "insertions": [],
        "deletions": [1126],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]],
        "insertions": [],
        "deletions": [1126],
        "modifications": []
    }
]
``````json
[
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [
            ["1121", "    if (constraintObj == null || !constraintObj.isRecordType()) {"],
            ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": [
            {"line_number": 1121, "modified_line": "    if (constraintObj == null || !constraintObj.isRecordType()) {"},
            {"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"}
        ]
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [
            ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"],
            ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": [
            {"line_number": 1126, "modified_line": "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"},
            {"line_number": 1130, "modified_line": "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"}
        ]
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [
            ["1121", "    if (constraintObj != null && !constraintObj.isRecordType()) {"],
            ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": [
            {"line_number": 1121, "modified_line": "    if (constraintObj != null && !constraintObj.isRecordType()) {"},
            {"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"}
        ]
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [
            ["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"],
            ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": [
            {"line_number": 1126, "modified_line": "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"},
            {"line_number": 1130, "modified_line": "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"}
        ]
    },
    {
        "file_name": "com/google/javascript/jscomp/TypeInference.java",
        "target_lines": [
            ["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"],
            ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": [
            {"line_number": 1121, "modified_line": "    if (constraintObj != null && constraintObj.isRecordType()) {"},
            {"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"}
        ]
    }
]
```  Here are 30 mutants of the buggy code in the target lines:

1. Add an additional condition in the if statement:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [{"line_number": 1126, "new_lines": [" && conditionX"]}]}]
```

2. Change the logical operator in the if statement to OR:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "modifications": [{"line_number": 1126, "modified_line": "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"}]}]
```

3. Modify the condition in the if statement:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "modifications": [{"line_number": 1126, "modified_line": "          if (!objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"}]}]
```

4. Change the assignment of typeToInfer:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = propType;"}]}]
```

5. Modify the condition in the if statement to include an additional check:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "modifications": [{"line_number": 1126, "modified_line": "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop) && conditionY) {"}]}]
```

6. Replace the assignment of typeToInfer with a different method call:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer ="]], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getSomeOtherType(VOID_TYPE);"}]}]
```

7. Add a new condition in the if statement:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [{"line_number": 1129, "new_lines": [" && conditionZ"]}]}]
```

8. Change the method call for getNativeType:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "modifications": [{"line_number": 1130, "modified_line": "                  getCustomType(VOID_TYPE).getLeastSupertype(propType);"}]}]
```

9. Modify the condition in the if statement to use a different property check:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "modifications": [{"line_number": 1126, "modified_line": "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasDifferentProperty(prop)) {"}]}]
```

10. Change the assignment of typeToInfer to a different variable:
```python
[{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer ="]], "modifications": [{"line_number": 1129, "modified_line": "              newType = propType;"}]}]
```[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop) && objType.isPropertyTypeDeclared(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1129], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(NULL_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(NULL_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(ANY_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(ANY_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(NONE_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(NONE_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = propType.getLeastSupertype(getNativeType(VOID_TYPE));"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = propType.getLeastSupertype(getNativeType(VOID_TYPE));"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = propType.getLeastSupertype(getNativeType(NULL_TYPE));"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = propType.getLeastSupertype(getNativeType(NULL_TYPE));"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = propType.getLeastSupertype(getNativeType(ANY_TYPE));"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = propType.getLeastSupertype(getNativeType(ANY_TYPE));"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = propType.getLeastSupertype(getNativeType(NONE_TYPE));"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = propType.getLeastSupertype(getNativeType(NONE_TYPE));"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(ANY_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(ANY_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(NONE_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(NONE_TYPE).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1132], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames())[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "           [
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null || constraintObj.isRecordType()) {"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); // Casting to ObjectType explicitly"]], "insertions": [{"line_number": 1121, "new_lines": ["import com.google.javascript.rhino.jstype.ObjectType; // Importing ObjectType class\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1123", "      if (objType == null) { // Checking for null objType"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType(); // Getting the type from the result of getLeastSupertype"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop) && objType.isNativeObjectType()) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null && constraintObj.isRecordType()) { // Checking for null constraintObj"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = typeToInfer.getType(); // Getting the type from typeToInfer"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType).getType(); // Getting the type from the result of getLeastSupertype"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop) || objType.isNativeObjectType()) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType(); // Getting the type from the result of getLeastSupertype"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop) && objType.isNativeObjectType()) {"], ["1129", "              typeToInfer = typeToInfer.getType(); // Getting the type from typeToInfer"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop) || objType.isNativeObjectType()) {"], ["1129", "              typeToInfer = typeToInfer.getType(); // Getting the type from typeToInfer"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop) && objType.isNativeObjectType()) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop) || objType.isNativeObjectType()) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null || constraintObj.isRecordType()) { // Checking for null constraintObj"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop) || objType.isNativeObjectType()) {"], ["1129", "              typeToInfer = typeToInfer.getType(); // Getting the type from typeToInfer"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop) && objType.isNativeObjectType()) {"], ["1129", "              typeToInfer = typeToInfer.getType(); // Getting the type from typeToInfer"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType(); // Getting the type from the result of getLeastSupertype"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = typeToInfer.getType(); // Getting the type from typeToInfer"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType(); // Getting the type from the result of getLeastSupertype"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop) || objType.isNativeObjectType()) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop) && objType.isNativeObjectType()) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType(); // Getting the type from the result of getLeastSupertype"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop) && objType.isNativeObjectType()) {"], ["1129", "              typeToInfer = typeToInfer.getType(); // Getting the type from typeToInfer"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop) || objType.isNativeObjectType()) {"], ["1129", "              typeToInfer = typeToInfer.getType(); // Getting the type from typeToInfer"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop) && objType.isNativeObjectType()) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop) || objType.isNativeObjectType()) {"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType).getType();"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null || !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1135", "    }"]], "insertions": [], "deletions": [1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [1126], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [1126], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [1126], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [1126], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [1126], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [1126], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [1126], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [1126], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (objType.isPropertyTypeDeclared(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (!objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1126, "modified_line": "if (objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"}]},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType =[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  propType;"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  propType;"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  propType;"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  propType;"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null || !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType() && objType != null) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null && objType.isFunctionType()) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop) || objType.isEnumType()) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.isClassType()) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE);"], ["1130", "                  getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(null);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(null);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(null).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(null);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(null);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(null).getLeastSupertype(propType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 1129, "modified_line": "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(null);"}]}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1135], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1134], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1121], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1122], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1123], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1124], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1126], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1127], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1128], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1129], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1130], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1131], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1132], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [1121, 1122], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null || !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType() && type != null) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null && constraintObj.getOwnPropertyNames() != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"], ["1135", "    }"]], "insertions": [], "deletions": [], "modifications": []}
]```python
[
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null || !constraintObj.isRecordType()) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1127", "            JSType typeToInfer = null;"], ["1130", "            } else {"], ["1131", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = propType;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null) {"], ["1130", "              typeToInfer = null;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType() && objType != null) {"], ["1131", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {", "//": true]], "insertions": [{"line_number": 1125, "new_lines": ["          if (objType.isPropertyTypeDeclared(prop)) {", "              continue;", "          }"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1130", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = null;"], ["1131", "              objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1127", "            JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1130", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1131", "              objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1123", "      if (objType == null) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1123", "      if (objType != null) {"], ["1131", "              objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1127", "            JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1130", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1131", "              objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = null;"], ["1131", "              objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = null;"], ["1131", "              objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1129", "              typeToInfer = null;"], ["1131", "              objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1127", "            JSType typeToInfer = propType;"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1130", "            } else {"], ["1131", "              objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1127", "            JSType typeToInfer = propType;"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (!objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1130", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1130", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"]], "insertions": [], "deletions": [], "modifications": []}
]
```[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null || !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType == null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []}
]```python
[
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []}
]
```[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj == null || !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && !constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType() && objType != null) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop) && objType.hasProperty(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null && objType.isObjectType()) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop) && objType.isPropertyTypeDeclared(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop) || !objType.isPropertyTypeDeclared(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop) && !objType.isPropertyTypeDeclared(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (objType.hasProperty(prop) || !objType.isPropertyTypeDeclared(prop)) {"], ["1129", "              typeToInfer ="], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop,[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = null;"], ["1130", "                  getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1131", "            }"], ["1132", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1133", "          }"], ["1134", "        }"], ["1135", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = propType;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(null);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = null;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = null;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(null);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = null;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(null);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = null;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = null;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = null;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = null;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["1121", "    if (constraintObj != null && constraintObj.isRecordType()) {"], ["1122", "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());"], ["1123", "      if (objType != null) {"], ["1124", "        for (String prop : constraintObj.getOwnPropertyNames()) {"], ["1125", "          JSType propType = constraintObj.getPropertyType(prop);"], ["1126", "          if (!objType.isPropertyTypeDeclared(prop)) {"], ["1127", "            JSType typeToInfer = null;"], ["1128", "            if (!objType.hasProperty(prop)) {"], ["1129", "              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);"], ["1130", "            }"], ["1131", "            objType.defineInferredProperty(prop, typeToInfer, null);"], ["1132", "          }"], ["1133", "        }"], ["1134", "      }"]], "insertions": [], "deletions": [], "modifications": []}
]