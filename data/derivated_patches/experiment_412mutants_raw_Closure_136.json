[
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.STRING) {"], ["108", "      String functionName = node.getName();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName + \"()\");"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalArgumentException("], ["115", "              \"Function is not defined\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.METHOD) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Adding a new line to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Adding another new line for the fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = !signatureAdded;"], ["106", "      signatureAdded = signatureAdded && true;"], ["107", "    } else if (node.getType() == Token.OBJECTLIT) {"], ["108", "      String functionName = node.getName();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalArgumentException("], ["115", "              \"Function is not defined\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserting a line to address the bug"]}, {"line_number": 204, "new_lines": ["    // Another line inserted for the fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = !signatureAdded;"], ["106", "      signatureAdded = signatureAdded || false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getName();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalArgumentException("], ["115", "              \"Function is not defined\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.METHOD) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Line added to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Another line for the fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.STRING) {"], ["108", "      String functionName = node.getName();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName + \"Test\");"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          continue;"], ["113", "        } else {"], ["114", "          throw new IllegalArgumentException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          addSignature(name, node, t.getSourceName());"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [106, 122], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [115], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Variable not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [115], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getFirstChild();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 118, "modified_line": "      Node function = v.getInitialValue();"}]},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded && v != null) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 125, "modified_line": "    if (!signatureAdded && v != null) {"}]},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [125], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded && v != null) {"]], "insertions": [], "deletions": [125], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded || v == null) {"]], "insertions": [], "deletions": [125], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded || v == null) {"]], "insertions": [], "deletions": [125], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded && v != null) {"]], "insertions": [], "deletions": [125], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"Function not found: \" + functionName);"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded || v == null) {"]], "insertions": [], "deletions": [125], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"]], "insertions": [], "deletions": [106], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = \"newFunctionName\";"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = null;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v != null) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (!compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          throw new IllegalStateException(\"Error in compiler mode\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "        return;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "          throw new IllegalStateException(\"Compiler error: undefined function\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "              \"VarCheck should have caught this undefined function\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        } else if (compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      } else {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      Node function = new Node();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "      if (function == null && function.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["120", "          addSignature(name, function, v.getInputName());"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        signatureAdded = false;"]], "insertions": [], "deletions": [122], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "        signatureAdded = true;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "      if (signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    } else {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": []}
][
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"]], "insertions": [{"line_number": 102, "new_lines": ["    List<String> possibleSignatures = new ArrayList<>();"]}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = true;"]], "modifications": [{"line_number": 106, "modified_line": "      signatureAdded = false;"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.NAME) {"]], "modifications": [{"line_number": 107, "modified_line": "    } else if (node.getType() == Token.FUNCTION) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = node.getString();"]], "modifications": [{"line_number": 108, "modified_line": "      String functionName = \"exampleFunctionName\";"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = t.getScope().getVar(functionName);"]], "modifications": [{"line_number": 109, "modified_line": "      Scope.Var v = new Scope.Var();"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v == null) {"]], "modifications": [{"line_number": 110, "modified_line": "      if (v != null) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (compiler.isIdeMode()) {"]], "modifications": [{"line_number": 111, "modified_line": "        if (!compiler.isIdeMode()) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          return;"]], "deletions": [112]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "        } else {"]], "modifications": [{"line_number": 113, "modified_line": "        } else if (condition) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"]], "modifications": [{"line_number": 114, "modified_line": "          throw new CustomException("}, {"line_number": 115, "modified_line": "              \"Custom error message\");"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        }"]], "deletions": [116]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      }"]], "deletions": [117]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      Node function = v.getInitialValue();"]], "modifications": [{"line_number": 118, "modified_line": "      Node function = new Node();"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"]], "modifications": [{"line_number": 119, "modified_line": "      if (function != null ||"}, {"line_number": 120, "modified_line": "          function.getType() == Token.NAME) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        addSignature(name, function, v.getInputName());"]], "modifications": [{"line_number": 121, "modified_line": "// addSignature(name, function, v.getInputName());"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "        signatureAdded = true;"]], "deletions": [122]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "      }"]], "deletions": [123],
    {"file_name": "com/google/javascript/jscomp/RenameVars.java", "target_lines": [["203", "//"], ["204", "//"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fixing bug at 203"]}, {"line_number": 204, "new_lines": ["    // Inserted line for fixing bug at 204"]}]
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"]], "insertions": [{"line_number": 103, "new_lines": ["List<String> possibleSignatures = new ArrayList<>();"]}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = true;"]], "modifications": [{"line_number": 106, "modified_line": "      signatureAdded = false;"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.NAME) {"]], "modifications": [{"line_number": 107, "modified_line": "    } else if (node.getType() == Token.FUNCTION) {"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = node.getString();"]], "modifications": [{"line_number": 108, "modified_line": "      String functionName = \"customFunctionName\";"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = t.getScope().getVar(functionName);"]], "modifications": [{"line_number": 109, "modified_line": "      Scope.Var v = new Scope.Var();"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v == null) {"]], "modifications": [{"line_number": 110, "modified_line": "      if (v != null) {"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (compiler.isIdeMode()) {"]], "deletions": [111]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          return;"]], "deletions": [112]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "        } else {"]], "deletions": [113]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "          throw new IllegalStateException("]], "modifications": [{"line_number": 114, "modified_line": "          throw new CustomException("}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "              \"VarCheck should have caught this undefined function\");"]], "modifications": [{"line_number": 115, "modified_line": "              \"Custom error message\");"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        }"]], "deletions": [116]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      }"]], "deletions": [117]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      Node function = v.getInitialValue();"]], "modifications": [{"line_number": 118, "modified_line": "      Node function = new Node();"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"]], "modifications": [{"line_number": 119, "modified_line": "      if (function == null ||"}, {"line_number": 120, "modified_line": "          function.getType() == Token.NAME) {"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        addSignature(name, function, v.getInputName());"]], "insertions": [{"line_number": 121, "new_lines": ["// Adding signature for function"]}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "        signatureAdded = true;"]], "modifications": [{"line_number": 122, "modified_line": "        signatureAdded = false;"}]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "      }"]], "deletions": [123]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    }"]], "deletions": [124]}
,
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 125, "new_lines": ["throw new IllegalStateException(\"Signature was not added!\");"]}]}
,
{"file_name": "com/google/javascript/jscomp/RenameVars.java", "target_lines": [["203", " "]], "insertions": [{"line_number": 203, "new_lines": ["// Fix for the bug in testDollarSignSuperExport2"]}]}
,
{"file_name": "com/google/javascript/jscomp/RenameVars.java", "target_lines": [["204", " "]], "insertions": [{"line_number": 204, "new_lines": ["// Additional fix for the bug in testDollarSignSuperExport2"]}]}
][
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["// Inserted to fix the bug", "anotherLineOfCode();"]}, {"line_number": 204, "new_lines": ["// Inserted to fix the bug", "additionalLineOfCode();"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should not have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line for fix"]} , {"line_number": 204, "new_lines": ["    // Inserted line for fix"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have not caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120[
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = node.getString();"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = t.getScope().getVar(functionName);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v != null) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (!compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          throw new IllegalStateException("]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "              \"VarCheck should not have caught this undefined function\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "        } else {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "      if (v == null) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "              \"VarCheck should have caught this undefined variable");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      Node function = v.getInitialValue();"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      if (function == null &&"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "          function.getType() == Token.FUNCTION) {"], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["120", "        addSignature(name, function, v.getInputName());"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "    }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    if (signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    }"]], "insertions": [], "deletions": [], "modifications": []}
][
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"]], "insertions": [], "deletions": [102], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [107], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = \"newFunctionName\";"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = null;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v != null) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (!compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          throw new IllegalStateException(\"Function not found\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "        } else {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "          return;"]], "insertions": [], "deletions": [114], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "              // VarCheck should have caught this undefined function"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      Node function = new Node(Token.FUNCTION);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "      if (function == null && function.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [119], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["120", "        addSignature(name, function, v.getInputName());"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        signatureAdded = false;"]], "insertions": [], "deletions": [121], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "        // signatureAdded = true;"]], "insertions": [], "deletions": [122], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [125], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/RenameVars.java", "target_lines": [["203", "//"], ["204", "//"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function == null ||"], ["120", "          function.getType() != Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102, 106], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = !signatureAdded;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = !signatureAdded;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [106], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = !signatureAdded;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function == null ||"], ["120", "          function.getType() != Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [106], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = !signatureAdded;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function == null ||"], ["120", "          function.getType() != Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [106], "modifications": []}
][
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = node.getString();"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = t.getScope().getVar(functionName);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v != null) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (!compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          throw new IllegalStateException("]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "              \"VarCheck should have caught this undefined function\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "        } else {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "          return;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      Node function = v.getInitialValue();"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "      if (function != null && function.getType() != Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["120", "        addSignature(name, function, v.getInputName());"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "    }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    if (signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": []}
][
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new_lines": ["    // Handle the case when signature is not added"]} ], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.FUNCTION) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]}, {"line_number": 204, "new[
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = !signatureAdded;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = signatureAdded ? false : true;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = !signatureAdded;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = !signatureAdded;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line 1 to fix the bug", "    // Inserted line 2 to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["[
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"]], "insertions": [], "deletions": [102], "modifications": [{"line_number": 102, "modified_line": "    boolean signatureAdded = true;"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = true;"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 106, "modified_line": "      signatureAdded = false;"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.NAME)"]], "insertions": [], "deletions": [107], "modifications": [{"line_number": 107, "modified_line": "    if (node.getType() == Token.NAME) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = node.getString();"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 108, "modified_line": "      String functionName = \"someFunctionName\";"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = t.getScope().getVar(functionName);"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 109, "modified_line": "      Scope.Var v = new Scope.Var();"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v == null)"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 110, "modified_line": "      if (v != null)"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (compiler.isIdeMode())"]], "insertions": [], "deletions": [111], "modifications": [{"line_number": 111, "modified_line": "        if (!compiler.isIdeMode())"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          return;"]], "insertions": [], "deletions": [112], "modifications": [{"line_number": 112, "modified_line": "          throw new IllegalStateException(\"Compiler is not in IdeMode\");"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "        } else {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 113, "modified_line": "        } else if (node.getType() == Token.FUNCTION) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "          throw new IllegalStateException("]], "insertions": [], "deletions": [], "modifications": [{"line_number": 114, "modified_line": "          throw new IllegalStateException(\"Function is not defined\");"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "              \"VarCheck should have caught this undefined function\");"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 115, "modified_line": "              \"Function is not found in scope\");"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        }"]], "insertions": [], "deletions": [116], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      Node function = v.getInitialValue();"]], "insertions": [], "deletions": [118], "modifications": [{"line_number": 118, "modified_line": "      Node function = new Node();"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "      if (function != null &&"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 119, "modified_line": "      if (function == null &&"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["120", "          function.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [120], "modifications": [{"line_number": 120, "modified_line": "          function.getType() == Token.NAME) {"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        addSignature(name, function, v.getInputName());"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 121, "modified_line": "        addSignature(\"newName\", function, v.getInputName());"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "        signatureAdded = true;"]], "insertions": [], "deletions": [122], "modifications": [{"line_number": 122, "modified_line": "        signatureAdded = false;"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "      }"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    }"]], "insertions": [], "deletions": [124], "modifications": [{"line_number": 124, "modified_line": "    throw new IllegalStateException(\"Signature was not added\");"}]},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 125, "modified_line": "    if (signatureAdded) {"}]},
    {"file_name": "com/google/javascript/jscomp/RenameVars.java", "target_lines": [["203", "//"]], "insertions": [{"line_number": 203, "new_lines": ["// Inserted line to fix the bug"]} ], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/RenameVars.java", "target_lines": [["204", "//"]], "insertions": [{"line_number": 204, "new_lines": ["// Inserted line to fix the bug"]} ], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [102], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    List<String> possibleSignatures = new ArrayList<>();"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": [{"line_number": 106, "modified_line": "      signatureAdded = false;"}]},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [106], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [107], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [108], "modifications": []},

{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [109], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = null;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = null;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v != null) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (!compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          throw new IllegalStateException();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "        } else {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "          if (functionName == null) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "              \"VarCheck caught this undefined function\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        assert(functionName != null);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      } else {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      Node function = new Node(Token.FUNCTION);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "      if (function != null && function.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["120", "        addSignature(null, null, null);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "        nonMethodProperties.add(name);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "      } else {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    } else {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    List<String> possibleSignatures = new ArrayList<>();"]}, {"line_number": 204, "new_lines": ["    signatureAdded = true;"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    List<String> possibleSignatures = new ArrayList<>();"]}, {"line_number": 204, "new_lines": ["    signatureAdded = true;"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    List<String> possibleSignatures = new ArrayList<>();"]}, {"line_number": 204, "new_lines": ["    signatureAdded = true;"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    List<String> possibleSignatures = new ArrayList<>();"]}, {"line_number": 204, "new_lines": ["    signatureAdded = true;"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    List<String> possibleSignatures = new ArrayList<>();"]}, {"line_number": 204, "new_lines": ["    signatureAdded = true;"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    List<String> possibleSignatures = new ArrayList<>();"]}, {"line_number": 204, "new_lines": ["    signatureAdded = true;"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          //return;"], ["113", "        } else {"], ["114", "          //throw new IllegalStateException("], ["115", "              //\"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() != Token.FUNCTION) {"], ["121", "        //addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {return;} else {throw new IllegalStateException(\"VarCheck should have caught this undefined function\");}"], ["112", "          // return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {return;} else {throw new IllegalStateException(\"VarCheck should have caught this undefined function\");}"], ["112", "          // return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {return;} else {throw new IllegalStateException(\"VarCheck should have caught this undefined function\");}"], ["112", "          // return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {return;} else {throw new IllegalStateException(\"VarCheck should have caught this undefined function\");}"], ["112", "          // return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [102], "modifications": [{"line_number": 102, "modified_line": "    List<String> possibleSignatures = new ArrayList<>();"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [106], "modifications": [{"line_number": 106, "modified_line": "      signatureAdded = true;"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [107], "modifications": [{"line_number": 107, "modified_line": "    } else if (node.getType() == Token.FUNCTION) {"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [108], "modifications": [{"line_number": 108, "modified_line": "      String functionName = node.getType();"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [109], "modifications": [{"line_number": 109, "modified_line": "      Scope.Var v = t.getScope().getVar(functionName);"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [110], "modifications": [{"line_number": 110, "modified_line": "      if (v != null) {"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [111], "modifications": [{"line_number": 111, "modified_line": "      if (!compiler.isIdeMode()) {"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [112], "modifications": [{"line_number": 112, "modified_line": "        return;"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [113], "modifications": [{"line_number": 113, "modified_line": "        throw new IllegalStateException("}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [114], "modifications": [{"line_number": 114, "modified_line": "              \"VarCheck should have caught this undefined function\")"}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [115], "modifications": [{"line_number": 115, "modified_line": "              \"VarCheck should have caught this undefined function\""}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [116], "modifications": [{"line_number": 116, "modified_line": "        throw new IllegalStateException("}]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [], "deletions": [117], "modifications": [{"line_number": 117, "modified_line": "      }"]},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108[{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    List<String> possibleSignatures = new ArrayList<>();"]}, {"line_number": 204, "new_lines": ["    // Adding a new line here to fix the bug"]}]}][
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"]], "insertions": [], "deletions": [102], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = node.getString();"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = t.getScope().getVar(functionName);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v != null) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (!compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          return;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "        } else if (compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "          throw new IllegalStateException("]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "              \"VarCheck should not have caught this undefined function\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        } else {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      if (v == null) {"]], "insertions": [], "deletions": [117], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      Node function = v.getInitialValue();"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "      if (function != null && function.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["120", "        addSignature(name, function, v.getInputName());"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "        signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "        if (!signatureAdded) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "      } else if (node.getType() == Token.NAME) {"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    boolean signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    if (v != null) {"]], "insertions": [], "deletions": [125], "modifications": []}
][
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["102", "    boolean signatureAdded = true;"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["106", "      signatureAdded = false;"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["124", "    signatureAdded = false;"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["106", "      signatureAdded = !signatureAdded;"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["117", "      throw new IllegalStateException(\"VarCheck should have caught this undefined function\");"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["119", "      if (function == null || function.getType() != Token.FUNCTION) {"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["122", "        signatureAdded = false;"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["124", "    if (signatureAdded) {"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["108", "      String functionName = \"someFunctionName\";"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]

[
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["111", "        return;"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
][
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Fixing the bug by adding a comment here"]}, {"line_number": 204, "new_lines": ["    // Fixing the bug by adding a comment here"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Fixing the bug by adding a comment here"]}, {"line_number": 204, "new_lines": ["    // Fixing the bug by adding a comment here"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Fixing the bug by adding a comment here"]}, {"line_number": 204, "new_lines": ["    // Fixing the bug by adding a comment here"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Fixing the bug by adding a comment here"]}, {"line_number": 204, "new_lines": ["    // Fixing the bug by adding a comment here"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Fixing the bug by adding a comment here"]}, {"line_number": 204, "new_lines": ["    // Fixing the bug by adding a comment here"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"], ["106", "      signatureAdded = false;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v != null) {"], ["111", "        if (!compiler.isIdeMode()) {"], ["112", "          throw new IllegalStateException("], ["113", "          return;"], ["114", "        } else {"], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = false;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line to fix the bug"]}], "deletions": [102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = !signatureAdded;"], ["106", "      signatureAdded = !signatureAdded;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = !signatureAdded;"], ["123", "      }"], ["124", "    }"], ["125", "    if (!signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line to fix the bug"]}], "deletions": [], "modifications": []}, 
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = false;"], ["106", "      signatureAdded = true;"], ["107", "    } else if (node.getType() == Token.NAME) {"], ["108", "      String functionName = node.getString();"], ["109", "      Scope.Var v = t.getScope().getVar(functionName);"], ["110", "      if (v == null) {"], ["111", "        if (compiler.isIdeMode()) {"], ["112", "          return;"], ["113", "        } else {"], ["114", "          throw new IllegalStateException("], ["115", "              \"VarCheck should have caught this undefined function\");"], ["116", "        }"], ["117", "      }"], ["118", "      Node function = v.getInitialValue();"], ["119", "      if (function != null &&"], ["120", "          function.getType() == Token.FUNCTION) {"], ["121", "        addSignature(name, function, v.getInputName());"], ["122", "        signatureAdded = true;"], ["123", "      }"], ["124", "    }"], ["125", "    if (signatureAdded) {"]], "insertions": [{"line_number": 203, "new_lines": ["    // Inserted line to fix the bug"]}, {"line_number": 204, "new_lines": ["    // Inserted line to fix the bug"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["102", "    boolean signatureAdded = true;"]], "insertions": [], "deletions": [102], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["106", "      signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["107", "    } else if (node.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["108", "      String functionName = node.getString();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["109", "      Scope.Var v = t.getScope().getVar(functionName);"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["110", "      if (v != null) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["111", "        if (!compiler.isIdeMode()) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["112", "          throw new IllegalStateException("]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["113", "              \"VarCheck should have caught this undefined function\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["114", "        } else {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["115", "      if (function == null) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["116", "        return;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["117", "      Node function = v.getInitialValue();"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["118", "      if (function != null && function.getType() == Token.FUNCTION) {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["119", "        addSignature(name, function, v.getInputName());"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["120", "        signatureAdded = false;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["121", "      } else {"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["122", "        signatureAdded = !signatureAdded;"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["123", "    }"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["124", "    if (signatureAdded) {"]], "insertions": [], "deletions": [124], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MethodCompilerPass.java", "target_lines": [["125", "    if (signatureAdded) {"]], "insertions": [], "deletions": [125], "modifications": []}
][
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["102", "    boolean signatureAdded = true; // Mutated boolean initialization"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["106", "      signatureAdded = false; // Mutated signatureAdded value"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["108", "      String functionName = t.getScope().getVar(functionName).toString(); // Mutated function name retrieval"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["118", "      Node function = v.getInitialValue(); // Mutated method call to get initial value"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["120", "          if (function != null && function.getType() == Token.FUNCTION && v.getInputName() != null) { // Mutated condition check for function type and input name"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["122", "        signatureAdded = false; // Reset signatureAdded flag after adding signature"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["124", "    signatureAdded = false; // Reset signatureAdded flag at the end of the method"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["125", "    if (signatureAdded) { // Check signatureAdded flag for conditional logic"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MethodCompilerPass.java",
        "target_lines": [
            ["106", "      signatureAdded = !signatureAdded; // Toggle signatureAdded value"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
]