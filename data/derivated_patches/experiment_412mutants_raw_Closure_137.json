[{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 48, "new_lines": ["// Inserted fix for line 48 to resolve issue"]}, {"line_number": 240, "new_lines": ["// Inserted fix for line 240 to resolve issue"]}, {"line_number": 242, "new_lines": ["// Inserted fix for line 242 to resolve issue"]}, {"line_number": 273, "new_lines": ["// Inserted fix for line 273 to resolve issue"]}, {"line_number": 304, "new_lines": ["// Inserted fix for line 304 to resolve issue"]}, {"line_number": 317, "new_lines": ["// Inserted fix for line 317 to resolve issue"]}, {"line_number": 333, "new_lines": ["// Inserted fix for line 333 to resolve issue"]}, {"line_number": 336, "new_lines": ["// Inserted fix for line 336 to resolve issue"]}, {"line_number": 338, "new_lines": ["// Inserted fix for line 338 to resolve issue"]}, {"line_number": 340, "new_lines": ["// Inserted fix for line 340 to resolve issue"]}, {"line_number": 341, "new_lines": ["// Inserted fix for line 341 to resolve issue"]}, {"line_number": 345, "new_lines": ["// Inserted fix for line 345 to resolve issue"]}, {"line_number": 391, "new_lines": ["// Inserted fix for line 391 to resolve issue"]}, {"line_number": 400, "new_lines": ["// Inserted fix for line 400 to resolve issue"]}, {"line_number": 461, "new_lines": ["// Inserted fix for line 461 to resolve issue"]}],"deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401, 82], "modifications": []}][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 240, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 242, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 273, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 304, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 317, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 333, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 336, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 338, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 340, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]},
            {"line_number": 341, "new_lines": ["// Inserted new line to potentially fix the bug related to ContextualRenameInverter method", "// Additional logic for variable renaming and scope handling may be needed here"]}
        ],
        "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401],
        "modifications": []
    }
]