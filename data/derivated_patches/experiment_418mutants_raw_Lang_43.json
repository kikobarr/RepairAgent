[
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines":["return appendTo == null ? null : appendTo.append(QUOTE);", "appendTo.append(QUOTE);"]}, {"line_number": 423, "new_lines":["return appendTo == null ? null : appendTo.append(QUOTE);"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}], "deletions": []}
][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], 
"insertions": [
{"line_number": 422, "new_lines": ["if (appendTo != null) {"]},
{"line_number": 422, "new_lines": ["    if (escapingOn && c[start] == QUOTE) {"]},
{"line_number": 422, "new_lines": ["        return appendTo.append(QUOTE);"]},
{"line_number": 422, "new_lines": ["    }"]},
{"line_number": 422, "new_lines": ["    int lastHold = start;"]},
{"line_number": 422, "new_lines": ["    for (int i = pos.getIndex(); i < pattern.length(); i++) {"]},
{"line_number": 422, "new_lines": ["        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {"]},
{"line_number": 422, "new_lines": ["            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);"]},
{"line_number": 422, "new_lines": ["            pos.setIndex(i + ESCAPED_QUOTE.length());"]},
{"line_number": 422, "new_lines": ["            lastHold = pos.getIndex();"]},
{"line_number": 422, "new_lines": ["            continue;"]},
{"line_number": 422, "new_lines": ["        }"]},
{"line_number": 422, "new_lines": ["        switch (c[pos.getIndex()]) {"]},
{"line_number": 422, "new_lines": ["            case QUOTE:"]},
{"line_number": 422, "new_lines": ["                next(pos);"]},
{"line_number": 422, "new_lines": ["                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);"]},
{"line_number": 422, "new_lines": ["            default:"]},
{"line_number": 422, "new_lines": ["                next(pos);"]},
{"line_number": 422, "new_lines": ["        }"]},
{"line_number": 422, "new_lines": ["    }"]}
], 
"deletions": [], 
"modifications": []
},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], 
"insertions": [
{"line_number": 422, "new_lines": ["return appendQuotedString(pattern, pos, appendTo, escapingOn);"]}
],
"deletions": [], 
"modifications": []
},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], 
"insertions": [
{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {"]},
{"line_number": 422, "new_lines": ["    int start = pos.getIndex();"]},
{"line_number": 422, "new_lines": ["    char[] c = pattern.toCharArray();"]},
{"line_number": 422, "new_lines": ["    if (escapingOn && c[start] == QUOTE) {"]},
{"line_number": 422, "new_lines": ["        return appendTo == null ? null : appendTo.append(QUOTE);"]},
{"line_number": 422, "new_lines": ["    }"]},
{"line_number": 422, "new_lines": ["    int lastHold = start;"]},
{"line_number": 422, "new_lines": ["    for (int i = pos.getIndex(); i < pattern.length(); i++) {"]},
{"line_number": 422, "new_lines": ["        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {"]},
{"line_number": 422, "new_lines": ["            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);"]},
{"line_number": 422, "new_lines": ["            pos.setIndex(i + ESCAPED_QUOTE.length());"]},
{"line_number": 422, "new_lines": ["            lastHold = pos.getIndex();"]},
{"line_number": 422, "new_lines": ["            continue;"]},
{"line_number": 422, "new_lines": ["        }"]},
{"line_number": 422, "new_lines": ["        switch (c[pos.getIndex()]) {"]},
{"line_number": 422, "new_lines": ["            case QUOTE:"]},
{"line_number": 422, "new_lines": ["                next(pos);"]},
{"line_number": 422, "new_lines": ["                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);"]},
{"line_number": 422, "new_lines": ["            default:"]},
{"line_number": 422, "new_lines": ["                next(pos);"]},
{"line_number": 422, "new_lines": ["        }"]},
{"line_number": 422, "new_lines": ["    }"]},
{"line_number": 422, "new_lines": ["    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);"]},
{"line_number": 422, "new_lines": ["}"]}
],
"deletions": [], 
"modifications": []
}
][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}], "deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["return appendQuotedString(pattern, pos, appendTo, escapingOn);"]}],"deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}],"deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}],"deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}],"deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["return appendQuotedString(pattern, pos, appendTo, escapingOn);"]}],"deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}],"deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}],"deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}],"deletions": [], "modifications": []},

{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["return appendQuotedString(pattern, pos, appendTo, escapingOn);"]}],"deletions": [], "modifications": []}
][{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []}][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["return appendQuotedString(pattern, pos, appendTo, escapingOn);"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer newAppendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    // Insert AI-generated method code here", "}", "return newAppendQuotedString(pattern, pos, appendTo, escapingOn);"]}], "deletions": [], "modifications": []
}
][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}]}][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer newAppendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    // Insert AI-generated method code here", "}"]}]}
][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}, {"line_number": 421, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["return appendQuotedString(pattern, pos, appendTo, escapingOn);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer newAppendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    // Insert AI-generated method code here", "}"]}], "deletions": [], "modifications": [{"line_number": 422, "modified_line": "return newAppendQuotedString(pattern, pos, appendTo, escapingOn);"}]},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 421, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}], "deletions": [], "modifications": []}
][
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}],
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["return appendQuotedString(pattern, pos, appendTo, escapingOn);"]}]},
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}],
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}],
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}],
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer newAppendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    // Insert AI-generated method code here", "}", "return newAppendQuotedString(pattern, pos, appendTo, escapingOn);"]}],
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}],
    {"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["421", "//"]], "insertions": [{"line_number": 421, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (appendTo == null) {", "        return null;", "    }", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}]
][
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["return appendQuotedString(pattern, pos, appendTo, escapingOn);"]}]},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (appendTo == null) {", "        return null;", "    }", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}]},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo == null) {", "    return null;", "}"]}]},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo == null ? null : appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}]},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    int start = pos.getIndex();", "    char[] c = pattern.toCharArray();", "    if (appendTo == null) {", "        return null;", "    }", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);", "}"]}]},
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["private StringBuffer newAppendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {", "    // Insert AI-generated method code here", "}", "return newAppendQuotedString(pattern, pos, appendTo, escapingOn);"]}],
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}],
{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo == null) {", "    return null;", "}"]}]
][{"file_name": "org/apache/commons/lang/text/ExtendedMessageFormat.java", "target_lines": [["422", "//"]], "insertions": [{"line_number": 422, "new_lines": ["if (appendTo != null) {", "    if (escapingOn && c[start] == QUOTE) {", "        return appendTo.append(QUOTE);", "    }", "    int lastHold = start;", "    for (int i = pos.getIndex(); i < pattern.length(); i++) {", "        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {", "            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);", "            pos.setIndex(i + ESCAPED_QUOTE.length());", "            lastHold = pos.getIndex();", "            continue;", "        }", "        switch (c[pos.getIndex()]) {", "            case QUOTE:", "                next(pos);", "                return appendTo.append(c, lastHold, pos.getIndex() - lastHold);", "            default:", "                next(pos);", "        }", "    }", "}"]}], "deletions": [], "modifications": []}]