[
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["// Inserted fix for bug: keep track of the context in which eval is called"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["// Inserted fix for bug: distinguish between different contexts of eval calls"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["// Inserted fix for bug: improving tracking of 'this' context in a call"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["// Inserted fix for bug: handling 'this' context in calls without explicit 'this'"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["// Inserted fix for bug: adding support for free calls in the AST preparation"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"eval\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}]}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"eval\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}]}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"abc\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }", "      // Mutation: Removed the condition check for 'abc' string in the annotation process"]}]}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"eval\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"abc\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"abc\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"xyz\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && first.getString() != null && \"test\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && first.getString() != null && \"def\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && first.getString() != null && \"ghi\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && first.getString() != null && \"123\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && first.getString() != null && \"456\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Add a log statement here",
         "      System.out.println(\"Mutated code here\");"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Change the boolean condition here",
         "      if (!NodeUtil.isGet(first)) {"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Swap the order of method calls here",
         "      first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      n.putBooleanProp(Node.FREE_CALL, true);"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Add a null check here",
         "      if (first != null) {"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Change the method call here",
         "      first.putBooleanProp(Node.DIRECT_EVAL, false);"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Introduce a new variable here",
         "      int value = 10;"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Modify the string comparison here",
         "      if (first.isName() && \"xyz\".equals(first.getString())) {"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Change the method name here",
         "      first.putBooleanProp(Node.DIRECT_EVALUATION, true);"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Add a different property here",
         "      first.putBooleanProp(Node.IS_EVALUATED, true);"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Change the condition to always true",
         "      if (true) {"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Change the logic of the condition here",
         "      if (first.getParent() == null) {"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Add a different property here",
         "      first.putBooleanProp(Node.IS_CALLED, true);"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Change the property name here",
         "      first.putBooleanProp(Node.IS_DIRECT_EVAL, true);"
     ]}
 ]
},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], 
 "insertions": [
     {"line_number": 166, "new_lines": [
         "      Preconditions.checkState(n.isCall());",
         "      Node first = n.getFirstChild();",
         "      if (!NodeUtil.isGet(first)) {",
         "        n.putBooleanProp(Node.FREE_CALL, true);",
         "      }",
         "      if (first.isName() && \"abc\".equals(first.getString())) {",
         "        first.putBooleanProp(Node.DIRECT_EVAL, true);",
         "      }",
         "      // Inserted mutation: Add a method call here",
         "      handleMutatedCode(first);"
     ]}
 ]
}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"eval\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }"]}]}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"def\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"xyz\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"123\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"456\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"789\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"mno\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"pqr\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}]
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"xyz\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkArgument(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, false);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, false);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.IS_DISPATCHER, true);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.IS_DISPATCHER, false);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.setJSDocInfo(null);", "        }"]}]}],
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.setJSDocInfo(new JSDocInfoBuilder(false).build());", "        }"]}]}]
][
    {"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}]}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (first != null && !NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first != null && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first != null && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first != null && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first != null && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"abc\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"}]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
,
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}]}
][{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkArgument(n != null);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n != null && n.isCall());", "      Node first = n != null ? n.getFirstChild() : null;", "      if (first != null && !NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []}][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkArgument(n.isCall());"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall(), 'Node is not a call node');"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "deletions": [166]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();"]}]}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }", "      // Additional logic here"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "        if (first.isName() && \"abc\".equals(first.getString())) {", "          first.putBooleanProp(Node.DIRECT_EVAL, true);", "        }", "      }", "      // More additional logic here"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkArgument(n.isCall());"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);", "      Preconditions.checkArgument(n.isCall());"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n != null);"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      if (n == null) return;"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      if (n == null) {", "        return;", "      }"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      if (n == null) {", "        throw new IllegalArgumentException(\"Node n cannot be null\");", "      }"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      if (n == null) {", "        throw new IllegalStateException(\"Node n is null\");", "      }"]}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "modifications": [{"line_number": 166, "modified_line": "      Preconditions.checkState(n.isCall());"}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "modifications": [{"line_number": 166, "modified_line": "      Preconditions.checkState(n.isCall()); // Assertion added based on failing test"}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "modifications": [{"line_number": 166, "modified_line": "      Preconditions.checkState(n.isCall()); // Added null check for n"}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "modifications": [{"line_number": 166, "modified_line": "      Preconditions.checkState(n.isCall()); // Fixing assertion condition"}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "modifications": [{"line_number": 166, "modified_line": "      Preconditions.checkState(n.isCall()); // Check if n is a call node"}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "modifications": [{"line_number": 166, "modified_line": "      Preconditions.checkState(n.isCall()); // Verify that n represents a call"}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "modifications": [{"line_number": 166, "modified_line": "      Preconditions.checkState(n.isCall()); // Ensuring n is a call node based on failing test"}]},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "modifications": [{"line_number": 166, "modified_line": "      Preconditions.checkState(n.isCall()); // Added precondition check for n"}]}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkNotNull(n);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkArgument(n != null);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n != null);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkElementIndex(0, n.getChildCount());"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkPositionIndex(0, n.getChildCount());"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/PrepareAst.java", "target_lines": [["166", "//"]], "insertions": [{"line_number": 166, "new_lines": ["      Preconditions.checkState(n.isCall());", "      Node first = n.getFirstChild();", "      if (!NodeUtil.isGet(first)) {", "        n.putBooleanProp(Node.FREE_CALL, true);", "      }", "      if (first.isName() && \"eval\".equals(first.getString())) {", "        first.putBooleanProp(Node.DIRECT_EVAL, true);", "      }", "      // Inserted mutation: Add logging for debugging purposes", "      System.out.println(\"Annotating calls...\");"]}]}
]