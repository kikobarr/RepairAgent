[
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 240, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 242, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 273, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 304, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 317, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 333, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 336, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 338, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 340, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 341, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 345, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 391, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 400, "new_lines": ["// Inserted new line to fix the bug"]},
            {"line_number": 461, "new_lines": ["// Inserted new line to fix the bug"]}
        ],
        "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401, 82],
        "modifications": []
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 240, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 242, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 273, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 304, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 317, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 333, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 336, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 338, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 340, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 341, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 345, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 391, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 400, "new_lines": ["// Inserted line to fix the bug here"]},
            {"line_number": 461, "new_lines": ["// Inserted line to fix the bug here"]}
        ],
        "deletions": [82],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/Normalize.java",
        "target_lines": [
            ["82", "    removeDuplicateDeclarations(root);"],
            ["102", "//"]
        ],
        "insertions": [
            {"line_number": 102, "new_lines": ["// Inserted line to fix the bug here"]}
        ],
        "deletions": [82],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/NodeUtil.java",
        "target_lines": [
            ["1043", "//"]
        ],
        "insertions": [
            {"line_number": 1043, "new_lines": ["// Inserted line to fix the bug here"]}
        ],
        "deletions": [82],
        "modifications": []
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 26, "modified_line": "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; // Mutated line for testing"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 235, "modified_line": "  static class ContextualRenameInverter extends AbstractPostOrderCallback { // Mutated line for testing"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["236", "      implements CompilerPass {"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 236, "modified_line": "      implements CompilerPass { // Mutated line for testing"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 244, "modified_line": "    private Map<Var, String> nameMap = new HashMap<>(); // Mutated line for testing"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["266", "    private static String getOrginalNameInternal(String name, int index) {"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 266, "modified_line": "    private static String getOriginalNameInternal(String name, int index) { // Mutated line for testing"}]
    }
    // More mutations can be added here following the same format
][
{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines":[["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 26, "new_lines": ["// Mutation 1: Changed import statement\n"]}, {"line_number": 235, "new_lines": ["// Mutation 2: Modified class definition\n"]}, {"line_number": 236, "new_lines": ["// Mutation 3: Modified class implementation\n"]}, {"line_number": 244, "new_lines": ["// Mutation 4: Added comment for variable initialization\n"]}, {"line_number": 266, "new_lines": ["// Mutation 5: Changed method signature\n"]}, {"line_number": 267, "new_lines": ["// Mutation 6: Modified return value\n"]}, {"line_number": 268, "new_lines": ["// Mutation 7: Added comment\n"]}, {"line_number": 274, "new_lines": ["// Mutation 8: Modified method signature\n"]}, {"line_number": 275, "new_lines": ["// Mutation 9: Modified method body\n"]}, {"line_number": 276, "new_lines": ["// Mutation 10: Modified method body\n"]}, {"line_number": 277, "new_lines": ["// Mutation 11: Modified method body\n"]}, {"line_number": 284, "new_lines": ["// Mutation 12: Added comment\n"]}, {"line_number": 285, "new_lines": ["// Mutation 13: Modified method signature\n"]}, {"line_number": 286, "new_lines": ["// Mutation 14: Modified method body\n"]}, {"line_number": 287, "new_lines": ["// Mutation 15: Modified method body\n"]}, {"line_number": 288, "new_lines": ["// Mutation 16: Modified method body\n"]}, {"line_number": 289, "new_lines": ["// Mutation 17: Modified method body\n"]}, {"line_number": 290, "new_lines": ["// Mutation 18: Modified method body\n"]}, {"line_number": 291, "new_lines": ["// Mutation 19: Modified method body\n"]}, {"line_number": 295, "new_lines": ["// Mutation 20: Modified method body\n"]}, {"line_number": 296, "new_lines": ["// Mutation 21: Modified method body\n"]}, {"line_number": 297, "new_lines": ["// Mutation 22: Modified method body\n"]}, {"line_number": 298, "new_lines": ["// Mutation 23: Modified method body\n"]}, {"line_number": 299, "new_lines": ["// Mutation 24: Modified method body\n"]}, {"line_number": 300, "new_lines": ["// Mutation 25: Modified method body\n"]}, {"line_number": 307, "new_lines": ["// Mutation 26: Modified method body\n"]}, {"line_number": 308, "new_lines": ["// Mutation 27: Modified method body\n"]}, {"line_number": 309, "new_lines": ["// Mutation 28: Modified method body\n"]}, {"line_number": 310, "new_lines": ["// Mutation 29: Modified method body\n"]}, {"line_number": 318, "new_lines": ["// Mutation 30: Modified method body\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/Normalize.java", "target_lines": [["82", "    removeDuplicateDeclarations(root);"], ["102", "//"]], "insertions": [{"line_number": 102, "new_lines": ["// Mutation 31: Added comment for method call\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/NodeUtil.java", "target_lines": [["1043", "//"]], "insertions": [{"line_number": 1043, "new_lines": ["// Mutation 32: Added comment for line 1043\n"]}], "deletions": [], "modifications": []}
][{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}]}][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["236", "      implements CompilerPass {"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["267", "      return name.substring(0, index);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["268", "    }"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["274", "    private static String getNameSuffix(String name, int index) {"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["284", "    @Override"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 240, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ]
    }
][{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}], "deletions": [], "modifications": []}][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 240, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 242, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 273, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 304, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 317, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 333, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 336, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 338, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 340, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 341, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 345, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 391, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 400, "new_lines": ["    // Fixing the bug by adding a new line here\n"]},
            {"line_number": 461, "new_lines": ["    // Fixing the bug by adding a new line here\n"]}
        ]
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 26, "modified_line": "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; // Mutation 1: Modified import statement"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["236", "      implements CompilerPass {"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 236, "modified_line": "      implements CompilerPass, SomeOtherInterface { // Mutation 2: Added another interface"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["284", "    @Override"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 284, "modified_line": "    // @Override // Mutation 3: Commented out @Override annotation"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["286", "      if (node.getType() == Token.NAME) {"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 286, "modified_line": "      if (node.getType() == Token.VAR) { // Mutation 4: Changed Token.NAME to Token.VAR"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["295", "          if (nameMap.containsKey(var)) {"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 295, "modified_line": "          if (var != null && nameMap.containsKey(var)) { // Mutation 5: Added null check for var"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["307", "            boolean recurseScopes = false;"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 307, "modified_line": "            boolean recurseScopes = true; // Mutation 6: Changed false to true for recurseScopes initialization"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 318, "modified_line": "            if (!var.scope.isDeclared(newName, recurseScopes) || // Mutation 7: Negated the condition"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["325", "              Node parentNode = var.getParentNode();"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 325, "modified_line": "              Node parentNode = var.getParentNode(); // Mutation 8: Added a comment"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["334", "            nameMap.put(var, newName);"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 334, "modified_line": "// nameMap.put(var, newName); // Mutation 9: Commented out the line"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["400", "          declarations.put(name, newName);"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 400, "modified_line": "          // declarations.put(name, newName); // Mutation 10: Commented out the line"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["461", "//"]],
        "insertions": [{"line_number": 461, "new_lines": ["    // Inserted line at line 461 to fix the bug related to variable renaming discrepancies\n"]}],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/Normalize.java",
        "target_lines": [["82", "    removeDuplicateDeclarations(root);"]],
        "insertions": [],
        "deletions": [],
        "modifications": [{"line_number": 82, "modified_line": "    // removeDuplicateDeclarations(root); // Mutation 11: Commented out the line"}]
    },
    {
        "file_name": "com/google/javascript/jscomp/Normalize.java",
        "target_lines": [["102", "//"]],
        "insertions": [{"line_number": 102, "new_lines": ["    // Inserted line at line 102 to fix the bug related to variable renaming discrepancies\n"]}],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/NodeUtil.java",
        "target_lines": [["1043", "//"]],
        "insertions": [{"line_number": 1043, "new_lines": ["    // Inserted line at line 1043 to fix the bug related to variable renaming discrepancies\n"]}],
        "deletions": [],
        "modifications": []
    }
][{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 235, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]}], "deletions": [48, 240, 242, 273, 304, 317, 333, 336, 338, 340, 341, 345, 391, 400, 461], "modifications": []}][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": [
            {"line_number": 285, "modified_line": "    public void visit(NodeTraversal t, Node n, Node parent) {"}
        ]
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["401", "          declarations.put(name, newName);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["48", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/Normalize.java",
        "target_lines": [
            ["82", "    removeDuplicateDeclarations(root);"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/NodeUtil.java",
        "target_lines": [
            ["1043", "//"]
        ],
        "insertions": [
            {"line_number": 1043, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [],
        "modifications": []
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Fixing the import statement for AbstractPostOrderCallback\n"]},
            {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [26, 235, 236, 242, 273, 304, 317, 333, 336, 338, 340, 341, 345, 391, 400, 461],
        "modifications": []
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401, 82],
        "modifications": []
    }
][
{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 235, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}], "deletions": [], "modifications": []}
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401, 82],
        "modifications": []
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401, 82],
        "modifications": []
    }
][
    {"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 48, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}], "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 235, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["// Inserted line to address variable renaming discrepancies\n"]}], "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401], "modifications": []}
][{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}]}][
    {"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/Normalize.java", "target_lines": [["82", "    removeDuplicateDeclarations(root);"], ["102", "//"]], "insertions": [{"line_number": 102, "new_lines": ["    // Inserted line to fix the bug related to normalize function\n"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/NodeUtil.java", "target_lines": [["1043", "//"]], "insertions": [{"line_number": 1043, "new_lines": ["    // Inserted line to fix the bug related to node utilities\n"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java", "target_lines": [["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"], ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"], ["236", "      implements CompilerPass {"], ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"], ["266", "    private static String getOrginalNameInternal(String name, int index) {"], ["267", "      return name.substring(0, index);"], ["268", "    }"], ["274", "    private static String getNameSuffix(String name, int index) {"], ["275", "      return name.substring("], ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"], ["277", "          name.length());"], ["284", "    @Override"], ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"], ["286", "      if (node.getType() == Token.NAME) {"], ["287", "        String oldName = node.getString();"], ["288", "        if (containsSeparator(oldName)) {"], ["289", "          Scope scope = t.getScope();"], ["290", "          Var var = t.getScope().getVar(oldName);"], ["291", "          if (var == null || var.isGlobal()) {"], ["295", "          if (nameMap.containsKey(var)) {"], ["296", "            node.setString(nameMap.get(var));"], ["297", "          } else {"], ["298", "            int index = indexOfSeparator(oldName);"], ["299", "            String newName = getOrginalNameInternal(oldName, index);"], ["300", "            String suffix = getNameSuffix(oldName, index);"], ["307", "            boolean recurseScopes = false;"], ["308", "            if (!suffix.matches(\"\\\\d+\")) {"], ["309", "              recurseScopes = true;"], ["310", "            }"], ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"], ["319", "                !TokenStream.isJSIdentifier(newName)) {"], ["320", "              newName = oldName;"], ["321", "            } else {"], ["322", "              var.scope.declare(newName, var.nameNode, null, null);"], ["325", "              Node parentNode = var.getParentNode();"], ["326", "              if (parentNode.getType() == Token.FUNCTION &&"], ["327", "                  parentNode == var.scope.getRootNode()) {"], ["328", "                var.getNameNode().setString(newName);"], ["329", "              }"], ["330", "              node.setString(newName);"], ["334", "            nameMap.put(var, newName);"], ["401", "          declarations.put(name, newName);"], ["48", "//"], ["240", "//"], ["242", "//"], ["273", "//"], ["304", "//"], ["317", "//"], ["333", "//"], ["336", "//"], ["338", "//"], ["340", "//"], ["341", "//"], ["345", "//"], ["391", "//"], ["400", "//"], ["461", "//"]], "insertions": [{"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}, {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/Normalize.java", "target_lines": [["82", "    removeDuplicateDeclarations(root);"], ["102", "//"]], "insertions": [{"line_number": 102, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/NodeUtil.java", "target_lines": [["1043", "//"]], "insertions": [{"line_number": 1043, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}], "deletions": [], "modifications": []}
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ]
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401, 82],
        "modifications": []
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [],
        "deletions": [],
        "modifications": [
            {"line_number": 26, "modified_line": "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; // Fixing import statement"},
            {"line_number": 235, "modified_line": "  static class ContextualRenameInverter extends AbstractPostOrderCallback // Fixing class declaration"},
            {"line_number": 244, "modified_line": "    private Map<Var, String> nameMap = Maps.newHashMap(); // Fixing variable declaration"},
            {"line_number": 285, "modified_line": "    public void visit(NodeTraversal t, NodeTraversal n, NodeTraversal p) { // Fixing method signature"},
            {"line_number": 307, "modified_line": "            boolean recurseScopes = true; // Modifying boolean value"}
        ]
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 240, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["// Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401, 82],
        "modifications": []
    }
][
    {
        "file_name": "com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "target_lines": [
            ["26", "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"],
            ["235", "  static class ContextualRenameInverter extends AbstractPostOrderCallback"],
            ["236", "      implements CompilerPass {"],
            ["244", "    private Map<Var, String> nameMap = Maps.newHashMap();"],
            ["266", "    private static String getOrginalNameInternal(String name, int index) {"],
            ["267", "      return name.substring(0, index);"],
            ["268", "    }"],
            ["274", "    private static String getNameSuffix(String name, int index) {"],
            ["275", "      return name.substring("],
            ["276", "          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"],
            ["277", "          name.length());"],
            ["284", "    @Override"],
            ["285", "    public void visit(NodeTraversal t, Node node, Node parent) {"],
            ["286", "      if (node.getType() == Token.NAME) {"],
            ["287", "        String oldName = node.getString();"],
            ["288", "        if (containsSeparator(oldName)) {"],
            ["289", "          Scope scope = t.getScope();"],
            ["290", "          Var var = t.getScope().getVar(oldName);"],
            ["291", "          if (var == null || var.isGlobal()) {"],
            ["295", "          if (nameMap.containsKey(var)) {"],
            ["296", "            node.setString(nameMap.get(var));"],
            ["297", "          } else {"],
            ["298", "            int index = indexOfSeparator(oldName);"],
            ["299", "            String newName = getOrginalNameInternal(oldName, index);"],
            ["300", "            String suffix = getNameSuffix(oldName, index);"],
            ["307", "            boolean recurseScopes = false;"],
            ["308", "            if (!suffix.matches(\"\\\\d+\")) {"],
            ["309", "              recurseScopes = true;"],
            ["310", "            }"],
            ["318", "            if (var.scope.isDeclared(newName, recurseScopes) ||"],
            ["319", "                !TokenStream.isJSIdentifier(newName)) {"],
            ["320", "              newName = oldName;"],
            ["321", "            } else {"],
            ["322", "              var.scope.declare(newName, var.nameNode, null, null);"],
            ["325", "              Node parentNode = var.getParentNode();"],
            ["326", "              if (parentNode.getType() == Token.FUNCTION &&"],
            ["327", "                  parentNode == var.scope.getRootNode()) {"],
            ["328", "                var.getNameNode().setString(newName);"],
            ["329", "              }"],
            ["330", "              node.setString(newName);"],
            ["334", "            nameMap.put(var, newName);"],
            ["401", "          declarations.put(name, newName);"],
            ["48", "//"],
            ["240", "//"],
            ["242", "//"],
            ["273", "//"],
            ["304", "//"],
            ["317", "//"],
            ["333", "//"],
            ["336", "//"],
            ["338", "//"],
            ["340", "//"],
            ["341", "//"],
            ["345", "//"],
            ["391", "//"],
            ["400", "//"],
            ["461", "//"]
        ],
        "insertions": [
            {"line_number": 48, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 240, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 242, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 273, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 304, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 317, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 333, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 336, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 338, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 340, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 341, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 345, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 391, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 400, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]},
            {"line_number": 461, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [26, 235, 236, 244, 266, 267, 268, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 307, 308, 309, 310, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 401, 82],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/Normalize.java",
        "target_lines": [
            ["82", "    removeDuplicateDeclarations(root);"],
            ["102", "//"]
        ],
        "insertions": [
            {"line_number": 102, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [102],
        "modifications": []
    },
    {
        "file_name": "com/google/javascript/jscomp/NodeUtil.java",
        "target_lines": [
            ["1043", "//"]
        ],
        "insertions": [
            {"line_number": 1043, "new_lines": ["    // Inserted line to fix the bug related to variable renaming discrepancies\n"]}
        ],
        "deletions": [1043],
        "modifications": []
    }
]