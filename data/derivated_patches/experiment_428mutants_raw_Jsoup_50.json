[
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Inserted line to fix the bug", "        return doc;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Add a comment here to clarify the following code"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Potential fix here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Inserted to address the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Potential fix added here", "        return doc;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Fix to be verified"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Possible fix here", "        return doc;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Fix added as a potential solution"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Fix for the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Fix implementation here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 0) {", "            return docData.charAt(0) == UNICODE_BOM;"]}]}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) != UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 0) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) != UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) != UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 0) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 0) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() == 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 0) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() == 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.isEmpty() && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 0) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.isEmpty() && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1) {"]}], "deletions": [125, 126, 127, 128, 129, 130, 131],
"modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Inserted line to fix the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Added line to resolve the issue"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// New line added as a fix"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Fix added here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Bug fix line inserted"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Inserted line to fix the issue"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Correcting the bug with this line"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Added line to fix the issue here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Line added to fix the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["// Fixing the bug with this line"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            return null;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            return doc;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            return docData;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            charsetName = null;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            charsetName = Charset.defaultCharset().name();"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            doc = new Document("");"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            doc = new Document(null);"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            charsetName = Charset.defaultCharset().toString();"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            docData = \"\";"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() == 0) {", "            docData = null;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Inserted line to fix the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Potential fix goes here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Code fix suggestion"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Potential fix goes here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines":["        // Inserted fix to resolve issue"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Add fix here to resolve the BOM issue", "        // charsetName = foundCharset;"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Check and handle the BOM character properly"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Fix the BOM handling logic here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Ensure correct handling of BOM character"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Fix the issue related to BOM handling"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Correct the BOM handling logic here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Inserted line to fix the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // New line added to address the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Line added to fix the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Bug fix line added"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Added line to fix the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Inserted line for bug fix"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Line inserted to fix the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Bug fix line inserted here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Fix for the bug added here"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        // Added line for fixing the bug"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData != null && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {}"]}], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData != null && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {}"]}], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {}"]}], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {}"]}], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData != null && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {}"]}], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {}"]}], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {}"]}], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charsetName == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charsetName)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}],"deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charsetName == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charsetName)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}],"deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}],"deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}],"deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}],"deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byteBuffer, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charsetName == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                    charsetName = foundCharset;", "                    byteData.rewind();", "                    docData = Charset.forName(foundCharset).decode(byteData).toString();", "                    doc = null;", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charsetName).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charsetName = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = parser.parseInput(docData, baseUri);", "            doc.outputSettings().charset(charsetName);", "        }", "        return doc;", "    }"]}],"deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byteBuffer, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charsetName == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                    charsetName = foundCharset;", "                    byteData.rewind();", "                    docData = Charset.forName(foundCharset).decode(byteData).toString();", "                    doc = null;", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charsetName).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charsetName = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = parser.parseInput(docData, baseUri);", "            doc.outputSettings().charset(charsetName);", "        }", "        return doc;", "    }"]}],"deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byteBuffer, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "[
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "}]}, "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        Document doc;", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data = Charset.forName(charset).decode(byteBuffer).toString();", "        return Parser.htmlParser().parseInput(data, baseUri);", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charsetName == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                    charsetName = foundCharset;", "                    byteData.rewind();", "                    docData = Charset.forName(foundCharset).decode(byteData).toString();", "                    doc = null;", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charsetName).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charsetName = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = parser.parseInput(docData, baseUri);", "            doc.outputSettings().charset(charsetName);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charsetName == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                    charsetName = foundCharset;", "                    byteData.rewind();", "                    docData = Charset.forName(foundCharset).decode(byteData).toString();", "                    doc = null;", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charsetName).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charsetName = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = parser.parseInput(docData, baseUri);", "            doc.outputSettings().charset(charsetName);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charset, String baseUri) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charset == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = Parser.htmlParser().parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                    charset = foundCharset;", "                    byteData.rewind();", "                    docData = Charset.forName(foundCharset).decode(byteData).toString();", "                    doc = null;", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charset, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charset).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charsetName = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = Parser.htmlParser().parseInput(docData, baseUri);", "            doc.outputSettings().charset(charset);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charsetName == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals[
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number":93, "new_lines":["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charsetName == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charsetName)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charsetName == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charsetName)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "        doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charsetName == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charsetName)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "        Document parsedDoc = Parser.htmlParser().parseInput(data, baseUri);", "        return parsedDoc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charsetName == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charsetName)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        Document doc;", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        Document doc;", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        Document doc;", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "        Document parsedDoc = Parser.htmlParser().parseInput(data, baseUri);", "        return parsedDoc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charset, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        Document doc;", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {",[
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static String parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, Charset charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, Charset charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static String parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static String parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static String parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static String parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    }"]}], "deletions": [125, 126, [
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static String parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charsetName == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                    charsetName = foundCharset;", "                    byteData.rewind();", "                    docData = Charset.forName(foundCharset).decode(byteData).toString();", "                    doc = null;", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charsetName).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charsetName = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = parser.parseInput(docData, baseUri);", "            doc.outputSettings().charset(charsetName);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static String parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charsetName == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                    charsetName = foundCharset;", "                    byteData.rewind();", "                    docData = Charset.forName(foundCharset).decode(byteData).toString();", "                    doc = null;", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charsetName).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charsetName = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = parser.parseInput(docData, baseUri);", "            doc.outputSettings().charset(charsetName);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static String parseByteData(byte[] byteData, Charset charset) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        byte[] dataCopy = byteData;", "", "        if (charset == null) {", "            charset = Charset.forName(defaultCharset);", "        }", "", "        // Check for BOM (Byte Order Mark) and skip if present", "        if (byteData.length >= 2 && byteData[0] == (byte) 0xFF && byteData[1] == (byte) 0xFE) {", "            byteBuffer.order(ByteOrder.LITTLE_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        } else if (byteData.length >= 2 && byteData[0] == (byte) 0xFE && byteData[1] == (byte) 0xFF) {", "            byteBuffer.order(ByteOrder.BIG_ENDIAN);", "            dataCopy = Arrays.copyOfRange(byteData, 2, byteData.length);", "        }", "", "        return charset.decode(ByteBuffer.wrap(dataCopy)).toString();", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charsetName == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "                }", "", "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                    charsetName = foundCharset;", "                    byteData.rewind();", "                    docData = Charset.forName(foundCharset).decode(byteData).toString();", "                    doc = null;", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charsetName).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charsetName = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = parser.parseInput(docData, baseUri);", "            doc.outputSettings().charset(charsetName);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["[
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["126", "        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM) {"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.length() > 1 && docData.charAt(1) == UNICODE_BOM) {"], ["126", "        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM && docData.length() > 1 && docData.charAt(1) == UNICODE_BOM) {"], ["126", "        if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["126", "        if (docData != null && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["126", "        if (docData != null && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.length() > 1 && docData.charAt(1) == UNICODE_BOM) {"], ["126", "        if (docData != null && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["126", "        if (docData != null && docData.length() > 1 && docData.charAt(0) == UNICODE_BOM && docData.charAt(1) == UNICODE_BOM) {"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    "]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []}
][
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(ByteBuffer byteData, String charset, String baseUri) {", "        String docData;", "        Document doc = null;", "", "        // look for BOM - overrides any other header or input", "", "        if (charset == null) { // determine from meta. safe parse as UTF-8", "            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            doc = parser.parseInput(docData, baseUri);", "            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();", "            if (meta != null) { // if not found, will keep utf-8 as best attempt", "                String foundCharset = null;", "                if (meta.hasAttr(\"http-equiv\")) {", "                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));", "                }", "                if (foundCharset == null && meta.hasAttr(\"charset\")) {", "                    try {", "                        if (Charset.isSupported(meta.attr(\"charset\"))) {", "                            foundCharset = meta.attr(\"charset\");", "                        }", "                    } catch (IllegalCharsetNameException e) {", "                        foundCharset = null;", "                    }", "", "                    if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode", "                        foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");", "                        charset = foundCharset;", "                        byteData.rewind();", "                        docData = Charset.forName(foundCharset).decode(byteData).toString();", "                        doc = null;", "                    }", "                }", "            }", "        } else { // specified by content type header (or by user on file load)", "            Validate.notEmpty(charset, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");", "            docData = Charset.forName(charset).decode(byteData).toString();", "        }", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {", "            byteData.rewind();", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();", "            docData = docData.substring(1);", "            charset = defaultCharset;", "            doc = null;", "        }", "        if (doc == null) {", "            doc = parser.parseInput(docData, baseUri);", "            doc.outputSettings().charset(charset);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charsetName == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charsetName)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charset, String baseUri) {", "        ByteBuffer byteBuffer = ByteBuffer.wrap(byteData);", "        String data;", "        if (charset == null) {", "            data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "        } else {", "            try {", "                data = Charset.forName(validateCharset(charset)).decode(byteBuffer).toString();", "            } catch (IllegalCharsetNameException e) {", "                data = Charset.forName(defaultCharset).decode(byteBuffer).toString();", "            }", "        }", "", "        Document doc = Parser.htmlParser().parseInput(data, baseUri);", "        return doc;", "    }", "", "    private static String validateCharset(String charset) {", "        try {", "            if (Charset.isSupported(charset)) {", "                return charset;", "            }", "        } catch (IllegalCharsetNameException e) {", "            // fall through", "        }", "        return defaultCharset;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "org/jsoup/helper/DataUtil.java", "target_lines": [["125", "        }"], ["126", "        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {"], ["127", "            byteData.rewind();"], ["128", "            docData = Charset.forName(defaultCharset).decode(byteData).toString();"], ["129", "            docData = docData.substring(1);"], ["130", "            charsetName = defaultCharset;"], ["131", "            doc = null;"], ["93", "//"]], "insertions": [{"line_number": 93, "new_lines": ["    public static Document parseByteData(byte[] byteData, String charsetName, String baseUri) {", "        Document doc;", "        InputStream byteStream = new ByteArrayInputStream(byteData);", "        try {", "            doc = Parser.htmlParser().parseInput(byteStream, charsetName, baseUri);", "        } catch (IOException e) {", "            throw new RuntimeException(\"IOException when parsing byte data\", e);", "        }", "        return doc;", "    }"]}], "deletions": [125, 126, 127, 128, 129, 130, 131], "modifications": []},
{"file_name": "