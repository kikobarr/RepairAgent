[
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines":["double variance = standardDeviation * standardDeviation;"]}, {"line_number": 111, "new_lines":["double z = (x - mean) / standardDeviation;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines":["double variance = standardDeviation * standardDeviation;"]}, {"line_number": 111, "new_lines":["double z = (x - mean) / Math.sqrt(variance * 2.0);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines":["double variance = standardDeviation * standardDeviation;"]}, {"line_number": 111, "new_lines":["double z = (x - mean) / Math.sqrt(variance) / Math.sqrt(2.0);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines":["double variance = standardDeviation * standardDeviation;"]}, {"line_number": 111, "new_lines":["double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines":["double variance = standardDeviation * standardDeviation;"]}, {"line_number": 111, "new_lines":["double z = (x - mean) / Math.sqrt(2.0 * variance);"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["        if (mean == 0.0) {", "            return x == standardDeviation ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (mean == 0.0) {", "            return x == standardDeviation ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (x == 0.0) {", "            return mean == standardDeviation ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (mean == 0.0) {", "            return x == standardDeviation ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["        if (x == 0.0) {", "            return mean == standardDeviation ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == mean) {", "            return x == 0.0 ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["        if (mean == standardDeviation) {", "            return x == 0.0 ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (x == mean) {", "            return 0.5;", "        "]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        }"]}, {"line_number": 111, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        }"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    if (x > 20 * standardDeviation) {", "        return x == mean ? 1 : 0;", "    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [111], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [], "deletions": [109, 111], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": [{"line_number": 111, "modified_line": "        return x == mean ? 0.5 : 0.0;"}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": [{"line_number": 109, "modified_line": "        return 0.5 * (1.0 + Erf.erf((x - mean) /"}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [], "deletions": [109], "modifications": [{"line_number": 111, "modified_line": "    return x == mean ? 0.5 : 0.0;"}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    if (x > 20 * standardDeviation) {", "        return x == mean ? 1 : 0;", "    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [], "deletions": [111], "modifications": [{"line_number": 109, "modified_line": "        return x == mean ? 0.5 : 0.0;"}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [109, 111], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Handling edge case where standard deviation is zero", "    if (standardDeviation == 0.0) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation <= 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Check if standard deviation is not zero", "    if (standardDeviation != 0.0) {", "    "]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Handle case where standard deviation is zero or NaN", "    if (Double.isNaN(standardDeviation) || standardDeviation == 0.0) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation <= 0.0 || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Handle exceptional cases where standard deviation is zero or NaN", "    if (Double.isNaN(standardDeviation) || standardDeviation <= 0.0) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Double.compare(standardDeviation, 0.0) == 0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Check if standard deviation is zero using Double.compare", "    if (Double.compare(standardDeviation, 0.0) == 0) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation <= 0.0 && Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Handle special cases where standard deviation is non-positive or NaN", "    if (standardDeviation <= 0.0 && Double.isNaN(standardDeviation)) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Double.compare(standardDeviation, 0.0) <= 0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Check if standard deviation is non-positive using Double.compare", "    if (Double.compare(standardDeviation, 0.0) <= 0) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Handling cases where standard deviation is infinite or NaN", "    if (Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation <= 0.0 && Double.isInfinite(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Check if standard deviation is non-positive and infinite", "    if (standardDeviation <= 0.0 && Double.isInfinite(standardDeviation)) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Double.compare(standardDeviation, 0.0) <= 0 || Double.isInfinite(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Check if standard deviation is non-positive or infinite using Double.compare", "    if (Double.compare(standardDeviation, 0.0) <= 0 || Double.isInfinite(standardDeviation)) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Double.isNaN(standardDeviation) || Double.isInfinite(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Handling cases where standard deviation is NaN or infinite", "    if (Double.isNaN(standardDeviation) || Double.isInfinite(standardDeviation)) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation <= 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    // Handle cases where standard deviation is non-positive, infinite, or NaN", "    if (standardDeviation <= 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "        return x == mean ? 0.5 : 0.0;", "    }"]}],"deletions": [], "modifications": []
}][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    if (x > 10) {", "        return 0.0;", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 0.5;"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 0.0;"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 1.0;"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return x;"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 0.5 * x;"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 1.0 * x;"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 0.0 * x;"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return x / 2;"]}],"deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 - Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 - Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 - Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 - Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 - Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return 0.5 * (1.0 - Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == median ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return x == median ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return 0.5 * (1.0 - Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return 0.5 * (1.0 - Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return 0.5 * (1.0 + Erf.erf((x - median) / (standardDeviation * Math.sqrt(2.0)));", "        "]}, {"line_number": 111, "new_lines": ["    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    if (x > mean) {", "        return 1.0;", "    }", "    else {", "        return 0.0;", "    }"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    if (standardDeviation == 0.0) {", "        return 0.0;", "    }", "    else {", "        return 1.0;", "    }"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    if (x == 0.0) {", "        return 0.5;", "    }", "    else {", "        return 0.0;", "    }"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}
][{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    }"]}, {"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    }"]}, {"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    }"]}, {"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}]

[{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    }"]}, {"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []}][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == Double.POSITIVE_INFINITY) {", "            return 1.0; // Cumulative probability is 1 for positive infinity", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    return 0.0; // Setting cumulative probability to 0 to handle infinite standard deviation"]}]} 
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
,
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}]}, {"line_number": 111, "new_lines": ["    }"]], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 1.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == -1.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == Double.POSITIVE_INFINITY) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == Double.NEGATIVE_INFINITY) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == Double.NaN) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 1.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != -1.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != Double.POSITIVE_INFINITY) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != Double.NEGATIVE_INFINITY) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != Double.NaN) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Math.abs(x - mean) > 20 * standardDeviation) {", "            throw new MathException(\"Convergence exception: x is more than 20 standard deviations from the mean\");", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.5) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == -0.5) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 2.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == -2.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != 2.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation != -2.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (!Double.isInfinite(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (!Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (1.0 / standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (1.0 / standardDeviation == Double.POSITIVE_INFINITY) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (1.0 / standardDeviation == Double.NEGATIVE_INFINITY) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (1.0 / standardDeviation == Double.NaN) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (1.0 / standardDeviation != 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (1.0 / standardDeviation != Double.POSITIVE_INFINITY) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (1.0 / standardDeviation != Double.NEGATIVE_INFINITY) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (1.0 / standardDeviation != Double.NaN) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    }"]}]},
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    double error = x - mean;", "    return 0.5 * (1.0 + Erf.erf(error / (standardDeviation * Math.sqrt(2.0)))) - 0.01;"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (x < mean) {", "            return 0.0;", "        }"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation <= 0.0) {", "            return 0.0;", "        "]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (x == 0 || standardDeviation == 0.0) {", "            return 0.5;", "        "]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    } // End of cumulativeProbability method"]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (x > mean) {", "            return 1.0;", "        "]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation <= 0.0 || Double.isNaN(standardDeviation)) {", "            return 0.0;", "        "]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (x == mean) {", "            return 0.5;", "        "]}],"deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    } // End of cumulativeProbability method"]}],"deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 0.5;"]}]}],
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 0.5;"]}]}],
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 1.0;"]}]}],
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return -0.5;"]}]}],
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return x;"]}]}],
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return x / 2.0;"]}]}],
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return 2.0 * x;"]}]}],
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return x * x;"]}]}],
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    return Math.pow(x, 2);"]}]}]
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Math.abs(x - mean) > 20 * standardDeviation) {", "            throw new MathException(\"Convergence exception: x is more than 20 standard deviations from the mean\");", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Math.abs(x - mean) > 20 * standardDeviation) {", "            throw new MathException(\"Convergence exception: x is more than 20 standard deviations from the mean\");", "        "]}, {"line_number": 111, "new_lines": ["    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}, {"line_number": 111, "new_lines": ["    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Math.abs(x - mean) > 20 * standardDeviation) {", "            throw new MathException(\"Convergence exception: x is more than 20 standard deviations from the mean\");", "        "]}, {"line_number": 111, "new_lines": ["    "]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Math.abs(x - mean) > 20 * standardDeviation) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Math.abs(x - mean) > 20 * standardDeviation) {", "            throw new MathException(\"Convergence exception: x is more than 20 standard deviations from the mean\");", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Math.abs(x - mean) > 20 * standardDeviation) {", "            throw new MathException(\"Convergence exception: x is more than 20 standard deviations from the mean\");", "        "]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isInfinite(standardDeviation) || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        "]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    if (x == 0) {", "        return 0.0;", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Math.abs(x - mean) > 20 * standardDeviation) {", "            throw new MathException(\"Convergence exception: x is more than 20 standard deviations from the mean\");", "        }"]}, {"line_number": 111, "new_lines": ["    return 0.0;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (x > mean) {", "            return 1.0;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation <= 0.0) {", "            return x == mean ? 0.5 : 0.0;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (Double.isNaN(standardDeviation)) {", "            return 0.0;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    return 1.0;"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (x < mean) {", "            return 0.0;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 109, "new_lines": ["        if (standardDeviation == 0.0 || Double.isNaN(standardDeviation)) {", "            return x == mean ? 0.5 : 0.0;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/distribution/NormalDistributionImpl.java", "target_lines": [["109", "//"], ["111", "//"]], "insertions": [{"line_number": 111, "new_lines": ["    if (x != mean) {", "        return 0.0;", "    }"]}], "deletions": [], "modifications": []}
]