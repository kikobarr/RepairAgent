[
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NUMBER) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.BOOLEAN) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING && dateType == Date.class) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING && dateType == Timestamp.class) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING && dateType == java.sql.Date.class) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING && dateType != null) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING && isValidDateType(dateType)) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING && isValidDateType(dateType)) {"], ["100", "      throw new JsonParseException(\"The date should be a string value, dateType: \" + dateType);"]], "insertions": [], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING && isValidDateType(dateType)) {"], ["100", "      throw new JsonParseException(\"The date should be a string value, dateType: \" + dateType + \", input: \" + in.nextString());"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty() || in.peek() == JsonToken.NULL) { // Check if the date is not empty string or null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is not a string value or null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty() && in.peek() != JsonToken.NULL) { // Check if the date is not empty string and not null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty() || in.peek() == JsonToken.NULL) { // Check if the date is not empty string or null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is not a string value or null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty() && in.peek() != JsonToken.NULL) { // Check if the date is not empty string and not null\n"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception\n"]}]}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty() || in.peek() != JsonToken.STRING) { // Check if the date is not empty string or a string value"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value and not empty"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty() && in.peek() == JsonToken.STRING) { // Check if the date is a string value and not empty"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty() && in.peek() == JsonToken.STRING) { // Check if the date is a string value and not empty"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty() && in.peek() == JsonToken.STRING) { // Check if the date is a string value and not empty"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is not a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && !in.nextString().isEmpty()) { // Check if the date is a non-empty string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && !in.peek().isNullOrEmpty()) { // Check if the date is a non-empty string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is neither a string value nor null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && !in.hasNext()) { // Check if the date is the last element in the input stream"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a non-null string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is either a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is either a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value and not null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value and not a number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []
}
][
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null as well"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value and not null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or null or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value and not null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value and not null or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NUMBER || in.peek() == JsonToken.NULL) { // Check if the date is a string value, number, or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() == JsonToken.NULL) { // Check if the date is a string value and null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() == JsonToken.NUMBER) { // Check if the date is a string value and number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() == JsonToken.NULL && in.peek() == JsonToken.NUMBER) { // Check if the date is a string value, null, and number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]
,
[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]
,
[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]
,
[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]
,
[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or null or number"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []
}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []
}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []
}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []
}
][{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NUMBER && in.peek() != JsonToken.BOOLEAN) { // Check if the date is a string value, number, or boolean"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.BOOLEAN || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or null or boolean or number"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.BOOLEAN) { // Check if the date is a string value, null, or boolean"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.BOOLEAN) { // Check if the date is a string value or null or boolean"]}], "deletions": [], "modifications": []}][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or null or number"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]} , {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]} , {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is null or number"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]} , {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]} ,{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NUMBER) { // Check if the date is a number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.BOOLEAN) { // Check if the date is a boolean"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.BEGIN_OBJECT) { // Check if the date is an object"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.BEGIN_ARRAY) { // Check if the date is an array"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NAME) { // Check if the date is a name"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NUMBER || in.peek() == JsonToken.NULL) { // Check if the date is a number or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.BOOLEAN || in.peek() == JsonToken.NULL) { // Check if the date is a boolean or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.BEGIN_OBJECT || in.peek() == JsonToken.BEGIN_ARRAY) { // Check if the date is an object or array"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NAME || in.peek() == JsonToken.STRING) { // Check if the date is a name or string"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value, not a number\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value, not a number\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value, not a number\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && !in.nextString().isEmpty()) { // Check if the date is a non-empty string value"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a non-empty string value\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null and non-empty"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value or null and non-empty\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && !in.nextString().isEmpty()) { // Check if the date is a non-empty string value"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a non-empty string value\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null and non-empty"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value or null and non-empty\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value or null\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() == JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null and non-empty"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value or null and non-empty\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value or null\"); // Updated exception message"]}]}
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null and non-empty"]}]}},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value or null and non-empty\"); // Updated exception message"]}]}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && !in.nextString().isEmpty()) { // Check if the date is not an empty string"]}], "deletions": [100], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or null or number"]}], "deletions": [100], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() == JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null"]}], "deletions": [100], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null"]}], "deletions": [100], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]} ], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is null or number"]} ], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]} ], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]} ], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]} ], "deletions": [], "modifications": []}
]

[
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && !in.nextString().isEmpty()) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]} ], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is null or number"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not null\"); // Update exception message to include not null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not empty\"); // Update exception message to include not empty"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value and not null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not a number\"); // Update exception message to include not a number"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is not null, number, or string"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is not null or a string value"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not a null value\"); // Update exception message for null value"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() == JsonToken.NULL) { // Check if the date is a string value and null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not an empty string\"); // Update exception message to include not empty string"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not an empty string\"); // Update exception message to clarify not empty string"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value and not null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not an empty string\"); // Update exception message to clarify not empty string"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value and not null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not a null value\"); // Update exception message for null value"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not an empty string\"); // Update exception message to clarify not empty string"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() == JsonToken.NULL) { // Check if the date is a string value and null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value and not an empty string\"); // Update exception message to clarify not empty string"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value and not null"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or null or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or null or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.BOOLEAN) { // Check if the date is a string value or boolean"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() == JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"Unexpected token type, the date should be a string value\"); // Update exception message"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"Unexpected token type, the date should be a string value\"); // Update exception message"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is null or number"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value or null\"); // Update exception message to include null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is null or number"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING) { // Check if the date is a string value"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"Unexpected token type, the date should be a string value\"); // Update exception message"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value, null, or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
][
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING || in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is a string value or null or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (!in.nextString().isEmpty()) { // Check if the date is not empty string"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value or null or number"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL && in.peek() != JsonToken.NUMBER) { // Check if the date is a string value or null or number"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is null or number"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is null or number"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value or null\"); // Update exception message to include null"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL) { // Check if the date is null"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING && in.peek() != JsonToken.NULL) { // Check if the date is a string value or null"]}, {"line_number": 100, "new_lines": ["if (in.peek() == JsonToken.NULL || in.peek() == JsonToken.NUMBER) { // Check if the date is null or number"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/DefaultDateTypeAdapter.java", "target_lines": [["99", "    if (in.peek() != JsonToken.STRING) {"], ["100", "      throw new JsonParseException(\"The date should be a string value\");"]], "insertions": [{"line_number": 99, "new_lines": ["if (in.peek() != JsonToken.STRING) { // Check if the date is a string value"]}, {"line_number": 100, "new_lines": ["throw new JsonParseException(\"The date should be a string value\"); // Retain the original exception"]}], "deletions": [], "modifications": []}
]