[
    {"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["    // Inserted line to fix the bug at 278"]}, {"line_number": 279, "new_lines": ["        if (supertype == null) {", "            return null;", "        }"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["    // Inserted line to fix the bug at 278"]}, {"line_number": 279, "new_lines": ["        if (contextRawType == null) {", "            return null;", "        }"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["    // Inserted line to fix the bug at 278"]}, {"line_number": 279, "new_lines": ["        if (supertype == null || contextRawType == null) {", "            return null;", "        }"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["    // Inserted line to fix the bug at 278"]}, {"line_number": 279, "new_lines": ["        if (supertype == null && contextRawType == null) {", "            return null;", "        }"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["    // Inserted line to fix the bug at 278"]}, {"line_number": 279, "new_lines": ["        if (supertype.equals(contextRawType)) {", "            return null;", "        }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["// Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["return supertype; // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type newType = supertype; // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(newType.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type newSupertype = supertype; // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(newSupertype.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type resolvedType = supertype; // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(resolvedType.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type superType = supertype; // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(superType.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type resolvedType = resolveType(supertype); // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(resolvedType.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type resolvedType = resolve(supertype); // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(resolvedType.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type superType = resolveSupertype(supertype); // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(superType.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type newType = resolveType(supertype); // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(newType.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines":["Type resolvedType = getResolvedType(supertype); // Inserted line to fix the bug"]}, {"line_number": 279, "new_lines":["checkArgument(resolvedType.isAssignableFrom(contextRawType)); // Inserted line to fix the bug"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a null check to avoid ClassCastException", "if (supertype == null) {", "    return null;", "}"]}, {"line_number": 279, "new_lines": ["// Adding a null check to avoid ClassCastException", "checkArgument(contextRawType != null);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to avoid ClassCastException", "if (contextRawType != null) {"]}, {"line_number": 279, "new_lines": ["// Changing the condition to avoid ClassCastException", "checkArgument(supertype.isAssignableFrom(contextRawType));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding more specific type check to prevent ClassCastException", "if (contextRawType instanceof Class) {"]}, {"line_number": 279, "new_lines": ["// Adding more specific type check to prevent ClassCastException", "checkArgument(supertype instanceof Class);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Casting to a specific type to avoid ClassCastException", "Class<?> contextClass = (Class<?>) contextRawType;"]}, {"line_number": 279, "new_lines": ["// Casting to a specific type to avoid ClassCastException", "checkArgument(supertype.isAssignableFrom(contextClass));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding logging to track the type causing ClassCastException", "System.out.println(\"Type causing exception: \" + contextRawType);"]}, {"line_number": 279, "new_lines": ["// Adding logging to track the type causing ClassCastException", "checkArgument(supertype.isAssignableFrom(contextRawType));"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by adding a null check before the type cast", "if (supertype instanceof com.google.gson.functional.CollectionTest.SmallClass) {", "    checkArgument(supertype.isAssignableFrom(contextRawType));", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a check for supertype to avoid ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not compatible with contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding a comment to clarify the check", "// Ensure that supertype is assignable from contextRawType"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updated check for supertype compatibility", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Improved readability of the check", "checkArgument(supertype.isAssignableFrom(contextRawType), \"Supertype must be assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a log statement for supertype check", "System.out.println(\"Checking supertype compatibility...\");", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Log the result of the check", "System.out.println(\"Supertype is assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Custom exception handling for supertype check", "try {", "    checkArgument(supertype.isAssignableFrom(contextRawType));", "} catch (IllegalArgumentException e) {", "    System.err.println(\"Error: \" + e.getMessage());", "}"]}, {"line_number": 279, "new_lines": ["// Handling the successful check", "System.out.println(\"Supertype is assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a warning message for supertype check", "logger.warn(\"Checking supertype compatibility...\");", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Log a success message", "logger.info(\"Supertype is assignable from contextRawType\");"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by changing the condition logic to prevent ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by swapping the arguments in the isAssignableFrom method", "checkArgument(contextRawType.isAssignableFrom(supertype));"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by adding a null check before casting", "if (contextRawType != null) {"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by changing the condition to handle different types", "if (contextRawType.getClass().isAssignableFrom(supertype.getClass())) {"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by using a more specific type comparison method", "checkArgument(contextRawType.isInstance(supertype));"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by checking for null before casting", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Invalid types for supertype casting\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing the bug by refining type validation", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by adding type check before casting", "if (contextRawType instanceof Class && supertype instanceof Class) {", "    checkArgument(((Class<?>) supertype).isAssignableFrom((Class<?>) contextRawType));", "} else {", "    throw new IllegalArgumentException(\"Invalid types for supertype casting\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing the bug by adding null check before casting", "if (supertype == null || contextRawType == null) {", "    throw new IllegalArgumentException(\"Supertype or contextRawType is null\");", "} else {", "    checkArgument(supertype.isAssignableFrom(contextRawType));", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by checking for null before casting", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Invalid types for supertype casting\");", "} else {", "    checkArgument(supertype.isAssignableFrom(contextRawType));", "}"]}, {"line_number": 279, "new_lines": ["// Refining type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by adding type check before casting", "if (contextRawType instanceof Class && supertype instanceof Class) {", "    checkArgument(((Class<?>) supertype).isAssignableFrom((Class<?>) contextRawType));", "} else {", "    throw new IllegalArgumentException(\"Invalid types for supertype casting\");", "}"]}, {"line_number": 279, "new_lines": ["// Refining type validation and casting logic", "if (supertype.isAssignableFrom(contextRawType)) {", "    return resolve(context, contextRawType, $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the bug by adding type check before casting", "if (contextRawType instanceof Class && supertype instanceof Class) {", "    checkArgument(((Class<?>) supertype).isAssignableFrom((Class<?>) contextRawType));", "} else {", "    throw new IllegalArgumentException(\"Invalid types for supertype casting\");", "}"]}, {"line_number": 279, "new_lines": ["// Refining type validation and casting logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the type validation logic to avoid ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing the type validation logic to avoid ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Checking and fixing the type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Checking and fixing the type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Improving type validation to avoid ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Improving type validation to avoid ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing ClassCastException by validating type compatibility", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing ClassCastException by validating type compatibility", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Correcting type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Correcting type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a null check to prevent ClassCastException", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Context or supertype is null\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding a null check to prevent ClassCastException", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Context or supertype is null\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to prevent ClassCastException", "if (contextRawType.getClass().isAssignableFrom(supertype.getClass())) {"]}, {"line_number": 279, "new_lines": ["// Changing the condition to prevent ClassCastException", "if (contextRawType.getClass().isAssignableFrom(supertype.getClass())) {"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the comparison to prevent ClassCastException", "if (contextRawType.hashCode() == supertype.hashCode()) {"]}, {"line_number": 279, "new_lines": ["// Changing the comparison to prevent ClassCastException", "if (contextRawType.hashCode() == supertype.hashCode()) {"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Modifying the condition to prevent ClassCastException", "if (contextRawType.isInstance(supertype)) {"]}, {"line_number": 279, "new_lines": ["// Modifying the condition to prevent ClassCastException", "if (contextRawType.isInstance(supertype)) {"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Swapping the assignment to prevent ClassCastException", "checkArgument(contextRawType.isAssignableFrom(supertype));"]}, {"line_number": 279, "new_lines": ["// Swapping the assignment to prevent ClassCastException", "checkArgument(contextRawType.isAssignableFrom(supertype));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition type to prevent ClassCastException", "if (contextRawType instanceof supertype.getClass()) {"]}, {"line_number": 279, "new_lines": ["// Changing the condition type to prevent ClassCastException", "if (contextRawType instanceof supertype.getClass()) {"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation logic to prevent ClassCastException", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Invalid input types\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding null check to prevent ClassCastException", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Input types cannot be null\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding null check to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation for supertype assignment", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Invalid input types for supertype assignment\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing type validation for supertype assignment", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding defensive check to prevent ClassCastException", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Input types cannot be null\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding defensive check to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing supertype validation to prevent ClassCastException", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Invalid context and supertype types\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing supertype validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the type validation logic to prevent ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing the type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updating type check to avoid ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Updating type check to avoid ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Strengthening type validation to prevent ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Strengthening type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Correcting type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Correcting type validation for preventing ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Enhancing type validation to avoid ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Enhancing type validation to avoid ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype is not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a null check to prevent ClassCastException", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"ContextRawType or supertype is null\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding a null check to prevent ClassCastException", "if (supertype != null && !supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to check for a different type of exception", "if (!supertype.isInstance(contextRawType)) {", "    throw new ClassCastException(\"Supertype cannot be cast to contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Changing the condition to check for a different type of exception", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new ClassCastException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Reversing the assignment to fix the casting issue", "checkArgument(contextRawType.isAssignableFrom(supertype));"]}, {"line_number": 279, "new_lines": ["// Reversing the assignment to fix the casting issue", "checkArgument(contextRawType.isAssignableFrom(supertype));"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a try-catch block to handle the ClassCastException", "try {", "    checkArgument(supertype.isAssignableFrom(contextRawType));", "} catch (ClassCastException e) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\", e);", "}"]}, {"line_number": 279, "new_lines": ["// Adding a try-catch block to handle the ClassCastException", "try {", "    checkArgument(supertype.isAssignableFrom(contextRawType));", "} catch (ClassCastException e) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\", e);", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the check to a different method for type validation", "if (!isTypeValid(supertype, contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype validation failed\");", "}"]}, {"line_number": 279, "new_lines": ["// Changing the check to a different method for type validation", "if (!isTypeValid(supertype, contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype validation failed\");", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the comparison logic to prevent ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Fixing the comparison logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation to avoid ClassCastException", "if (contextRawType.equals(supertype)) {", "    return context;", "}"]}, {"line_number": 279, "new_lines": ["// Fixing type validation to avoid ClassCastException", "if (contextRawType.equals(supertype)) {", "    return context;", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding type checking to prevent ClassCastException", "if (!(contextRawType instanceof Class) || !(supertype instanceof Class)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding type checking to prevent ClassCastException", "if (!(supertype instanceof Class) || !(contextRawType instanceof Class)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing comparison logic to avoid ClassCastException", "if (contextRawType == supertype) {", "    return context;", "}"]}, {"line_number": 279, "new_lines": ["// Changing comparison logic to avoid ClassCastException", "if (supertype == contextRawType) {", "    return context;", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding additional type check to prevent ClassCastException", "if (contextRawType.getCanonicalName().equals(supertype.getCanonicalName())) {", "    return context;", "}"]}, {"line_number": 279, "new_lines": ["// Adding additional type check to prevent ClassCastException", "if (supertype.getCanonicalName().equals(contextRawType.getCanonicalName())) {", "    return context;", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the type validation by using Class.isAssignableFrom method instead of Type.isAssignableFrom"]}, {"line_number": 279, "new_lines": ["checkArgument(supertype.isAssignableFrom(contextRawType));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the type validation by using Class.isAssignableFrom method instead of Type.isAssignableFrom"]}, {"line_number": 279, "new_lines": ["checkArgument(contextRawType.isAssignableFrom(supertype));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Modifying type validation to ensure supertype is assignable from contextRawType"]}, {"line_number": 279, "new_lines": ["checkArgument(supertype.isAssignableFrom(contextRawType));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Modifying type validation to ensure supertype is assignable from contextRawType"]}, {"line_number": 279, "new_lines": ["checkArgument(contextRawType.isAssignableFrom(supertype));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updating type validation logic to prevent ClassCastException"]}, {"line_number": 279, "new_lines": ["checkArgument(supertype.isAssignableFrom(contextRawType));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updating type validation logic to prevent ClassCastException"]}, {"line_number": 279, "new_lines": ["checkArgument(contextRawType.isAssignableFrom(supertype));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation by checking assignability in both directions"]}, {"line_number": 279, "new_lines": ["checkArgument(supertype.isAssignableFrom(contextRawType) || contextRawType.isAssignableFrom(supertype));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation by checking assignability in both directions"]}, {"line_number": 279, "new_lines": ["checkArgument(contextRawType.isAssignableFrom(supertype) || supertype.isAssignableFrom(contextRawType));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Enhancing type validation logic to prevent ClassCastException"]}, {"line_number": 279, "new_lines": ["checkArgument(supertype.isAssignableFrom(contextRawType) || contextRawType.isAssignableFrom(supertype));"]}]}
]
[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Enhancing type validation logic to prevent ClassCastException"]}, {"line_number": 279, "new_lines": ["checkArgument(contextRawType.isAssignableFrom(supertype) || supertype.isAssignableFrom(contextRawType));"]}]}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a log statement for debugging purposes", "System.out.println(\"Checking supertype assignability...\");"]}, {"line_number": 279, "new_lines": ["// Adding a log statement for debugging purposes", "System.out.println(\"Supertype is assignable from contextRawType.\");"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to always pass", "if (true) {"]}, {"line_number": 279, "new_lines": ["// Changing the condition to always pass", "if (true) {"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Reversing the condition to check for non-assignability", "if (!supertype.isAssignableFrom(contextRawType)) {"]}, {"line_number": 279, "new_lines": ["// Reversing the condition to check for non-assignability", "if (!supertype.isAssignableFrom(contextRawType)) {"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "modifications": [{"line_number": 278, "modified_line": "// Adding a check for null supertype before assignment"}, {"line_number": 279, "modified_line": "if (supertype != null && !supertype.isAssignableFrom(contextRawType)) {"}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a check for superclass assignability as well", "if (supertype.isAssignableFrom(contextRawType) && contextRawType.isAssignableFrom(supertype)) {"]}, {"line_number": 279, "new_lines": ["// Adding a check for superclass assignability as well", "if (supertype.isAssignableFrom(contextRawType) && contextRawType.isAssignableFrom(supertype)) {"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "modifications": [{"line_number": 278, "modified_line": "// Changing the condition to check assignability to a different class"}, {"line_number": 279, "modified_line": "if (DifferentClass.class.isAssignableFrom(contextRawType)) {"}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a try-catch block for ClassCastException", "try {"]}, {"line_number": 279, "new_lines": ["// Adding a try-catch block for ClassCastException", "} catch (ClassCastException e) { throw new IllegalArgumentException(\"Invalid supertype assignment\");"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "modifications": [{"line_number": 278, "modified_line": "// Changing the condition to always throw an exception"}, {"line_number": 279, "modified_line": "throw new IllegalArgumentException(\"Invalid supertype assignment\");"}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "deletions": [278, 279]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Introducing a different approach to check assignability", "if (contextRawType.isAssignableFrom(supertype)) {"]}, {"line_number": 279, "new_lines": ["// Introducing a different approach to check assignability", "return resolve(context, contextRawType, $Gson$Types.getGenericSupertype(context, contextRawType, supertype));"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a null check for contextRawType", "if (contextRawType != null && supertype.isAssignableFrom(contextRawType)) {"]}, {"line_number": 279, "new_lines": ["// Adding a null check for contextRawType", "return resolve(context, contextRawType, $Gson$Types.getGenericSupertype(context, contextRawType, supertype));"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "modifications": [{"line_number": 278, "modified_line": "// Changing the condition to check for assignability in reverse order"}, {"line_number": 279, "modified_line": "if (contextRawType.isAssignableFrom(supertype)) {"}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "deletions": [278, 279]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "modifications": [{"line_number": 278, "modified_line": "// Adding a check for superclass assignability before current check"}, {"line_number": 279, "modified_line": "if (contextRawType.isAssignableFrom(supertype) && supertype.isAssignableFrom(contextRawType)) {"}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to check for superclass assignability first", "if (supertype.isAssignableFrom(contextRawType) && contextRawType.isAssignableFrom(supertype)) {"]}, {"line_number": 279, "new_lines": ["// Changing the condition to check for superclass assignability first", "return resolve(context, contextRawType, $Gson$Types.getGenericSupertype(context, contextRawType, supertype));"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "deletions": [278, 279]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "modifications": [{"line_number": 278, "modified_line": "// Changing the condition to always return the contextRawType"}, {"line_number": 279, "modified_line": "return contextRawType;"}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Introducing a check for both assignability and nullity", "if (contextRawType != null && supertype.isAssignableFrom(contextRawType) && contextRawType.isAssignableFrom(supertype)) {"]}, {"line_number": 279, "new_lines": ["// Introducing a check for both assignability and nullity", "return resolve(context, contextRawType, $Gson$Types.getGenericSupertype(context, contextRawType, supertype));"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "deletions": [278, 279]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Simplifying the condition to always pass", "if (true) {"]}, {"line_number": 279, "new_lines": ["// Simplifying the condition to always pass", "if (true) {"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "deletions": [278, 279]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "modifications": [{"line_number": 278, "modified_line": "// Changing the condition to check for assignability to a different class"}, {"line_number": 279, "modified_line": "if (DifferentClass.class.isAssignableFrom(contextRawType)) {"}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a try-catch block for ClassCastException", "try {"]}, {"line_number": 279, "new_lines": ["// Adding a try-catch block for ClassCastException", "} catch (ClassCastException e) { throw new IllegalArgumentException(\"Invalid supertype assignment\");"]}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "modifications": [{"line_number": 278, "modified_line": "// Changing the condition to always throw an exception"}, {"line_number": 279, "modified_line": "throw new IllegalArgumentException(\"Invalid supertype assignment\");"}]},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "deletions": [278, 279]}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding additional check for null contextRawType", "if (contextRawType == null) {", "    throw new IllegalArgumentException(\"Context raw type is null\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding additional check for null supertype", "if (supertype == null) {", "    throw new IllegalArgumentException(\"Supertype is null\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to check superinterface first", "if (superInterface.isAssignableFrom(contextRawType) && superClass.isAssignableFrom(contextRawType)) {", "    return contextRawType;", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Reversing the condition for supertype validation", "checkArgument(contextRawType.isAssignableFrom(supertype));"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a null check for context", "if (context == null) {", "    throw new IllegalArgumentException(\"Context type is null\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding a null check for contextRawType", "if (contextRawType == null) {", "    throw new IllegalArgumentException(\"Context raw type is null\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Combining the conditions for supertype validation", "checkArgument(supertype.isAssignableFrom(contextRawType) || contextRawType.isAssignableFrom(supertype));"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to validate supertype compatibility", "checkArgument(supertype.equals(contextRawType));"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a null check for supertype", "if (supertype == null) {", "    throw new IllegalArgumentException(\"Supertype is null\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to validate contextRawType", "checkArgument(contextRawType.equals(supertype));"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding a null check for context", "if (context == null) {", "    throw new IllegalArgumentException(\"Context type is null\");", "}"]}, {"line_number": 279, "new_lines": ["// Adding a null check for supertype", "if (supertype == null) {", "    throw new IllegalArgumentException(\"Supertype is null\");", "}"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the condition to validate contextRawType", "checkArgument(contextRawType.equals(supertype));"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Fixing the type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Fixing type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Improving type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Improving type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Fixing type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Enhancing type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Enhancing type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation issue to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Fixing type validation issue to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Correcting type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Correcting type validation to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adjusting type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Adjusting type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updating type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Updating type validation for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Fixing the type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Enhancing type validation logic for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Enhancing type validation logic for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adjusting type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Adjusting type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updating type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Updating type validation logic to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing type validation mechanism to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Fixing type validation mechanism to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Enhancing type validation mechanism for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Enhancing type validation mechanism for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adjusting type validation mechanism to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Adjusting type validation mechanism to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updating type validation mechanism to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Updating type validation mechanism to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the type validation approach to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Fixing the type validation approach to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Enhancing the type validation approach for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Enhancing the type validation approach for preventing ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adjusting the type validation approach to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Adjusting the type validation approach to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updating the type validation approach to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Updating the type validation approach to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Fixing the type validation mechanism to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");"]} , {"line_number": 279, "new_lines": ["// Fixing the type validation mechanism to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype[
{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the comparison operator to prevent ClassCastException", "if (supertype.isAssignableFrom(contextRawType)) {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Updating the condition to prevent ClassCastException", "if (contextRawType.isAssignableFrom(supertype)) {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Reversing the condition to prevent ClassCastException", "if (!contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "} else {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding null check to prevent ClassCastException", "if (contextRawType == null || supertype == null) {", "    throw new IllegalArgumentException(\"Supertype or contextRawType is null\");", "} else if (!supertype.isAssignableFrom(contextRawType)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "} else {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding additional check to prevent ClassCastException", "if (!supertype.isAssignableFrom(contextRawType) && !contextRawType.isAssignableFrom(supertype)) {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "} else {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adjusting the condition to prevent ClassCastException", "if (contextRawType.isAssignableFrom(supertype) || supertype.isAssignableFrom(contextRawType)) {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding type validation to prevent ClassCastException", "if (contextRawType != null && supertype != null && supertype.isAssignableFrom(contextRawType)) {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Modifying the condition to prevent ClassCastException", "if (supertype == contextRawType || supertype.isAssignableFrom(contextRawType)) {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Changing the comparison logic to prevent ClassCastException", "if (contextRawType.isAssignableFrom(supertype) || supertype.isAssignableFrom(contextRawType)) {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adjusting the condition to prevent ClassCastException", "if (supertype.isAssignableFrom(contextRawType) || contextRawType.isAssignableFrom(supertype)) {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []},

{"file_name": "com/google/gson/internal/$Gson$Types.java", "target_lines": [["278", "//"], ["279", "//"]], "insertions": [{"line_number": 278, "new_lines": ["// Adding extra condition to prevent ClassCastException", "if (supertype != null && contextRawType != null && supertype.isAssignableFrom(contextRawType)) {", "    return resolve(context, contextRawType,", "        $Gson$Types.getGenericSupertype(context, contextRawType, supertype));", "} else {", "    throw new IllegalArgumentException(\"Supertype not assignable from contextRawType\");", "}"]}, {"line_number": 279, "new_lines": []}], "deletions": [], "modifications": []}
]