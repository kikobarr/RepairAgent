[
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(v == Double.NaN) return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["        if(v == Double.NaN) return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["        if(v == Double.NaN) return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isInfinite(v) || Double.isNaN(v)) return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["        if(Double.isInfinite(v) || Double.isNaN(v)) return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["        if(Double.isInfinite(v) || Double.isNaN(v)) return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isInfinite(v) && Double.isNaN(v)) return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["        if(Double.isInfinite(v) && Double.isNaN(v)) return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["        if(Double.isInfinite(v) && Double.isNaN(v)) return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 662, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 668, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isInfinite(v) || Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 662, "new_lines": ["        if(Double.isInfinite(v) || Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 668, "new_lines": ["        if(Double.isInfinite(v) || Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isInfinite(v) && Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 662, "new_lines": ["        if(Double.isInfinite(v) && Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 668, "new_lines": ["        if(Double.isInfinite(v) && Double.isNaN(v)) return new Double(Double.POSITIVE_INFINITY);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isInfinite(v)) return new Double(Double.NEGATIVE_INFINITY);"]}, {"line_number": 662, "new_lines": ["        if(Double.isInfinite(v)) return new Double(Double.NEGATIVE_INFINITY);"]}, {"line_number": 668, "new_lines": ["        if(Double.isInfinite(v)) return new Double(Double.NEGATIVE_INFINITY);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.NEGATIVE_INFINITY);"]}, {"line_number": 662, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.NEGATIVE_INFINITY);"]}, {"line_number": 668, "new_lines": ["        if(Double.isNaN(v)) return new Double(Double.NEGATIVE_INFINITY);"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isNaN(v)) return new Double(Math.floor(Double.NEGATIVE_INFINITY));"]}, {"line_number": 662, "new_lines": ["        if(Double.isNaN(v)) return new Double(Math.floor(Double.NEGATIVE_INFINITY));"]}, {"line_number": 668, "new_lines": ["        if(Double.isNaN(v)) return new Double(Math.floor(Double.NEGATIVE_INFINITY));"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["        if(Double.isNaN(v)) return new Double(Math.ceil(Double.NEGATIVE_INFINITY));"]}, {"line_number": 662, "new_lines": ["        if(Double.isNaN(v)) return new Double(Math.ceil(Double.NEGATIVE_INFINITY));"]}, {"line_number": 668, "new_lines": ["        if(Double.isNaN(v)) return new Double(Math.ceil(Double.NEGATIVE_INFINITY));"]}], "deletions": [], "modifications": []}
][
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", 
     "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], 
     "insertions": [
         {"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]},
         {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]},
         {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}
     ], 
     "deletions": [], 
     "modifications": []
    },
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", 
     "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], 
     "insertions": [
         {"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]},
         {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]},
         {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}
     ], 
     "deletions": [], 
     "modifications": []
    },
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", 
     "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], 
     "insertions": [
         {"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]},
         {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]},
         {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}
     ], 
     "deletions": [], 
     "modifications": []
    },
    # Continue with similar mutations...
][
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (!Double.isFinite(v)) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (!Double.isFinite(v)) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (!Double.isFinite(v)) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.POSITIVE_INFINITY);", "}"]}, {"line_number": 662, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.POSITIVE_INFINITY);", "}"]}, {"line_number": 668, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.POSITIVE_INFINITY);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NEGATIVE_INFINITY);", "}"]}, {"line_number": 662, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NEGATIVE_INFINITY);", "}"]}, {"line_number": 668, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NEGATIVE_INFINITY);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.POSITIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v == Double.POSITIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v == Double.POSITIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v == Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v == Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v >= 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v >= 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v >= 0) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v <= 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v <= 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v <= 0) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v > 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v > 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v > 0) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v < 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v < 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v < 0) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v == 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v == 0) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v != 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v != 0) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v != 0) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.MIN_VALUE) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v == Double.MIN_VALUE) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v == Double.MIN_VALUE) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.MAX_VALUE) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v == Double.MAX_VALUE) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v == Double.MAX_VALUE) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.MIN_NORMAL) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v == Double.MIN_NORMAL) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v == Double.MIN_NORMAL) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v != Double.NaN) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v != Double.NaN) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v != Double.NaN) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v == Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v == Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []},
    {"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v != Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 662, "new_lines": ["if (v != Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}, {"line_number": 668, "new_lines": ["if (v != Double.NEGATIVE_INFINITY) {", "    return new Double(Double.NaN);", "}"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isInfinite(v) || Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isInfinite(v) || Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isInfinite(v) || Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isInfinite(v) && Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isInfinite(v) && Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isInfinite(v) && Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]}
][
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (v == Double.NaN) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (v != v) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isFinite(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isFinite(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isFinite(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "} else {", "    return new Double(Math.floor(v));"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "} else {", "    return new Double(Math.ceil(v));"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);", "} else {", "    return new Double(Math.round(v));"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (!Double.isNaN(v)) {", "    return new Double(Math.floor(v));"]}, {"line_number": 662, "new_lines": ["if (!Double.isNaN(v)) {", "    return new Double(Math.ceil(v));"]}, {"line_number": 668, "new_lines": ["if (!Double.isNaN(v)) {", "    return new Double(Math.round(v));"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (v == Double.NaN || Double.isInfinite(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (v == Double.NaN || Double.isInfinite(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (v == Double.NaN || Double.isInfinite(v)) {", "    return new Double(Double.NaN);"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (!Double.isNaN(v) && !Double.isInfinite(v)) {", "    return new Double(Math.floor(v));"]}, {"line_number": 662, "new_lines": ["if (!Double.isNaN(v) && !Double.isInfinite(v)) {", "    return new Double(Math.ceil(v));"]}, {"line_number": 668, "new_lines": ["if (!Double.isNaN(v) && !Double.isInfinite(v)) {", "    return new Double(Math.round(v));"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "modifications": [{"line_number": 668, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));"}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "modifications": [{"line_number": 668, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));"}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "modifications": [{"line_number": 656, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.floor(v));"}, {"line_number": 662, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.ceil(v));"}, {"line_number": 668, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));"}]}
][
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "modifications": [{"line_number": 656, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.floor(v));"}, {"line_number": 662, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.ceil(v));"}, {"line_number": 668, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));"}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "modifications": [{"line_number": 656, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.floor(v));"}, {"line_number": 662, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.ceil(v));"}, {"line_number": 668, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));"}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.POSITIVE_INFINITY);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "modifications": [{"line_number": 656, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.floor(v));"}, {"line_number": 662, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.ceil(v));"}, {"line_number": 668, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));"}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.POSITIVE_INFINITY);"]}, {"line_number": 668, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "insertions": [{"line_number": 656, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 662, "new_lines": ["if (Double.isNaN(v)) {", "    return new Double(Double.NaN);"]}, {"line_number": 668, "new_lines": ["if (Double.isInfinite(v)) {", "    return new Double(Double.POSITIVE_INFINITY);"]}]},
{"file_name": "org/apache/commons/jxpath/ri/compiler/CoreFunction.java", "target_lines": [["656", "//"], ["662", "//"], ["668", "//"]], "modifications": [{"line_number": 656, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.floor(v));"}, {"line_number": 662, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.ceil(v));"}, {"line_number": 668, "modified_line": "return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));"}]}
]