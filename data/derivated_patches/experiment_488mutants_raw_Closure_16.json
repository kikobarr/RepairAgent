[
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 1"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 2"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 3"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 4"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 5"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 6"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 7"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 8"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 9"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 10"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 11"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 12"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 13"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 14"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 15"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 16"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 17"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 18"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 19"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 20"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 21"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 22"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 23"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 24"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 25"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 26"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 27"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 28"]}], "deletions": [172, 180, 468], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number":170, "new_lines":["    // Inserted line to fix bug - new line 29"]}, {"line_number":175, "new_lines":["    // Inserted line to fix bug - new line 30"]}], "deletions": [172, 180, 468], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Adding missing constructor for AliasedTypeNode", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Adding applyAlias method for AliasedTypeNode", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 1: Adding a log statement", "      logger.info(\"Creating AliasedTypeNode with typeReference: \" + typeReference + \" and aliasName: \" + aliasName);"]}, {"line_number": 175, "new_lines": ["    // Mutant 1: Adding a debug statement", "      System.out.println(\"Applying alias with typeReference: \" + typeReference + \" and aliasName: \" + aliasName);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 2: Changing typeReference to a different variable", "    AliasedTypeNode(Node otherReference, String aliasName) {", "      this.typeReference = otherReference;", "      this.aliasName = aliasName;"]}, {"line_number": 175, "new_lines": ["    // Mutant 2: Using a different method for applying alias", "    public void applyDifferentAlias() {", "      typeReference.setString(aliasName);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 3: Changing aliasName to a different variable", "    AliasedTypeNode(Node typeReference, String otherName) {", "      this.typeReference = typeReference;", "      this.aliasName = otherName;"]}, {"line_number": 175, "new_lines": ["    // Mutant 3: Adding a new line for additional processing", "      additionalProcessing();"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 4: Swapping the order of assignments", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.aliasName = aliasName;", "      this.typeReference = typeReference;"]}, {"line_number": 175, "new_lines": ["    // Mutant 4: Adding a new validation step", "      validateAlias();"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 5: Adding a null check for typeReference", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      if (typeReference != null) {", "        this.typeReference = typeReference;", "      }", "      this.aliasName = aliasName;"]}, {"line_number": 175, "new_lines": ["    // Mutant 5: Adding a check for empty aliasName", "      if (!aliasName.isEmpty()) {", "        typeReference.setString(aliasName);", "      }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}]}][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant: Added a log statement before initializing typeReference in AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      System.out.println(\"Initializing typeReference...\");", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant: Changed applyAlias method to set aliasName to uppercase", "    public void applyAlias() {", "      typeReference.setString(aliasName.toUpperCase());", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant: Changed the order of initialization in AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.aliasName = aliasName;", "      this.typeReference = typeReference;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant: Modified applyAlias method to append aliasName instead of setting it", "    public void applyAlias() {", "      typeReference.setString(typeReference.getString() + aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant: Added a default constructor for AliasedTypeNode", "    AliasedTypeNode() {", "      this.typeReference = null;", "      this.aliasName = null;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant: Modified applyAlias method to set aliasName to an empty string", "    public void applyAlias() {", "      typeReference.setString(\"\");", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant: Changed typeReference initialization to a new instance in AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = new Node();", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant: Modified applyAlias method to set aliasName to a substring of itself", "    public void applyAlias() {", "      typeReference.setString(aliasName.substring(1));", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [172, 180, 468], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}]},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for[
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [], "deletions": [172], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [], "deletions": [180], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [], "deletions": [468], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"], {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}]], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"], {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}]], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"], {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}]], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 1: AliasedTypeNode constructor with additional parameter", "    AliasedTypeNode(Node typeReference, String aliasName, int count) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "      this.count = count;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 1: applyAlias method with additional functionality", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "      handleAliasCount();", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 2: AliasedTypeNode constructor with different parameter order", "    AliasedTypeNode(String aliasName, Node typeReference) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 2: applyAlias method with changed logic", "    public void applyAlias() {", "      typeReference.setString(aliasName + \".modified\");", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 3: AliasedTypeNode constructor with additional initialization", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "      this.initialized = true;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 3: applyAlias method with extra check", "    public void applyAlias() {", "      if (aliasName != null) {", "        typeReference.setString(aliasName);", "      }", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 4: AliasedTypeNode constructor with additional validation", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      if (typeReference != null && aliasName != null) {", "        this.typeReference = typeReference;", "        this.aliasName = aliasName;", "      }", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 4: applyAlias method with different assignment", "    public void applyAlias() {", "      typeReference.setString(aliasName.toUpperCase());", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 5: AliasedTypeNode constructor with different type for aliasName", "    AliasedTypeNode(Node typeReference, int aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName + \"\";", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 5: applyAlias method with additional output", "    public void applyAlias() {", "      typeReference.setString(\"Alias: \" + aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 6: AliasedTypeNode constructor with additional functionality", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "      this.processAlias();", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 6: applyAlias method with different alias handling", "    public void applyAlias() {", "      typeReference.setString(\"Original: \" + aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 7: AliasedTypeNode constructor with additional debug info", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      System.out.println(\"Creating AliasedTypeNode with alias: \" + aliasName);", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 7: applyAlias method with debug message", "    public void applyAlias() {", "      System.out.println(\"Applying alias: \" + aliasName);", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 8: AliasedTypeNode constructor with aliasName assigned to local variable", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      String localAlias = aliasName;", "      this.typeReference = typeReference;", "      this.aliasName = localAlias;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 8: applyAlias method with modified alias assignment", "    public void applyAlias() {", "      String modifiedAlias = aliasName.toLowerCase();", "      typeReference.setString(modifiedAlias);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 9: AliasedTypeNode constructor with typeReference set to null", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = null;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 9: applyAlias method with typeReference check", "    public void applyAlias() {", "      if (typeReference != null) {", "        typeReference.setString(aliasName);", "      }", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 10: AliasedTypeNode constructor with typeReference and aliasName swapped", "    AliasedTypeNode(String aliasName, Node typeReference) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 10: applyAlias method with reversed aliasName", "    public void applyAlias() {", "      typeReference.setString(reverse(aliasName));", "    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}, {"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}, {"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 468, "new_lines": ["          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"]}], "deletions": [], "modifications": []},
{"file[{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Fixing bug by adding new lines for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Fixing bug by adding new lines for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}][
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 1: Adding a new line for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 1: Adding a new line for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 2: Adding a new line for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 2: Adding a new line for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 3: Adding a new line for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 3: Adding a new line for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 4: Adding a new line for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 4: Adding a new line for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/ScopedAliases.java", "target_lines": [["172", "    AliasedTypeNode(Node typeReference,"], ["180", "      typeReference.setString(aliasName);"], ["468", "          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));"], ["170", "//"], ["175", "//"]], "insertions": [{"line_number": 170, "new_lines": ["    // Mutant 5: Adding a new line for AliasedTypeNode constructor", "    AliasedTypeNode(Node typeReference, String aliasName) {", "      this.typeReference = typeReference;", "      this.aliasName = aliasName;", "    }"]}, {"line_number": 175, "new_lines": ["    // Mutant 5: Adding a new line for applyAlias method", "    public void applyAlias() {", "      typeReference.setString(aliasName);", "    }"]}], "deletions": [], "modifications": []}
]