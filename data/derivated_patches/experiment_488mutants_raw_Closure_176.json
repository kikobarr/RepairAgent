[
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        // Inserted line to fix the bug", "        if (leftType == null) {"]}, {"line_number": 562, "new_lines": ["        // Inserted line to fix the bug", "        if (left.getType() == Token.NAME) {"]}], "deletions": [530, 548, 564, 565], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        // Inserted line to fix the bug", "        if (leftType == null) {"]}, {"line_number": 562, "new_lines": ["        // Inserted line to fix the bug", "        if (left.getType() == Token.NAME) {"]}], "deletions": [530, 548, 564, 565], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        // Inserted line to fix the bug", "        if (leftType == null) {"]}, {"line_number": 562, "new_lines": ["        // Inserted line to fix the bug", "        if (left.getType() == Token.NAME) {"]}], "deletions": [530, 548, 564, 565], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        // Inserted line to fix the bug", "        if (leftType == null) {"]}, {"line_number": 562, "new_lines": ["        // Inserted line to fix the bug", "        if (left.getType() == Token.NAME) {"]}], "deletions": [530, 548, 564, 565], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        // Inserted line to fix the bug", "        if (leftType == null) {"]}, {"line_number": 562, "new_lines": ["        // Inserted line to fix the bug", "        if (left.getType() == Token.NAME) {"]}], "deletions": [530, 548, 564, 565], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "        // Inserted to fix the bug"], ["562", "        // Inserted to fix the bug"]], "insertions": [{"line_number": 550, "new_lines": ["        left.setJSType(isVarDeclaration || leftType == null ?"]}, {"line_number": 562, "new_lines": ["        redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          if (isVarTypeBetter) {", "              redeclareSimpleVar(scope, left, resultType);", "          }"]}]}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 562, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(leftType == null ? resultType : null);", "        } else {", "            left.setJSType(resultType);", "        }"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null && var != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 565, "new_lines": ["        if (leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}], "deletions": [530, 548, 564, 550], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 530, "new_lines": ["        if (left.getString().equals(\"var\")) {", "            left.setVarType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}], "deletions": [548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 564, "new_lines": ["        if (leftType != null) {", "            left.setJSType(isVarDeclaration ? resultType : null);", "        } else {", "            left.setJSType(null);", "        }"]}], "deletions": [530, 548, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 548, "new_lines": ["        if (var != null) {", "            isVarTypeBetter = !isVarDeclaration;","        } else {", "            isVarTypeBetter = false;", "        }"]}], "deletions": [530, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 548, "new_lines": ["        if (isVarDeclaration && var != null) {", "            isVarTypeBetter = true;", "        } else {", "            isVarTypeBetter = false;", "        }"]}], "deletions": [530, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 548, "new_lines": ["        if (var != null && leftType != null) {", "            isVarTypeBetter = true;", "        } else {", "            isVarTypeBetter = false;", "        }"]}], "deletions": [530, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 562, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 530, "new_lines": ["        if (left.getString().equals(\"let\")) {", "            left.setVarType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}], "deletions": [548, 564, 565], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration || var == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration || var == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && var != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && var == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 530, "new_lines": ["        boolean isVarDeclaration = left.hasChildren(); // Mutation 1"]} , {"line_number": 548, "new_lines": ["        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred(); // Mutation 2"]}, {"line_number": 564, "new_lines": ["        left.setJSType(isVarDeclaration || leftType == null ? // Mutation 3"]} , {"line_number": 565, "new_lines": ["            resultType : null; // Mutation 4"]} , {"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) { // Mutation 5"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType); // Mutation 6"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 564, "new_lines": ["        left.setJSType(leftType == null ? resultType : null); // Mutation 7"]} , {"line_number": 565, "new_lines": ["            resultType : null; // Mutation 8"]} , {"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) { // Mutation 9"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType); // Mutation 10"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 530, "new_lines": ["        boolean isVarDeclaration = left.hasChildren(); // Mutation 11"]} , {"line_number": 548, "new_lines": ["        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred(); // Mutation 12"]}, {"line_number": 564, "new_lines": ["        left.setJSType(isVarDeclaration || leftType == null ? // Mutation 13"]} , {"line_number": 565, "new_lines": ["            resultType : null; // Mutation 14"]} , {"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) { // Mutation 15"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType); // Mutation 16"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) { // Mutation 17", "            left.setJSType(resultType); // Mutation 18", "        } else if (leftType == null) { // Mutation 19", "            left.setJSType(resultType); // Mutation 20", "        } else { // Mutation 21", "            left.setJSType(null); // Mutation 22", "        } // Mutation 23"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType); // Mutation 24"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 530, "new_lines": ["        boolean isVarDeclaration = left.hasChildren(); // Mutation 25"]} , {"line_number": 548, "new_lines": ["        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred(); // Mutation 26"]}, {"line_number": 564, "new_lines": ["        left.setJSType(isVarDeclaration || leftType == null ? // Mutation 27"]} , {"line_number": 565, "new_lines": ["            resultType : null; // Mutation 28"]} , {"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) { // Mutation 29"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType); // Mutation 30"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration || leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && var != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration || leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}, {"line_number": 530, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null && var != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (var == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarTypeBetter) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null && var != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarTypeBetter) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarTypeBetter) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);", "        }"]}, {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} ,{"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} ,{"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} ,{"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} ,{"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null && var != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} ,{"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [530, 548, 564, 565], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration || leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration || leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType == null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "FAULT_OF_OM[
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}], "deletions": [], "modifications": [{"line_number": 530, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 548, "modified_line": "        boolean isVarTypeBetter = isVarDeclaration && leftType != null;"}, {"line_number": 564, "modified_line": "        left.setJSType(isVarDeclaration && leftType != null ?"}, {"line_number": 565, "modified_line": "            resultType : null;"}]}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration || leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(null);", "        } else {", "            left.setJSType(resultType);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [], "deletions": [530, 548, 564, 565], "modifications": [{"line_number": 550, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 562, "modified_line": "          redeclareSimpleVar(scope, left, resultType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [530, 548, 564, 565], "modifications": [{"line_number": 550, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 562, "modified_line": "          redeclareSimpleVar(scope, left, resultType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [], "deletions": [530, 548, 564, 565], "modifications": [{"line_number": 550, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 562, "modified_line": "          redeclareSimpleVar(scope, left, resultType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [530, 548, 564, 565], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} , {"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]} ], "deletions": [530, 548, 564, 565], "modifications": [{"line_number": 550, "modified_line": "        if (isVarDeclaration && leftType != null) {"}, {"line_number": 562, "modified_line": "          redeclareSimpleVar(scope, left, resultType);"}]}
][
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} ,{"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "insertions": [{"line_number": 550, "new_lines": ["        if (!isVarDeclaration && leftType != null) {", "            left.setJSType(resultType);", "        } else {", "            left.setJSType(null);"]} ,{"line_number": 562, "new_lines": ["          redeclareSimpleVar(scope, left, resultType);"]}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [550, 562]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "modifications": [{"line_number": 550, "modified_line": "        if (isVarDeclaration && leftType != null) {"},{"line_number": 562, "modified_line": "          redeclareSimpleVar(scope, left, resultType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "modifications": [{"line_number": 550, "modified_line": "        if (!isVarDeclaration && leftType != null) {"},{"line_number": 562, "modified_line": "          redeclareSimpleVar(scope, left, resultType);"}]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [530, 548, 564, 565, 550, 562]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [530, 548, 564, 565]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [530, 548, 564]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [530, 548]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [530]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [548, 564, 565, 550, 562]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [548, 564, 565]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [548, 564]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [548]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [564, 565, 550, 562]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [564, 565, 550]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [564, 565]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [564]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [565, 550, 562]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [565, 550]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [565]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [550, 562]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [550]},
{"file_name": "com/google/javascript/jscomp/TypeInference.java", "target_lines": [["530", "        boolean isVarDeclaration = left.hasChildren();"], ["548", "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();"], ["564", "        left.setJSType(isVarDeclaration || leftType == null ?"], ["565", "            resultType : null);"], ["550", "//"], ["562", "//"]], "deletions": [562]}
]