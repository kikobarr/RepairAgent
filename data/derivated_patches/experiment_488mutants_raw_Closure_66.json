[
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines":["// Adding missing logic to fix the bug"]}, {"line_number": 517, "new_lines":["// Adding missing logic to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines":["return true; // Inserting return statement to fix the bug"]}, {"line_number": 517, "new_lines":["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines":["// Fixing the bug by adding a check here"]}, {"line_number": 517, "new_lines":["if (condition) { doSomething(); } // Adding conditional logic to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines":["int x = 0; // Adding initialization to fix the bug"]}, {"line_number": 517, "new_lines":["int y = 0; // Adding initialization to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines":["// Bug fix: adding missing code here"]}, {"line_number": 517, "new_lines":["// Bug fix: adding missing code here"]}], "deletions": [], "modifications": []}
][
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return null; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return 1; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return true; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["return false; // Inserting return statement to fix the bug          // Object literal keys are not typeable"]}, {"line_number": 517, "new_lines": ["return null; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}
][
{
    "file_name": "com/google/javascript/jscomp/TypeCheck.java",
    "target_lines": [["516", "//"], ["517", "//"]],
    "insertions": [
        {"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}
    ],
    "deletions": [],
    "modifications": []
},
{
    "file_name": "com/google/javascript/jscomp/TypeCheck.java",
    "target_lines": [["516", "//"], ["517", "//"]],
    "insertions": [
        {"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}
    ],
    "deletions": [],
    "modifications": []
},
{
    "file_name": "com/google/javascript/jscomp/TypeCheck.java",
    "target_lines": [["516", "//"], ["517", "//"]],
    "insertions": [
        {"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}
    ],
    "deletions": [],
    "modifications": []
},
{
    "file_name": "com/google/javascript/jscomp/TypeCheck.java",
    "target_lines": [["516", "//"], ["517", "//"]],
    "insertions": [
        {"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}
    ],
    "deletions": [],
    "modifications": []
},
{
    "file_name": "com/google/javascript/jscomp/TypeCheck.java",
    "target_lines": [["516", "//"], ["517", "//"]],
    "insertions": [
        {"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}
    ],
    "deletions": [],
    "modifications": []
}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return false; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["return true; // Inserting return statement to fix the bug"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Mutation: Added new line to address the issue"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Potential fix added here to correct the bug"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Bug fix: Added line to address the issue"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Code added to fix the bug"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Added line as a potential fix for the bug"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Added line to fix the issue"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Line added to fix the bug"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted line to fix the bug"]}],"deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Added to fix the bug"]}],"deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable object literal keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-object keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-object keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for object literal keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for typeable keys"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return true; // Fixing the bug by returning true for non-object literal keys"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isArrayLit()) {", "            Node element = node.getFirstChild();", "            while (element != null) {", "                if (!element.isString()) {", "                    report(JSError.make(element, ARRAY_LITERAL_ELEMENT_NOT_STRING));", "                }", "                element = element.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isCall()) {", "            Node function = node.getFirstChild();", "            while (function != null) {", "                if (!function.isString()) {", "                    report(JSError.make(function, CALL_FUNCTION_NOT_STRING));", "                }", "                function = function.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isAdd()) {", "            Node operand = node.getFirstChild();", "            while (operand != null) {", "                if (!operand.isString()) {", "                    report(JSError.make(operand, ADD_OPERAND_NOT_STRING));", "                }", "                operand = operand.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isExprResult()) {", "            Node expression = node.getFirstChild();", "            while (expression != null) {", "                if (!expression.isString()) {", "                    report(JSError.make(expression, EXPRESSION_NOT_STRING));", "                }", "                expression = expression.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isOr()) {", "            Node operand = node.getFirstChild();", "            while (operand != null) {", "                if (!operand.isString()) {", "                    report(JSError.make(operand, OR_OPERAND_NOT_STRING));", "                }", "                operand = operand.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isBlock()) {", "            Node statement = node.getFirstChild();", "            while (statement != null) {", "                if (!statement.isString()) {", "                    report(JSError.make(statement, BLOCK_STATEMENT_NOT_STRING));", "                }", "                statement = statement.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isAssign()) {", "            Node expression = node.getFirstChild();", "            while (expression != null) {", "                if (!expression.isString()) {", "                    report(JSError.make(expression, ASSIGN_EXPRESSION_NOT_STRING));", "                }", "                expression = expression.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isFunction()) {", "            Node param = node.getFirstChild();", "            while (param != null) {", "                if (!param.isString()) {", "                    report(JSError.make(param, FUNCTION_PARAMETER_NOT_STRING));", "                }", "                param = param.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isGetProp()) {", "            Node property = node.getFirstChild();", "            while (property != null) {", "                if (!property.isString()) {", "                    report(JSError.make(property, GET_PROPERTY_NOT_STRING));", "                }", "                property = property.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isHook()) {", "            Node condition = node.getFirstChild();", "            while (condition != null) {", "                if (!condition.isString()) {", "                    report(JSError.make(condition, HOOK_CONDITION_NOT_STRING));", "                }", "                condition = condition.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isName()) {", "            Node name = node.getFirstChild();", "            while (name != null) {", "                if (!name.isString()) {", "                    report(JSError.make(name, NAME_NOT_STRING));", "                }", "                name = name.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isReturn()) {", "            Node value = node.getFirstChild();", "            while (value != null) {", "                if (!value.isString()) {", "                    report(JSError.make(value, RETURN_VALUE_NOT_STRING));", "                }", "                value = value.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isStringKey()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, STRING_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isTaggedTemplateLit()) {", "            Node tag = node.getFirstChild();", "            while (tag != null) {", "                if (!tag.isString()) {", "                    report(JSError.make(tag, TAGGED_TEMPLATE_LITERAL_TAG_NOT_STRING));", "                }", "                tag = tag.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isTemplateLitString()) {", "            Node part = node.getFirstChild();", "            while (part != null) {", "                if (!part.isString()) {", "                    report(JSError.make(part, TEMPLATE_LITERAL_STRING_NOT_STRING));", "                }", "                part = part.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isTypeOf()) {", "            Node expr = node.getFirstChild();", "            while (expr != null) {", "                if (!expr.isString()) {", "                    report(JSError.make(expr, TYPEOF_EXPRESSION_NOT_STRING));", "                }", "                expr = expr.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isUnary()) {", "            Node operand = node.getFirstChild();", "            while (operand != null) {", "                if (!operand.isString()) {", "                    report(JSError.make(operand, UNARY_OPERAND_NOT_STRING));", "                }", "                operand = operand.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isVar()) {", "            Node declaration = node.getFirstChild();", "            while (declaration != null) {", "                if (!declaration.isString()) {", "                    report(JSError.make(declaration, VAR_DECLARATION_NOT_STRING));", "                }", "                declaration = declaration.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isWhile()) {", "            Node condition = node.getFirstChild();", "            while (condition != null) {", "                if (!condition.isString()) {", "                    report(JSError.make(condition, WHILE_CONDITION_NOT_STRING));", "                }", "                condition = condition.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isDo()) {", "            Node condition = node.getFirstChild();", "            while (condition != null) {", "                if (!condition.isString()) {", "                    report(JSError.make(condition, DO_WHILE_CONDITION_NOT_STRING));", "                }", "                condition = condition.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isFor()) {", "            Node init = node.getFirstChild();", "            while (init != null) {", "                if (!init.isString()) {", "                    report(JSError.make(init, FOR_INIT_NOT_STRING));", "                }", "                init = init.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isForOf()) {", "            Node iterator = node.getFirstChild();", "            while (iterator != null) {", "                if (!iterator.isString()) {", "                    report(JSError.make(iterator, FOR_OF_ITERATOR_NOT_STRING));", "                }", "                iterator = iterator.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isForIn()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, FOR_IN_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isSpread()) {", "            Node expression = node.getFirstChild();", "            while (expression != null) {", "                if (!expression.isString()) {", "                    report(JSError.make(expression, SPREAD_EXPRESSION_NOT_STRING));", "                }", "                expression = expression.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isYield()) {", "            Node value = node.getFirstChild();", "            while (value != null) {", "                if (!value.isString()) {", "                    report(JSError.make(value, YIELD_VALUE_NOT_STRING));", "                }", "                value = value.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isAwait()) {", "            Node expression = node.getFirstChild();", "            while (expression != null) {", "                if (!expression.isString()) {", "                    report(JSError.make(expression, AWAIT_EXPRESSION_NOT_STRING));", "                }", "                expression = expression.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isAwait()) {", "            Node expression = node.getFirstChild();", "            while (expression != null) {", "                if (!expression.isString()) {", "                    report(JSError.make(expression, AWAIT_EXPRESSION_NOT_STRING));", "                }", "                expression = expression.getNext();", "            }", "        }"]}]}],

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isAwait()) {", "            Node expression = node.getFirstChild();", "            while (expression != null) {", "                if (!expression.isString()) {", "                    report(JSError.make(expression, AWAIT_EXPRESSION_NOT_STRING));", "                }", "                expression = expression.getNext();", "            }", "        }"]}]}]
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isArrayLit()) {", "            Node elem = node.getFirstChild();", "            while (elem != null) {", "                if (!elem.isString()) {", "                    report(JSError.make(elem, ARRAY_LITERAL_ELEMENT_NOT_STRING));", "                }", "                elem = elem.getNext();", "            }", "        }"]} , {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]} ], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isCall()) {", "            Node callee = node.getFirstChild();", "            if (callee.isName()) {", "                String methodName = callee.getString();", "                if (methodName.equals(\"foo\")) {", "                    report(JSError.make(callee, INVALID_METHOD_CALL));", "                }", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isString()) {", "            if (node.getString().isEmpty()) {", "                report(JSError.make(node, EMPTY_STRING_LITERAL));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isObjectLit()) {", "            Node key = node.getFirstChild();", "            while (key != null) {", "                if (!key.isString()) {", "                    report(JSError.make(key, OBJECT_LITERAL_KEY_NOT_STRING));", "                }", "                key = key.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isFunction()) {", "            Node functionName = node.getFirstChild();", "            if (!functionName.isName()) {", "                report(JSError.make(functionName, INVALID_FUNCTION_NAME));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isExprResult()) {", "            Node expr = node.getFirstChild();", "            if (expr.isString()) {", "                report(JSError.make(expr, INVALID_EXPRESSION_RESULT));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isGetProp()) {", "            Node propAccess = node.getFirstChild();", "            if (!propAccess.isString()) {", "                report(JSError.make(propAccess, INVALID_PROPERTY_ACCESS));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isBlock()) {", "            Node child = node.getFirstChild();", "            while (child != null) {", "                if (!child.isExprResult()) {", "                    report(JSError.make(child, NON_EXPRESSION_STATEMENT));", "                }", "                child = child.getNext();", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["        if (node.isStringKey()) {", "            Node key = node.getFirstChild();", "            if (!key.isString()) {", "                report(JSError.make(key, INVALID_STRING_KEY));", "            }", "        }"]}, {"line_number": 517, "new_lines": ["        // Inserted new line to fix the bug"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []},

{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["516", "//"], ["517", "//"]], "insertions": [{"line_number": 516, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}, {"line_number": 517, "new_lines": ["          ensureTyped(t, n, STRING_TYPE); // Ensuring correct type for STRING", "          return false; // Fixing the bug by returning false for non-typeable object literal keys"]}], "deletions": [], "modifications": []}
]