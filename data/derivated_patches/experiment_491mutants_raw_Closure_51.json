[
    {"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        x = Math.abs(x);"]}, {"line_number": 260, "new_lines": ["        add(Long.toString(x));"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        x = x < 0 ? -x : x;"]}, {"line_number": 260, "new_lines": ["        add(Long.toString(x));"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        x = x < 0 ? x * -1 : x;"]}, {"line_number": 260, "new_lines": ["        add(Long.toString(x));"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        x = x < 0 ? -x : x;"]}, {"line_number": 260, "new_lines": ["        add(Long.toString(Math.abs(x)));"]}], "deletions": [], "modifications": []},
    {"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        x = Math.abs(x);"]}, {"line_number": 260, "new_lines": ["        add(Long.toString(Math.abs(x)));"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix bug by adding a conversion to double before comparison\n    if ((double) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Additional fix for the bug\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to long before comparison\n    if ((long) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Possible bug resolution\n        add(Long.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to int before comparison\n    if ((int) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Fix for bug\n        add(Integer.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by using Math.round for x before comparison\n    if ((long) Math.round(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug correction\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to float before comparison\n    if ((float) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Resolving bug\n        add(Float.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by using Math.floor for x before comparison\n    if ((long) Math.floor(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Correcting bug\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to short before comparison\n    if ((short) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Fixing bug\n        add(Short.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to byte before comparison\n    if ((byte) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Addressing bug\n        add(Byte.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to double before comparison\n    if ((double) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug fix\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to float before comparison\n    if ((float) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Fixing bug\n        add(Float.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by using Math.ceil for x before comparison\n    if ((long) Math.ceil(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug correction\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to int before comparison\n    if ((int) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Resolving bug\n        add(Integer.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to short before comparison\n    if ((short) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Correcting bug\n        add(Short.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to byte before comparison\n    if ((byte) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Addressing bug\n        add(Byte.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by using Math.round for x before comparison\n    if ((long) Math.round(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug fix\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by using Math.ceil for x before comparison\n    if ((long) Math.ceil(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug correction\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to float before comparison\n    if ((float) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Fixing bug\n        add(Float.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to double before comparison\n    if ((double) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug fix\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to int before comparison\n    if ((int) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Resolving bug\n        add(Integer.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to short before comparison\n    if ((short) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Correcting bug\n        add(Short.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to byte before comparison\n    if ((byte) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Addressing bug\n        add(Byte.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by using Math.round for x before comparison\n    if ((long) Math.round(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug fix\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by using Math.ceil for x before comparison\n    if ((long) Math.ceil(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug correction\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to float before comparison\n    if ((float) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Fixing bug\n        add(Float.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to double before comparison\n    if ((double) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug fix\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to int before comparison\n    if ((int) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Resolving bug\n        add(Integer.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to short before comparison\n    if ((short) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Correcting bug\n        add(Short.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to byte before comparison\n    if ((byte) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Addressing bug\n        add(Byte.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by using Math.round for x before comparison\n    if ((long) Math.round(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug fix\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by using Math.ceil for x before comparison\n    if ((long) Math.ceil(x) == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug correction\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Potential fix by casting x to float before comparison\n    if ((float) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Fixing bug\n        add(Float.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to double before comparison\n    if ((double) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Bug fix\n        add(Double.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    // Fix by casting x to int before comparison\n    if ((int) x == x) {"]}, {"line_number": 260, "new_lines": ["        // Resolving bug\n        add(Integer.toString(x));"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Double.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Float.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Integer.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(String.valueOf(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x < x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Double.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x > x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Double.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x <= x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Double.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x >= x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Double.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Double.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines":["        add(Double.toString(x));"]}, {"line_number": 260, "new_lines":["    "] }]}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == 0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == 0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == -0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == -0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == 0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == 0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == -0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == -0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == 0) {"]}, {"line_number": 260, "new_lines": ["            add(\"0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == 0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == -0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == -0) {"]}, {"line_number": 260, "new_lines": ["            add(\"0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == 0) {"]}, {"line_number": 260, "new_lines": ["            add(\"0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == 0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == -0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x == -0) {"]}, {"line_number": 260, "new_lines": ["            add(\"0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if ((long) x != x) {"]}, {"line_number": 260, "new_lines": ["            add(Double.toString(x));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if ((long) x != x) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if ((long) x != x) {"]}, {"line_number": 260, "new_lines": ["            add(\"0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x != 0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x != 0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x != -0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x != -0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0.0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x != 0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x != 0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x != -0.0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0\");"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["        if (x != -0) {"]}, {"line_number": 260, "new_lines": ["            add(\"-0\");"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((double) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Float.toString((float) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((float) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Integer.toString((int) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((int) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString((long) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((long) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((double) Math.round(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Float.toString(x));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Integer.toString(x));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%f\", x));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(Double.valueOf(x).floatValue()));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(Long.valueOf(x).intValue()));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x).concat(\"f\"));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x).substring(0, String.valueOf(x).indexOf(\".\")));"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x).replace(\".\", \"\"));"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((int) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((float) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == -0.0) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == 0.0) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == -0.0d) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == 0.0f) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) > 0) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) > 100) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) > 10) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) == 100) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Long.compare(x, (long) x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.valueOf(x).equals(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((int) Math.ceil(x) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((int) Math.floor(x) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((int) Math.round(x) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((int) Math.abs(x) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((int) Math.signum(x) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((int) Math.copySign(x, 1.0) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == Math.nextAfter(x, Double.NEGATIVE_INFINITY)) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == Math.nextAfter(x, Double.POSITIVE_INFINITY)) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == Math.nextUp(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == Math.nextDown(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == Double.longBitsToDouble(Double.doubleToLongBits(x))) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == Double.longBitsToDouble(Double.doubleToRawLongBits(x))) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == Double.longBitsToDouble(Double.doubleToRawLongBits(x)) || x == 0.0d) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare(x, (double) x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((int)x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString((long)x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Float.toString((float)x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%f\", x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%d\", x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(Math.round(x)));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(Math.ceil(x)));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [241, 260]}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Float.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Integer.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((long) x != x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x != x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x != x) {"}, {"line_number": 259, "modified_line": "    add(String.valueOf(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [241]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [260]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}, {"line_number": 259, "modified_line": "    add(String.valueOf(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x != x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Integer.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [241, 260]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x != x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [241]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [260]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}, {"line_number": 259, "modified_line": "    add(String.valueOf(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x != x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Integer.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}],
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [241, 260]}
][{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.valueOf(x).toString());", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Float.toString(x));", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Integer.toString(x));", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%f\", x));", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%.1f\", x));", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(Double.valueOf(x)));", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(Float.valueOf(x)));", "    }"]}], "deletions": [], "modifications": []}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(Integer.valueOf(x)));", "    }"]}], "deletions": [], "modifications": []}][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Integer.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Float.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%f\", x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%.2f\", x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(Locale.US, \"%.2f\", x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((double) x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == (double) x) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, x) == 0) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, (double) x) == 0) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (x == (double) x) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (x == x) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(x, (double) x) == 0) {"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (x == (double) x) {"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (x == x) {"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Integer.toString(x));"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Float.toString(x));"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%f\", x));"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%.2f\", x));"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(Locale.US, \"%.2f\", x));"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((double) x));"]}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == (double) x) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, x) == 0) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, (double) x) == 0) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (x == (double) x) {"}]},

{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (x == x) {"}]}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x instanceof Long && (long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare((double) x, x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare(x, (double) x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) == Math.abs((double) x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.isNaN(x) || Double.isInfinite(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((double) x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%f\", x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf((double) x).replace(\".0\", \"\"));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.format(\"%.1f\", x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x);"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x);"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x);"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x);"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x);"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString((double)x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Float.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (x == (long) x) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (x == Double.valueOf(x.longValue())) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if ((long) Double.compare(x, (double) x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if ((long) x == x) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if ((long) x == x) {"]}, {"line_number": 259, "new_lines": ["    add(Float.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if ((long) x == x) {"]}, {"line_number": 259, "new_lines": ["    add(String.valueOf(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if ((long) x == x) {"]}, {"line_number": 259, "new_lines": ["    add(Double.valueOf(x).toString());"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if ((long) x == x) {"]}, {"line_number": 259, "new_lines": ["    add(String.format(\"%f\", x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if ((long) x == x) {"]}, {"line_number": 259, "new_lines": ["    add(String.valueOf(x.longValue()));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (x == (long) x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if ((long) x == x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if ((long) x == x) {"}, {"line_number": 259, "modified_line": "    add(String.valueOf(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (x == (long) x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if ((double) x == x) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241, 260]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241, 260], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs((double) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs((int) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, Math.abs(x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x) + Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x) - Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x) * Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x) / Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs(x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs((double) x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs((float) x), Math.abs((float) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs((int) x), Math.abs((int) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs((long) x), Math.abs((long) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [241, 260]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "deletions": [241]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs((double) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs((int) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, Math.abs(x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x) + Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x) - Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x) * Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(Math.abs(x) / Math.abs((float) x)));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs(x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs((double) x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs((float) x), Math.abs((float) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs((int) x), Math.abs((int) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs((long) x), Math.abs((long) x)) == 0) {"}]} 
][{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    // Fix for issue 582: Handling special case of negative zero"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(x, (double) x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(x, (double) x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]}]

[{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]}][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Fixing the comparison"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Adding a comment for clarity"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));", "    // Converting x to string"]}, {"line_number": 260, "new_lines": ["    }", "    } // End of conversion"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Fixed the number conversion"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Corrected the type conversion"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Casting x to double"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Fixed the type comparison"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Adjusted the number format"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Converting x to double for comparison"]]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));", "    add(Long.toString(x));"]}, {"line_number": 260, "new_lines": ["    }", "    } // Adding a type conversion comment"]]}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) == Math.abs((double) x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare(x, (double) x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare((double) x, x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == Math.abs((long) x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) Math.abs(x) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) Double.compare(x, (double) x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == (double) Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) == (double) Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare(x, Math.abs((double) x)) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare(Math.abs((double) x), x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs((double) x) == Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare(Math.abs(x), x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) Math.abs((double) x) == Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) Math.abs((long) x) == Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == Math.abs((long) x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare(Math.abs((long) x), x) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs((long) x) == (double) Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) Math.abs(x) == (long) Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) == (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) Math.abs((double) x) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) Math.abs(x) == (double) Math.abs(x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare((double) x, Math.abs((double) x)) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) Math.abs(x) == Math.abs((double) x)) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Math.abs(x) == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (Double.compare(Math.abs(x), (double) Math.abs(x)) == 0) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}]},
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(x, (double) x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 241, "new_lines": ["    if (Double.compare(x, (double) x) == 0) {"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(x, (double) x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(x, (double) x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}], "deletions": [241], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241, 260], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x != (long) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((double) x != (double) x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if (x != x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare((double) x, x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241, 260]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare((double) x, x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}, {"line_number": 259, "modified_line": "    add(Double.toString(x));"}, {"line_number": 260, "modified_line": "    }"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "target_lines": [["241", "    if ((long) x == x) {"], ["259", "//"], ["260", "//"]], "insertions": [{"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": [{"line_number": 241, "modified_line": "    if (Double.compare(x, (double) x) == 0) {"}]},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(x, (double) x) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": []},
{"file_name": "com/google/javascript/jscomp/CodeConsumer.java", "insertions": [{"line_number": 241, "new_lines": ["    if (Double.compare(Math.abs(x), Math.abs((double) x)) == 0) {"]}, {"line_number": 259, "new_lines": ["    add(Double.toString(x));"]}, {"line_number": 260, "new_lines": ["    }"]}], "deletions": [241], "modifications": []}
]