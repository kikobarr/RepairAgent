[
    {"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "        if (typeParams == null) {", "            return MapType.construct(rawClass, _unknownType(), _unknownType());", "        }", "        if (typeParams.length != 2) {", "            throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");", "        }", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"]}], "deletions": [], "modifications": []},
    {"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "        if (typeParams == null) {", "            return MapType.construct(rawClass, _unknownType(), _unknownType());", "        }", "        if (typeParams.length != 2) {", "            throw new IllegalArgumentException(\"Unexpected Map type \"+rawClass.getName()+\": unable to determine type parameters\");", "        }", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"]}], "deletions": [], "modifications": []},
    {"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "        if (typeParams == null) {", "            return MapType.construct(rawClass, _unknownType(), _unknownType());", "        }", "        if (typeParams.length != 2) {", "            throw new IllegalArgumentException(\"Invalid Map type \"+rawClass.getName()+\": unable to determine type parameters\");", "        }", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"]}], "deletions": [], "modifications": []},
    {"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "        if (typeParams == null) {", "            return MapType.construct(rawClass, _unknownType(), _unknownType());", "        }", "if (typeParams.length != 2) {", "            throw new IllegalArgumentException(\"Unexpected number of Map type parameters for \"+rawClass.getName());", "        }", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"]}], "deletions": [], "modifications": []},
    {"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "        if (typeParams == null) {", "            return MapType.construct(rawClass, _unknownType(), _unknownType());", "        }", "if (typeParams.length != 2) {", "            throw new IllegalArgumentException(\"Unexpected number of type parameters for Map class: \"+rawClass.getName());", "        }", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"]}], "deletions": [], "modifications": []}
    {"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "        if (typeParams == null) {", "            return MapType.construct(rawClass, _unknownType(), _unknownType());", "        }", "if (typeParams.length != 2) {", "            throw new IllegalArgumentException(\"Unexpected number of type parameters for Map: \"+rawClass.getName());", "        }", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["    // 28-May-2015, tatu: Properties are special, as per [databind#810]\n", "    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "    // ok to have no types (\"raw\")\n", "    if (typeParams == null) {\n", "        return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "    }\n", "    // but exactly 2 types if any found\n", "    if (typeParams.length != 2) {\n", "        throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "    }\n", "    return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["    // 28-May-2015, tatu: Properties are special, as per [databind#810]\n", "    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "    // ok to have no types (\"raw\")\n", "    if (typeParams == null) {\n", "        return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "    }\n", "    // but exactly 2 types if any found\n", "    if (typeParams.length != 2) {\n", "        throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "    }\n", "    return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["    // 28-May-2015, tatu: Properties are special, as per [databind#810]\n", "    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "    // ok to have no types (\"raw\")\n", "    if (typeParams == null) {\n", "        return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "    }\n", "    // but exactly 2 types if any found\n", "    if (typeParams.length != 2) {\n", "        throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "    }\n", "    return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["    // 28-May-2015, tatu: Properties are special, as per [databind#810]\n", "    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "    // ok to have no types (\"raw\")\n", "    if (typeParams == null) {\n", "        return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "    }\n", "    // but exactly 2 types if any found\n", "    if (typeParams.length != 2) {\n", "        throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "    }\n", "    return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["    // 28-May-2015, tatu: Properties are special, as per [databind#810]\n", "    JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "    // ok to have no types (\"raw\")\n", "    if (typeParams == null) {\n", "        return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "    }\n", "    // but exactly 2 types if any found\n", "    if (typeParams.length != 2) {\n", "        throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "    }\n", "    return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "return new JavaType();", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "return MapType.construct(rawClass, _unknownType(), _unknownType());", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "return MapType.construct(rawClass, typeParams[0], typeParams[1]);", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "return CollectionType.construct(rawClass, _unknownType());", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "return CollectionType.construct(rawClass, typeParams[0]);", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "throw new IllegalArgumentException(\"Invalid Map configuration: type \" + rawClass.getName() + \" has invalid number of type parameters; must be 2\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "JavaType[] params = new JavaType[2];", "params[0] = _unknownType();", "params[1] = _unknownType();", "return MapType.construct(rawClass, params[0], params[1]);", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "JavaType[] params = type.findTypeParameters(rawClass, Map.class);", "if (params == null || params.length != 2) {", "throw new IllegalArgumentException(\"Invalid Map configuration: type \" + rawClass.getName() + \" has invalid number of type parameters; must be 2\");", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "JavaType[] params = type.findTypeParameters(rawClass, Map.class);", "if (params == null || params.length != 2) {", "JavaType[] newParams = new JavaType[2];", "newParams[0] = _unknownType();", "newParams[1] = _unknownType();", "return MapType.construct(rawClass, newParams[0], newParams[1]);", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["// 28-May-2015, tatu: Properties are special, as per [databind#810]", "JavaType[] typeParams = findTypeParameters(rawClass, Map.class);", "if (typeParams == null) {", "JavaType[] params = type.findTypeParameters(rawClass, Map.class);", "if (params == null || params.length != 2) {", "JavaType[] newParams = new JavaType[2];", "newParams[0] = params[1];", "newParams[1] = params[0];", "return MapType.construct(rawClass, newParams[0], newParams[1]);", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines":["// Adding a null check for typeParams to handle possible null value\n", "if (typeParams == null) {\n", "    throw new IllegalArgumentException(\"Invalid Map configuration: type \" + rawClass.getName() + \" has null type parameters\");\n", "}"]}, {"line_number": 1021, "new_lines":["// Changing the return type to null when typeParams is null\n", "if (typeParams == null) {\n", "    return null;\n", "}"]}]}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}
][
    {"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}  
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[1], typeParams[0]);\n"]}]}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": [
"        // 28-May-2015, tatu: Properties are special, as per [databind#810]",
"        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
"        // ok to have no types (\"raw\")",
"        if (typeParams == null) {",
"            return MapType.construct(rawClass, _unknownType(), _unknownType());",
"        }",
"        // but exactly 2 types if any found",
"        if (typeParams.length != 2) {",
"            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");",
"        }",
"        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"
]}]},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": [
"        // 28-May-2015, tatu: Properties are special, as per [databind#810]",
"        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
"        // ok to have no types (\"raw\")",
"        if (typeParams == null) {",
"            return MapType.construct(rawClass, _unknownType(), _unknownType());",
"        }",
"        // but exactly 2 types if any found",
"        if (typeParams.length != 2) {",
"            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");",
"        }",
"        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"
]}]},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": [
"        // 28-May-2015, tatu: Properties are special, as per [databind#810]",
"        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
"        // ok to have no types (\"raw\")",
"        if (typeParams == null) {",
"            return MapType.construct(rawClass, _unknownType(), _unknownType());",
"        }",
"        // but exactly 2 types if any found",
"        if (typeParams.length != 2) {",
"            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");",
"        }",
"        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"
]}]},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": [
"        // 28-May-2015, tatu: Properties are special, as per [databind#810]",
"        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
"        // ok to have no types (\"raw\")",
"        if (typeParams == null) {",
"            return MapType.construct(rawClass, _unknownType(), _unknownType());",
"        }",
"        // but exactly 2 types if any found",
"        if (typeParams.length != 2) {",
"            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");",
"        }",
"        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"
]}]},
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": [
"        // 28-May-2015, tatu: Properties are special, as per [databind#810]",
"        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);",
"        // ok to have no types (\"raw\")",
"        if (typeParams == null) {",
"            return MapType.construct(rawClass, _unknownType(), _unknownType());",
"        }",
"        // but exactly 2 types if any found",
"        if (typeParams.length != 2) {",
"            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");",
"        }",
"        return MapType.construct(rawClass, typeParams[0], typeParams[1]);"
]}]}
][
{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}
][{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]

[{"file_name": "com/fasterxml/jackson/databind/type/TypeFactory.java", "target_lines": [["1021", "//"]], "insertions": [{"line_number": 1021, "new_lines": ["        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n", "        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n", "        if (typeParams == null) {\n", "            return MapType.construct(rawClass, _unknownType(), _unknownType());\n", "        }\n", "        if (typeParams.length != 2) {\n", "            throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": can not determine type parameters\");\n", "        }\n", "        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n"]}]}]