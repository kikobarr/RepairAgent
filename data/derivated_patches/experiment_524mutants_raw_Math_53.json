[
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["real = addReal(c);", "imaginary = addImaginary(c);"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Double.isNaN(real) && Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Double.isNaN(real) && Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        } else if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Math.abs(real) == Double.POSITIVE_INFINITY || Math.abs(imaginary) == Double.POSITIVE_INFINITY) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Math.abs(real) == Double.POSITIVE_INFINITY || Math.abs(imaginary) == Double.POSITIVE_INFINITY) {", "            return new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Math.abs(real) == Double.POSITIVE_INFINITY || Math.abs(imaginary) == Double.POSITIVE_INFINITY) {", "            return new Complex(Double.NaN, Double.NaN);", "        } else if (Math.abs(real) == Double.NEGATIVE_INFINITY || Math.abs(imaginary) == Double.NEGATIVE_INFINITY) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines":["        if (Math.abs(real) == Double.POSITIVE_INFINITY || Math.abs(imaginary) == Double.POSITIVE_INFINITY) {", "            return new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "        } else if (Math.abs(real) == Double.NEGATIVE_INFINITY || Math.abs(imaginary) == Double.NEGATIVE_INFINITY) {", "            return new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) && Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return Complex.NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return this;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(0, 0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return this.clone();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(0, 0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return Complex.ZERO;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return Complex.ONE;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return this.copy();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).conjugate();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).negate();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).reciprocal();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).sqrt();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).multiply(2);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).divide(2);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).pow(2);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).log();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).exp();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).sin();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).cos();", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary).tan();", "        }"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) && Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return this;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(0, 0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, -imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(-real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(-real, -imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, 0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(0, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(0.0, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(Double.NaN, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return new Complex(real, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real)) {", "            return new Complex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(imaginary)) {", "            return new Complex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) && Double.isNaN(imaginary)) {", "            return new Complex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) && Double.isInfinite(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return this;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return new Complex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return new Complex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return new Complex(0, 0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return new Complex(real, -imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return new Complex(-real, imaginary);", "        }"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) && Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return createComplex(Double.NaN, Double.NaN);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return createComplex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return createComplex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return createComplex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return createComplex(Double.MAX_VALUE, Double.MAX_VALUE);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return createComplex(Double.MIN_VALUE, Double.MIN_VALUE);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == Double.POSITIVE_INFINITY || imaginary == Double.POSITIVE_INFINITY) {", "            return createComplex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == Double.NEGATIVE_INFINITY || imaginary == Double.NEGATIVE_INFINITY) {", "            return createComplex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == Double.POSITIVE_INFINITY || imaginary == Double.POSITIVE_INFINITY) {", "            return createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == Double.NEGATIVE_INFINITY || imaginary == Double.NEGATIVE_INFINITY) {", "            return createComplex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == Double.NaN || imaginary == Double.NaN) {", "            return createComplex(0.0, 0.0);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (Double.isNaN(real) || Double.isNaN(imaginary)) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (real == Double.POSITIVE_INFINITY || imaginary == Double.POSITIVE_INFINITY) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (real == Double.NEGATIVE_INFINITY || imaginary == Double.NEGATIVE_INFINITY) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (real == Double.NaN || imaginary == Double.NaN) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (real != Double.NaN || imaginary != Double.NaN) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (real != Double.POSITIVE_INFINITY || imaginary != Double.POSITIVE_INFINITY) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (real != Double.NEGATIVE_INFINITY || imaginary != Double.NEGATIVE_INFINITY) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [], "deletions": [153], "modifications": [{"line_number": 152, "modified_line": "        if (real != Double.NaN || imaginary != Double.NaN) {"}]},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real != Double.NaN || imaginary != Double.NaN) {", "            return createComplex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real != Double.POSITIVE_INFINITY || imaginary != Double.POSITIVE_INFINITY) {", "            return createComplex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real != Double.NEGATIVE_INFINITY || imaginary != Double.NEGATIVE_INFINITY) {", "            return createComplex(real, imaginary);", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real != Double.NaN || imaginary != Double.NaN) {", "            return createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);", "        }"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == 0 && imaginary == 0) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == Double.POSITIVE_INFINITY || imaginary == Double.POSITIVE_INFINITY) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Math.abs(real) == Double.POSITIVE_INFINITY || Math.abs(imaginary) == Double.POSITIVE_INFINITY) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Math.abs(real) == Double.NEGATIVE_INFINITY || Math.abs(imaginary) == Double.NEGATIVE_INFINITY) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isFinite(real) && Double.isFinite(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == Double.NaN && imaginary == Double.NaN) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (real == Double.NaN || imaginary == Double.NaN) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Math.abs(real) == Double.NaN || Math.abs(imaginary) == Double.NaN) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []}
][
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) && Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isInfinite(real) || Double.isInfinite(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [154], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [153], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [152, 154], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [151, 152, 154, 155], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [152, 154, 155], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [152, 154, 155, 156], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [152, 154, 155, 156, 157], "modifications": []}
][
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Handle NaN values in the input to prevent further calculations", "        }"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Handle NaN values in the input to prevent further calculations", "            // Note: NaN values propagate in arithmetic operations"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Check for NaN values to avoid invalid arithmetic operations"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Handle potential NaN inputs to prevent calculation errors"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Safeguard against NaN values in input for accurate computation"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Handle NaN inputs to avoid incorrect results"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Check for NaN values to prevent calculation errors"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Handle NaN values in input to ensure correct results"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Handle NaN values in the input for accurate computation"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Check and handle NaN values in the input for correct results"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Handle NaN inputs to prevent calculation errors"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Check for NaN values in input to avoid computation issues"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Ensure NaN values are handled correctly in the input"]}], "deletions": [], "modifications": []},
{"file_name": "org/apache/commons/math/complex/Complex.java", "target_lines": [["153", "//"]], "insertions": [{"line_number": 153, "new_lines": ["        if (Double.isNaN(real) || Double.isNaN(imaginary)) {", "            return NaN;", "            // Check for and handle NaN values in the input"]}], "deletions": [], "modifications": []}
]