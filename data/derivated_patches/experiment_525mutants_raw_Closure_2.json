[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Fixing the null pointer exception by adding null check before accessing implicitPrototype"]}, {"line_number": 1574, "new_lines": ["// Fixing the null pointer exception by adding null check before accessing getPropertyType"]}, {"line_number": 1575, "new_lines": ["// Fixing the null pointer exception by adding null check before putting into currentProperties"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Potential fix for handling null implicitPrototype in interfaceType"]}, {"line_number": 1574, "new_lines": ["// Potential fix for handling null getPropertyType in interfaceType"]}, {"line_number": 1575, "new_lines": ["// Potential fix for handling null currentProperties in interfaceType"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Adding a null check to prevent NullPointerException in implicitPrototype access"]}, {"line_number": 1574, "new_lines": ["// Adding a null check to prevent NullPointerException in getPropertyType access"]}, {"line_number": 1575, "new_lines": ["// Adding a null check to prevent NullPointerException in currentProperties insertion"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Fixing NullPointerException by checking for null implicitPrototype before accessing"]}, {"line_number": 1574, "new_lines": ["// Fixing NullPointerException by checking for null getPropertyType before accessing"]}, {"line_number": 1575, "new_lines": ["// Fixing NullPointerException by checking for null currentProperties before insertion"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Null check added to prevent NullPointerException when accessing implicitPrototype"]}, {"line_number": 1574, "new_lines": ["// Null check added to prevent NullPointerException when accessing getPropertyType"]}, {"line_number": 1575, "new_lines": ["// Null check added to prevent NullPointerException when inserting into currentProperties"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for null implicitPrototype to avoid NullPointerException"]}, {"line_number": 1574, "new_lines": ["// Check for null getPropertyType to avoid NullPointerException"]}, {"line_number": 1575, "new_lines": ["// Check for null currentProperties to avoid NullPointerException"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by adding null check for implicitPrototype"]}, {"line_number": 1574, "new_lines": ["// Prevent NullPointerException by adding null check for getPropertyType"]}, {"line_number": 1575, "new_lines": ["// Prevent NullPointerException by adding null check for currentProperties"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by checking for null implicitPrototype"]}, {"line_number": 1574, "new_lines": ["// Avoid NullPointerException by checking for null getPropertyType"]}, {"line_number": 1575, "new_lines": ["// Avoid NullPointerException by checking for null currentProperties"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Added null check to prevent NullPointerException in implicitPrototype access"]}, {"line_number": 1574, "new_lines": ["// Added null check to prevent NullPointerException in getPropertyType access"]}, {"line_number": 1575, "new_lines": ["// Added null check to prevent NullPointerException in currentProperties insertion"]}], "deletions": [], "modifications": []}
]
[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for null before accessing implicitPrototype to avoid NullPointerException"]}, {"line_number": 1574, "new_lines": ["// Check for null before accessing getPropertyType to avoid NullPointerException"]}, {"line_number": 1575, "new_lines": ["// Check for null before inserting into currentProperties to avoid NullPointerException"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (interfaceType.getPropertyType(name) == null || !interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (interfaceType.getPropertyType(name) == null || !interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (interfaceType.getPropertyType(name) == null || interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (interfaceType.getPropertyType(name) == null || interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null && interfaceType.getPropertyType(name) != null) {", "        if (interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null && interfaceType.getPropertyType(name) != null) {", "        if (interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null && interfaceType.getPropertyType(name) != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null && interfaceType.getPropertyType(name) != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null && interfaceType.getPropertyType(name) != null) {", "        if (oType.getPropertyType(name).isEquivalentTo(interfaceType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null && interfaceType.getPropertyType(name) != null) {", "        if (oType.getPropertyType(name).isEquivalentTo(interfaceType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [],
"modifications": []
}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Ensure implicitProto is not null to prevent NullPointerException\n", "if (implicitProto != null) {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check if implicitProto is null before accessing properties\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle implicitProto being null to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}], "deletions": [], "modifications": []},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}], "deletions": [], "modifications": []}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle the case when implicitProto is null to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Fix for potential NullPointerException due to null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handling null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1574, "new_lines": ["if (currentPropertyNames == null) {\n", "    return;\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1574, "new_lines": ["if (currentPropertyNames == null) {\n", "    // Handle the case of null currentPropertyNames\n", "    return;\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle implicitProto being null to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1574, "new_lines": ["if (currentPropertyNames == null) {\n", "    // Handle case of null currentPropertyNames\n", "    return;\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n"]}]}
]

[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n"]}]}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Modify for potential null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle potential null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check if implicitProto is null to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Add check for null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle potential null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for potential null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines":[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handling null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [], "modifications": []
}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Handle unknown type annotations to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    // Handle the case of proxy to a non-existent object\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Fix for possible NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Fix for potential NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by checking implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Handle possible NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Preventing NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Handling implicitProto for preventing NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Fix for NullPointerException possibility\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Avoiding NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Handling potential NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by checking implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Fix for possible NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Handle possible NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n"}]}, {"line_number": 1574, "new_lines": ["if (current[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException", "if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle unknown type annotations to prevent NullPointerException", "if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException", "if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException", "if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle unknown type annotations to prevent NullPointerException", "if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException", "if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException", "if (implicitProto == null) {", "    // Handle the case of proxy to a non-existent object", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle unknown type annotations to prevent NullPointerException", "if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}],
"deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames == null) {"]}, {"line_number": 1575, "new_lines": ["if (currentPropertyNames != null) {", "for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto == null) {", "    currentPropertyNames = new HashSet<>();", "} else {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null && !currentPropertyNames.isEmpty()) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null && currentPropertyNames.size() > 0) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null && !currentPropertyNames.isEmpty()) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames == null) {"]}, {"line_number": 1575, "new_lines": ["if (currentPropertyNames != null) {", "for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames == null || currentPropertyNames.isEmpty()) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null && !currentPropertyNames.isEmpty()) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["if (implicitProto != null) {", "    currentPropertyNames = implicitProto.getOwnPropertyNames();", "} else {", "    currentPropertyNames = new HashSet<>();", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames == null) {"]}, {"line_number": 1575, "new_lines": ["if (currentPropertyNames != null) {", "for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}], "deletions": [], "modifications": []
}
][{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handling null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle potential null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by handling null implicitProto case\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Mitigate NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle possible null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Ensure no NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling potential null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException scenario\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto case\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Ensure no NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle potential null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}, {"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "insertions": [{"line_number": 1572, "new_lines": ["// Handle unknown type annotations to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    // Handle the case of proxy to a non-existent object\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for implicitProto being null to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Modify handling of implicitProto null scenario to avoid NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by checking for null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Fix NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto case to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Fix NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto case to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for implicitProto being null to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}],
"deletions": [],
"modifications": []
}
][
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle possible null implicitProto to prevent NullPointerException\n", "if (implicitProto != null) {"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check if implicitProto is null to prevent NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by checking implicitProto\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle potential null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Checking for null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Avoid NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle potential implicitProto being null to prevent NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handling null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by checking for null implicitProto\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handling null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Prevent NullPointerException by handling null implicitProto\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handling null implicitProto to avoid NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Check for null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {", "    return;"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {", "    ObjectType oType = properties.get(name);", "    if (oType != null) {", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));", "        }", "    }", "    currentProperties.put(name, interfaceType);", "}"]}]}
,
{"file_name": "com/google/javascript/jscomp[
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n", "    ObjectType oType = properties.get(name);\n", "    if (oType != null) {\n", "        if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {\n", "            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));\n", "        }\n", "    }\n", "    currentProperties.put(name, interfaceType);\n", "}"]}]},
{"file_name": "com/google/javascript/jscomp/TypeCheck.java", "target_lines": [["1572", "//"], ["1574", "//"], ["1575", "//"]], "insertions": [{"line_number": 1572, "new_lines": ["// Handle null implicitProto to prevent NullPointerException\n", "if (implicitProto == null) {\n", "    currentPropertyNames = new HashSet<>();\n", "} else {\n", "    currentPropertyNames = implicitProto.getOwnPropertyNames();\n", "}"]}, {"line_number": 1574, "new_lines": ["if (currentPropertyNames != null) {\n"]}, {"line_number": 1575, "new_lines": ["for (String name : currentPropertyNames) {\n