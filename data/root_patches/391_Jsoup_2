###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        String tagName = tq.consumeElementName();', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("</", "<", "", ">")) {', '            String key = tq.consumeElementName();', '            String value = "";', '            if (tq.matches("=")) {', '                tq.consume("=");', '                value = tq.consumeAttributeValue();', '            }', '            attributes.put(key, value);', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element element = new Element(tag, baseUri, attributes);', '        doc.appendChild(element);', '', '        if (!tq.matchesEmptyElementTag()) {', '            stack.add(element);', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        String tagName = "";', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("</", "<", "", ">")) {', '            String key = tq.consumeElementName();', '            String value = "";', '            if (tq.matches("=")) {', '                tq.consume("=");', '                value = tq.consumeAttributeValue();', '            }', '            attributes.put(key, value);', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element element = new Element(tag, baseUri, attributes);', '        doc.appendChild(element);', '', '        if (!tq.matchesEmptyElementTag()) {', '            stack.add(element);', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = "";', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("</", "<", "", ">")) {', '            String key = tq.consumeElementName();', '            String value = "";', '            if (tq.matches("=")) {', '                tq.consume("=");', '                value = tq.consumeAttributeValue();', '            }', '            attributes.put(key, value);', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element element = new Element(tag, baseUri, attributes);', '        doc.appendChild(element);', '', '        if (!tq.matchesEmptyElementTag()) {', '            stack.add(element);', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        String tagName = tq.consumeElementName();']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = tq.consumeElementName();']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        tq.consume();', '        String tagName = tq.consumeElementName();']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['    private void parseStartTag() {', '        String name = tq.consumeElementSelector();', '        Attributes attributes = new Attributes();', '        while (!tq.matchesAny("</", ">")) {', '            Attribute attribute = tq.consumeAttribute();', '            attributes.put(attribute);', '        }', '        Element el = new Element(Tag.valueOf(name), baseUri, attributes);', '        stack.getLast().appendChild(el);', '        if (!tq.matchesEmpty()) {', "            if (tq.matchChomp('/')) {", '                // self closing tag. <img />', '                el.isSelfClosing(true);', '            }', '        }', '        if (!el.tag().isKnownTag()) {', '            // unknown tag, remember for output. see above', '            el.attr("___tag", name);', '        }', '        stack.add(el);', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        String tagName = tq.consumeElementName();', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null)', '                attributes.put(attribute);', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag))', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            else', '                dataNode = new DataNode(data, baseUri);', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = tq.consumeElementName();', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null)', '                attributes.put(attribute);', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag))', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            else', '                dataNode = new DataNode(data, baseUri);', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = tq.consumeElementName();', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null) {', '                attributes.put(attribute);', '            }', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag)) {', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            } else {', '                dataNode = new DataNode(data, baseUri);', '            }', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = tq.consumeElementName();', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null) {', '                attributes.put(attribute);', '            }', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag)) {', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            } else {', '                dataNode = new DataNode(data, baseUri);', '            }', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = "";', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null) {', '                attributes.put(attribute);', '            }', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag)) {', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            } else {', '                dataNode = new DataNode(data, baseUri);', '            }', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = "";', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null) {', '                attributes.put(attribute);', '            }', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag)) {', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            } else {', '                dataNode = new DataNode(data, baseUri);', '            }', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href != null && href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['    private void parseStartTag() {', '        String tagName = tq.consumeElementSelector();', '        Attributes attributes = new Attributes();', '        while (!tq.matchesAny("</", ">", "/>")) {', '            Attribute attribute = tq.consumeAttribute();', '            attributes.put(attribute);', '        }', '        Element el = new Element(Tag.valueOf(tagName), baseUri, attributes);', '        stack.peek().appendChild(el);', '        if (tq.matches("/>")) {', '            tq.advance();', '        } else if (tagName.equalsIgnoreCase("script") && tq.matchesIgnoreCase("type", "text/template")) {', '            // handle script type=text/template as data, not tags', '            String data = tq.chompTo("</script>").trim();', '            el.appendChild(new DataNode(data, baseUri));', '        } else if (tagName.equalsIgnoreCase("style") && !tq.matchesIgnoreCase("scoped", DQ, SQ)) {', '            // handle style without scoped attribute as data, not tags', '            String data = tq.chompTo("</style>").trim();', '            el.appendChild(new DataNode(data, baseUri));', '        } else {', '            stack.add(el);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = tq.consumeElementName();', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null) {', '                attributes.put(attribute);', '            }', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag)) {', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            } else {', '                dataNode = new DataNode(data, baseUri);', '            }', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href != null && href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['    private void parseStartTag() {', '        String name = tq.consumeElementSelector();', '        Attributes attributes = new Attributes();', '        while (!tq.matchesAny("</", ">") && !tq.isEmpty()) {', '            Attribute attribute = tq.consumeAttribute();', '            attributes.put(attribute);', '        }', '        Element el = new Element(Tag.valueOf(name), baseUri, attributes);', '        stack.getLast().appendChild(el);', '        if (!tq.isEmpty()) {', '            if (tq.matches("/>")) {', '                // self closing tag', '                tq.advance();', '            } else if (tq.matches(">")) {', '                // do nothing', '            }', '        }', '        stack.add(el);', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = tq.consumeElementName();', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null) {', '                attributes.put(attribute);', '            }', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag)) {', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            } else {', '                dataNode = new DataNode(data, baseUri);', '            }', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href != null && href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/Parser.java', 'insertions': [{'line_number': 148, 'new_lines': ['        TokenQueue tq = new TokenQueue(input);', '        String tagName = tq.consumeElementName();', '        Attributes attributes = new Attributes();', '', '        while (!tq.matchesAny("<", "/>", ">") && !tq.isEmpty()) {', '            Attribute attribute = parseAttribute();', '            if (attribute != null) {', '                attributes.put(attribute);', '            }', '        }', '', '        Tag tag = Tag.valueOf(tagName);', '        Element child = new Element(tag, baseUri, attributes);', '', '        boolean isEmptyElement = tag.isEmpty();', '        if (tq.matchChomp("/>") || tq.matchChomp("<") || tq.matchChomp("</")) {', '            isEmptyElement = true;', '        }', '        addChildToParent(child, isEmptyElement);', '', '        if (tag.isData()) {', '            String data = tq.chompTo("</" + tagName);', '            tq.chompTo(">");', '', '            Node dataNode;', '            if (tag.equals(titleTag) || tag.equals(textareaTag)) {', '                dataNode = TextNode.createFromEncoded(data, baseUri);', '            } else {', '                dataNode = new DataNode(data, baseUri);', '            }', '            child.appendChild(dataNode);', '        }', '', '        if (child.tagName().equals("base")) {', '            String href = child.absUrl("href");', '            if (href != null && href.length() != 0) {', '                baseUri = href;', '                doc.setBaseUri(href);', '            }', '        }']}]}]


