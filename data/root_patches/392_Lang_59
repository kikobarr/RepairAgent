###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [{'line_number': 882, 'new_lines': ['        int padSize = Math.max(0, width - str.length());']}], 'deletions': [884], 'modifications': [{'line_number': 884, 'modified_line': '        return append(str).appendPadding(padSize, padChar);'}]}]

###Fix:
[]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [884], 'modifications': [{'line_number': 882, 'modified_line': '        int padSize = Math.max(0, width - str.length());'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [884], 'modifications': [{'line_number': 882, 'modified_line': '        int padSize = Math.max(0, width - str.length());'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': '                str.getChars(0, Math.min(strLen, buffer.length - size), buffer, size);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, buffer.length - size), buffer, size);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [{'line_number': 882, 'new_lines': ['        int padSize = Math.max(0, width - str.length());']}], 'deletions': [884], 'modifications': [{'line_number': 884, 'modified_line': '        return append(str).appendPadding(padSize, padChar);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, buffer.length - size), buffer, size);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, buffer.length - size), buffer, Math.min(size, buffer.length - strLen));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, buffer.length - size), buffer, Math.min(size, buffer.length - strLen));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [{'line_number': 882, 'new_lines': ['        int padSize = Math.max(0, Math.min(width, buffer.length - size) - str.length());']}], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, Math.min(width, buffer.length - size)), buffer, Math.min(size, buffer.length - strLen));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [{'line_number': 882, 'new_lines': ['        int padSize = Math.max(0, Math.min(width, buffer.length - size, str.length()));']}], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, Math.min(width, buffer.length - size)), buffer, Math.min(size, buffer.length - strLen));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, Math.min(width, buffer.length - size)), buffer, Math.min(size, buffer.length - strLen));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, Math.min(width, buffer.length - size)), buffer, Math.min(size, Math.min(buffer.length, strLen)));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/text/StrBuilder.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 884, 'modified_line': 'str.getChars(0, Math.min(strLen, Math.min(width, buffer.length - size)), buffer, Math.min(size, Math.min(buffer.length, strLen)));'}]}]


