###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && out.length <= outAvail) {'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && out.length <= outAvail) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['420', '        if (out != null && out.length == outAvail) {']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['170', '                        base64.setInitialBuffer(b, offset, len);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && out.length <= outAvail) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && out.length <= outAvail) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length <= outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && out.length == outAvail) {']}], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && out.length <= outAvail) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'target_lines': [['419', '    void setInitialBuffer(byte[] out, int outPos, int outAvail) {'], ['420', '        if (out != null && out.length == outAvail) {'], ['421', '            buffer = out;'], ['422', '            pos = outPos;'], ['423', '            readPos = outPos;'], ['424', '        }'], ['425', '    }']], 'insertions': [{'line_number': 420, 'new_lines': ['        if (out != null && outPos >= 0 && outPos < out.length && outAvail >= 0 && outAvail <= out.length) {']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'target_lines': [['169', '                    if (c > 0 && b.length == len) {'], ['170', '                        base64.setInitialBuffer(b, offset, len);'], ['171', '                    }']], 'insertions': [{'line_number': 170, 'new_lines': ['                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/codec/binary/Base64.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 420, 'modified_line': '        if (out != null && out.length <= outAvail) {'}]}, {'file_name': 'org/apache/commons/codec/binary/Base64InputStream.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 170, 'modified_line': '                        base64.setInitialBuffer(b, offset, Math.min(len, b.length));'}]}]


