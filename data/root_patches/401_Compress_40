###Fix:
[]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();', '            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;', '        }']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}]}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'insertions': [{'line_number': 85, 'new_lines': ['        while (bitsCachedSize < count) {', '            final long nextByte = in.read();', '            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();', '            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 99, 'new_lines': ['            // Inserted new lines based on AI-generated code', '            long result = 0;', '            int bitsRemaining = count;', '            while (bitsRemaining > 0) {', '                if (currentByte == -1) {', '                    currentByte = in.read();', '                    currentBytePos = 7;', '                }', '                int bitsToRead = Math.min(bitsRemaining, currentBytePos + 1);', '                long mask = (1L << bitsToRead) - 1;', '                long bits = currentByte & mask;', '                bits <<= (bitsRemaining - bitsToRead);', '                result |= bits;', '                bitsRemaining -= bitsToRead;', '                currentByte >>= bitsToRead;', '                currentBytePos -= bitsToRead;', '            }', '            return result;']}]}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': []}, {'line_number': 108, 'new_lines': []}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {']}, {'line_number': 99, 'new_lines': ['            final long nextByte = in.read();']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': []}, {'line_number': 108, 'new_lines': []}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/utils/BitInputStream.java', 'target_lines': [['85', '        while (bitsCachedSize < count) {'], ['98', '//'], ['99', '//'], ['101', '//'], ['108', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['        if (bitsCachedSize < count) {', '            final long nextByte = in.read();']}, {'line_number': 99, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 101, 'new_lines': ['            if (nextByte < 0) {', '                return nextByte;', '            }', '            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '                bitsCached |= (nextByte << bitsCachedSize);', '            } else {', '                bitsCached <<= 8;', '                bitsCached |= nextByte;', '            }', '            bitsCachedSize += 8;']}, {'line_number': 108, 'new_lines': ['        final long bitsOut;', '        if (byteOrder == ByteOrder.LITTLE_ENDIAN) {', '            bitsOut = (bitsCached & MASKS[count]);', '            bitsCached >>>= count;', '        } else {', '            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];', '        }', '        bitsCachedSize -= count;', '        return bitsOut;']}], 'deletions': [], 'modifications': []}]


