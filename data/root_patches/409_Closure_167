###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 410, 'modified_line': 'shouldRefineLeft = leftIsRefineable && restrictedLeftType != null;'}, {'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null;'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 410, 'modified_line': 'shouldRefineLeft = leftIsRefineable && restrictedLeftType != null && !restrictedLeftType.equals(originalType);'}, {'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null && !restrictedRightType.equals(originalType);'}]}]

###Fix:
[]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 410, 'modified_line': 'shouldRefineLeft = leftIsRefineable && restrictedLeftType != null && !restrictedLeftType.equals(originalType);'}, {'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null && !restrictedRightType.equals(originalType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 410, 'modified_line': 'shouldRefineLeft = leftIsRefineable && restrictedLeftType != null && !restrictedLeftType.equals(originalType);'}, {'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null && !restrictedRightType.equals(originalType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 410, 'modified_line': 'shouldRefineLeft = leftIsRefineable && restrictedLeftType != null;'}, {'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null;'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [{'line_number': 405, 'new_lines': ['  public void maybeRestrictTwoNames(String[] names) {', '    if (names.length > 2) {', '        names = Arrays.copyOfRange(names, 0, 2);', '    }', '    // Your code here', '  }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 410, 'modified_line': 'shouldRefineLeft = leftIsRefineable && restrictedLeftType != null && !restrictedLeftType.equals(originalType);'}, {'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null && !restrictedRightType.equals(originalType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 410, 'modified_line': 'shouldRefineLeft = leftIsRefineable && restrictedLeftType != null && !restrictedLeftType.equals(originalType);'}, {'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null && !restrictedRightType.equals(originalType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheckTest.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 7, 'modified_line': '        "var Type = function () {\\n" +\n        "  /** @type {Type} */ {\\n" +\n        "  this.me_ = this;\\n" +\n        "};\\n" +\n        "Type.prototype.doIt = function() {\\n" +\n        "  var me = this.me_;\\n" +\n        "  for (var i = 0; i < me.unknownProp; i++) {}\\n" +\n        "};\\n",'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 430, 'modified_line': '          type.getRestrictedTypeGivenToBooleanOutcome(outcome); // Inserted fix for bug'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null;'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 412, 'modified_line': 'shouldRefineRight = rightIsRefineable && restrictedRightType != null;'}]}]


