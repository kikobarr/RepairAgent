###Fix:
[{'file_name': 'com.google.javascript.jscomp.TypeInference', 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1130, 'modified_line': 'getNativeType(VOID_TYPE).getLeastSupertype(propType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer ='], ['1130', '                  getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1131', '            }'], ['1132', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1133', '          }'], ['1134', '        }'], ['1135', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': 'typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer ='], ['1130', '                  getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1131', '            }'], ['1132', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1133', '          }'], ['1134', '        }'], ['1135', '      }']], 'insertions': [{'line_number': 1129, 'new_lines': ['                  typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);']}, {'line_number': 1131, 'new_lines': ['            }'], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}]}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }']], 'insertions': [{'line_number': 1129, 'new_lines': ['                  typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);']}, {'line_number': 1131, 'new_lines': ['            ']}], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          }'}, {'line_number': 1133, 'modified_line': '        }'}, {'line_number': 1134, 'modified_line': '      }'}, {'line_number': 1135, 'modified_line': '    }'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            '}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          }'}, {'line_number': 1133, 'modified_line': '        }'}, {'line_number': 1134, 'modified_line': '      }'}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1135, 'modified_line': '}'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1135, 'modified_line': '}'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1135, 'modified_line': '}'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            }'}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            '}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            '}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            '}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1121', '    if (constraintObj != null && constraintObj.isRecordType()) {'], ['1122', '      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());'], ['1123', '      if (objType != null) {'], ['1124', '        for (String prop : constraintObj.getOwnPropertyNames()) {'], ['1125', '          JSType propType = constraintObj.getPropertyType(prop);'], ['1126', '          if (!objType.isPropertyTypeDeclared(prop)) {'], ['1127', '            JSType typeToInfer = propType;'], ['1128', '            if (!objType.hasProperty(prop)) {'], ['1129', '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'], ['1130', '            }'], ['1131', '            objType.defineInferredProperty(prop, typeToInfer, null);'], ['1132', '          }'], ['1133', '        }'], ['1134', '      }'], ['1135', '    ']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 1126, 'modified_line': 'if (!objType.isPropertyTypeDeclared(prop) && !objType.hasProperty(prop)) {'}, {'line_number': 1127, 'modified_line': '            JSType typeToInfer = propType;'}, {'line_number': 1128, 'modified_line': '            if (!objType.hasProperty(prop)) {'}, {'line_number': 1129, 'modified_line': '              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);'}, {'line_number': 1130, 'modified_line': '            '}, {'line_number': 1131, 'modified_line': '            objType.defineInferredProperty(prop, typeToInfer, null);'}, {'line_number': 1132, 'modified_line': '          '}, {'line_number': 1133, 'modified_line': '        '}, {'line_number': 1134, 'modified_line': '      '}, {'line_number': 1135, 'modified_line': '    '}]}]


