###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 162, 'modified_line': '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : max - generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [{'line_number': 162, 'new_lines': ['                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']}], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': 'optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);'}]}]

###Fix:
[]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': 'optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': 'optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': 'optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': 'optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': 'optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': 'final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': 'optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 146, 'modified_line': '        return optimize(f, goal, min, max, 0);'}, {'line_number': 160, 'modified_line': '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 162, 'modified_line': '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 146, 'modified_line': '        return optimize(f, goal, min, max, 0);'}, {'line_number': 160, 'modified_line': '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 161, 'modified_line': '                final double bound2 = (i == 0) ? max : max - generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': '                final double bound2 = (i == 0) ? max : max - generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [{'line_number': 162, 'new_lines': ['                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']}], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2);']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound1), FastMath.max(bound2, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 160, 'modified_line': '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'}, {'line_number': 161, 'modified_line': '                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);'}, {'line_number': 162, 'modified_line': '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound1), FastMath.max(bound2, bound2);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : max - generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 161, 'modified_line': 'final double bound2 = (i == 0) ? max : max - generator.nextDouble() * (max - min);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java', 'target_lines': [['146', '        return optimize(f, goal, min, max, 0);'], ['160', '                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);'], ['161', '                final double bound2 = (i == 0) ? max : max - generator.nextDouble() * (max - min);'], ['162', '                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));']], 'insertions': [], 'deletions': [], 'modifications': []}]


