###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}, {'line_number': 396, 'new_lines': ['        return Math.floor(Math.exp(factorialLog(n)) + 0.5);']}], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialLog(n));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 377, 'modified_line': '        return Math.round(Math.exp(factorialLog(n)));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialLog(n)));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}, {'line_number': 377, 'modified_line': '        return Math.round(Math.exp(factorialLog(n)));'}, {'line_number': 396, 'modified_line': '        return Math.floor(Math.exp(factorialLog(n)) + 0.5);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 377, 'modified_line': '        return Math.floor(Math.exp(factorialLog(n)) + 0.5);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}, {'line_number': 396, 'new_lines': ['        return Math.floor(Math.exp(factorialLog(n)) + 0.5);']}], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialDouble(n));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}, {'line_number': 396, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialDouble(n));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}, {'line_number': 396, 'new_lines': ['        return Math.floor(Math.exp(factorialLog(n)) + 0.5);']}], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialDouble(n));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}, {'line_number': 377, 'modified_line': '        return Math.round(Math.exp(factorialLog(n)));'}, {'line_number': 396, 'modified_line': '        return Math.floor(Math.exp(factorialLog(n)) + 0.5);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}, {'line_number': 396, 'new_lines': ['        return Math.floor(Math.exp(factorialLog(n)) + 0.5);']}], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialLog(n));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}, {'line_number': 377, 'modified_line': '        return Math.round(Math.exp(factorialLog(n)));'}, {'line_number': 396, 'modified_line': '        return Math.floor(Math.exp(factorialLog(n)) + 0.5);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}], 'deletions': [], 'modifications': [{'line_number': 377, 'modified_line': '        return Math.round(Math.exp(factorialLog(n)));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 377, 'modified_line': '        return Math.round(Math.exp(factorialLog(n)));'}, {'line_number': 396, 'modified_line': '        return Math.floor(Math.exp(factorialLog(n)) + 0.5);'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}, {'line_number': 396, 'new_lines': ['        return Math.floor(Math.exp(factorialLog(n)) + 0.5);']}], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialDouble(n)));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialLog(n)));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'target_lines': [['345', '        long result = Math.round(factorialDouble(n));'], ['346', '        if (result == Long.MAX_VALUE) {'], ['377', '//'], ['396', '//']], 'insertions': [{'line_number': 377, 'new_lines': ['        return Math.round(Math.exp(factorialLog(n)));']}, {'line_number': 396, 'new_lines': ['        return Math.floor(Math.exp(factorialLog(n)) + 0.5);']}], 'deletions': [], 'modifications': [{'line_number': 345, 'modified_line': '        long result = Math.round(Math.exp(factorialLog(n)));'}, {'line_number': 346, 'modified_line': '        if (result == Long.MAX_VALUE) {'}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/util/MathUtils.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 377, 'modified_line': '        return Math.round(Math.exp(factorialLog(n)));'}]}]


