###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'insertions': [{'line_number': 18, 'new_lines': ["        if (input.charAt(pos) == '\\r' && (pos + 1 < input.length()) && input.charAt(pos + 1) == '\\n') {", "            pos++; // skip the '\\n' after '\\r'", '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'insertions': [{'line_number': 18, 'new_lines': ["        if (input.charAt(pos) == '\\r' && (pos + 1 < input.length()) && input.charAt(pos + 1) == '\\n') {", "            pos++; // skip the '\\n' after '\\r'", '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length());'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() + 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length());'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() - 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() - 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() - 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length());'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() - 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() - 2);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'insertions': [{'line_number': 18, 'new_lines': ["        if (input.charAt(pos) == '\\r' && (pos + 1 < input.length()) && input.charAt(pos + 1) == '\\n') {", "            pos++; // skip the '\\n' after '\\r'", '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'insertions': [{'line_number': 18, 'new_lines': ["        if (input.charAt(pos) == '\\r' && (pos + 1 < input.length()) && input.charAt(pos + 1) == '\\n') {", "            pos++; // skip the '\\n' after '\\r'", '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'insertions': [{'line_number': 18, 'new_lines': ["        if (input.charAt(pos) == '\\r' && (pos + 1 < input.length()) && input.charAt(pos + 1) == '\\n') {", "            pos++; // skip the '\\n' after '\\r'", '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() + 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'insertions': [{'line_number': 18, 'new_lines': ["        if (input.charAt(pos) == '\\r' && (pos + 1 < input.length()) && input.charAt(pos + 1) == '\\n') {", "            pos++; // skip the '\\n' after '\\r'", '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length());'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() - 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'insertions': [{'line_number': 18, 'new_lines': ["        if (input.charAt(pos) == '\\r' && (pos + 1 < input.length()) && input.charAt(pos + 1) == '\\n') {", "            pos++; // skip the '\\n' after '\\r'", '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length());'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() + 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length());'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length());'}], 'insertions': [], 'deletions': []}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'insertions': [{'line_number': 18, 'new_lines': ["        if (input.charAt(pos) == '\\r' && (pos + 1 < input.length()) && input.charAt(pos + 1) == '\\n') {", "            pos++; // skip the '\\n' after '\\r'", '        }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() - 1);'}]}]

###Fix:
[{'file_name': 'org/jsoup/parser/CharacterReader.java', 'modifications': [{'line_number': 18, 'modified_line': '        String data = input.substring(pos, input.length() - 1);'}], 'insertions': []}]


