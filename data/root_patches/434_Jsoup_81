###Fix:
[]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 114, 'new_lines': ['            charsetName = Charset.forName(defaultCharset).name(); // determine from meta. safe first parse as UTF-8\n']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 114, 'new_lines': ['            charsetName = Charset.forName(defaultCharset).name(); // determine from meta. safe first parse as UTF-8']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        ConstrainableInputStream cis = ConstrainableInputStream.wrap(input, bufferSize, firstReadBufferSize);', '        boolean fullyConsumed = false;', '        try {', '            if (charset == null) {', '                charset = defaultCharset;', '            }', '', '            Document doc = DataUtil.parseByteData(cis, charset, contentType, parser, bufferSize);', '            fullyConsumed = true;', '            return doc;', '        } finally {', '            if (!fullyConsumed) {', '                dbg("Did not fully consume input stream");', '            }', '            cis.close();', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charset = Charset.forName(charset);', '        BufferedReader reader = new BufferedReader(new InputStreamReader(input, charset), bufferSize);', '        StringBuilder inputHtml = new StringBuilder();', '        char[] buffer = new char[firstReadBufferSize];', '        int read = reader.read(buffer);', '        while (read != -1 && inputHtml.length() < bufferSize) {', '            inputHtml.append(buffer, 0, read);', '            read = reader.read(buffer);', '        }', '        reader.close();', '        return parser.parseInput(inputHtml.toString(), contentType);', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charset = Charset.forName(charset);', '        BufferedReader reader = new BufferedReader(new InputStreamReader(input, charset), bufferSize);', '        StringBuilder inputHtml = new StringBuilder();', '        char[] buffer = new char[firstReadBufferSize];', '        int read = reader.read(buffer);', '        while (read != -1 && inputHtml.length() < bufferSize) {', '            inputHtml.append(buffer, 0, read);', '            read = reader.read(buffer);', '        }', '        reader.close();', '        return parser.parseInput(inputHtml.toString(), contentType);', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charset = Charset.forName(charset);', '        if (charset != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charset), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (IllegalCharsetNameException e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (Exception e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String baseUri, String charsetName, Parser parser) throws IOException {', '        ConstrainableInputStream cis = ConstrainableInputStream.wrap(input, bufferSize, firstReadBufferSize);', '        cis.bufferUp();', '        String charset = cis.getCharsetFromContentType(baseUri, charsetName); // get charset from content type', '        if (charset == null) {', '            charset = defaultCharset;', '        }', '        Document doc = Document.createShell(baseUri, charset); // create a new Document shell', '        Element root = doc.children().first();', '        root.append(new XmlDeclaration(parser, charset, false));', '        parser.getParseError().reset(); // reset parse error', '        try {', '            parser.parseInput(cis, doc); // parse input stream', '        } catch (UncheckedIOException e) {', '            throw e.ioException(); // throw unchecked IO exception', '        }', '        cis.close(); // close input stream', '        return doc;', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String baseUri, Parser parser) throws IOException {', '        // Wrap input stream with BufferedReader for charset detection', '        input = ConstrainableInputStream.wrap(input, bufferSize, baseUri, firstReadBufferSize);', '        ', '        Charset detectedCharset = Charset.forName(defaultCharset); // Default to UTF-8 if charset detection fails', '        if (charset != null) {', '            try {', '                detectedCharset = Charset.forName(charset);', '            } catch (IllegalCharsetNameException e) {', '                // Invalid charset, fallback to default', '            }', '        }', '        ', '        // Instantiate a BufferedReader with the detected charset', '        BufferedReader reader = new BufferedReader(new InputStreamReader(input, detectedCharset));', '        ', '        // Parse the document using the specified parser', '        return parser.parseInput(reader, baseUri);', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String baseUri, String charset, Parser parser) {', '        try {', '            Document doc = DataUtil.parseByteData(input, charset, baseUri, parser);', '            return doc;', '        } catch (IOException e) {', '            throw new UncheckedIOException(e);', '        }', '    }']}]}]

###Fix:
[]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 114, 'new_lines': ['            charsetName = Charset.forName(defaultCharset).name(); // determine from meta. safe first parse as UTF-8']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (Exception e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (Exception e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (Exception e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (Exception e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (Exception e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read = reader.read(buffer);', '            while (read != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '                read = reader.read(buffer);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (Exception e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read;', '            while ((read = reader.read(buffer)) != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charset, String contentType, Parser parser) throws IOException {', '        Charset charsetObj = null;', '        try {', '            charsetObj = Charset.forName(charset);', '        } catch (Exception e) {', '            // Handle invalid charset name', '            charsetObj = Charset.forName(defaultCharset); // Fallback to default charset', '        }', '        if (charsetObj != null) {', '            BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetObj), bufferSize);', '            StringBuilder inputHtml = new StringBuilder();', '            char[] buffer = new char[firstReadBufferSize];', '            int read;', '            while ((read = reader.read(buffer)) != -1 && inputHtml.length() < bufferSize) {', '                inputHtml.append(buffer, 0, read);', '            }', '            reader.close();', '            return parser.parseInput(inputHtml.toString(), contentType);', '        } else {', '            // Handle charset error or fallback to default behavior', '            return new Document(contentType);', '        }', '    }']}]}]


