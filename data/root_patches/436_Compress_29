###Fix:
[{'file_name': 'org/apache/commons/compress/archivers/ArchiveStreamFactory.java', 'insertions': [{'line_number': 297, 'new_lines': ['            if (ZIP.equalsIgnoreCase(archiverName)) {', '                if (entryEncoding != null) {', '                    return new ZipArchiveInputStream(in, entryEncoding);', '                } else {', '                    return new ZipArchiveInputStream(in);', '                }', '            } else if (TAR.equalsIgnoreCase(archiverName)) {', '                if (entryEncoding != null) {', '                    return new TarArchiveInputStream(in, entryEncoding);', '                } else {', '                    return new TarArchiveInputStream(in);', '                }']}], 'modifications': [{'line_number': 312, 'modified_line': '    // Create an archive input stream from an input stream, autodetecting the archive type from the first few bytes of the stream. The InputStream must support marks, like BufferedInputStream.'}]}]

###Fix:
[{'file_name': 'org/apache/commons/compress/archivers/ArchiveStreamFactory.java', 'target_lines': [['297', '//'], ['298', '//'], ['360', '//'], ['361', '//']], 'insertions': [{'line_number': 297, 'new_lines': ['            if (ZIP.equalsIgnoreCase(archiverName)) {', '                if (entryEncoding != null) {', '                    return new ZipArchiveInputStream(in, entryEncoding);', '                } else {', '                    return new ZipArchiveInputStream(in);', '                }']}, {'line_number': 298, 'new_lines': ['            if (TAR.equalsIgnoreCase(archiverName)) {', '                if (entryEncoding != null) {', '                    return new TarArchiveInputStream(in, entryEncoding);', '                } else {', '                    return new TarArchiveInputStream(in);', '                }']}, {'line_number': 360, 'new_lines': ['            if (CPIO.equalsIgnoreCase(archiverName)) {', '                if (entryEncoding != null) {', '                    return new CpioArchiveInputStream(in, entryEncoding);', '                } else {', '                    return new CpioArchiveInputStream(in);', '                }']}, {'line_number': 361, 'new_lines': ['            if (ARJ.equalsIgnoreCase(archiverName)) {', '                return new ArjArchiveInputStream(in);']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java', 'target_lines': [['97', '//'], ['155', '//']], 'insertions': [{'line_number': 97, 'new_lines': ['            if (entryEncoding != null) {', '                return new CpioArchiveInputStream(in, entryEncoding);', '            } else {', '                return new CpioArchiveInputStream(in);', '            }']}, {'line_number': 155, 'new_lines': ['            if (entryEncoding != null) {', '                return new CpioArchiveInputStream(in, entryEncoding);', '            } else {', '                return new CpioArchiveInputStream(in);', '            }']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java', 'target_lines': [['98', '//'], ['162', '//']], 'insertions': [{'line_number': 98, 'new_lines': ['            if (entryEncoding != null) {', '                return new CpioArchiveOutputStream(out, entryEncoding);', '            } else {', '                return new CpioArchiveOutputStream(out);', '            }']}, {'line_number': 162, 'new_lines': ['            if (entryEncoding != null) {', '                return new CpioArchiveOutputStream(out, entryEncoding);', '            } else {', '                return new CpioArchiveOutputStream(out);', '            }']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java', 'target_lines': [['80', '//'], ['104', '//']], 'insertions': [{'line_number': 80, 'new_lines': ['            if (entryEncoding != null) {', '                return new DumpArchiveInputStream(in, entryEncoding);', '            } else {', '                return new DumpArchiveInputStream(in);', '            }']}, {'line_number': 104, 'new_lines': ['            if (entryEncoding != null) {', '                return new DumpArchiveInputStream(in, entryEncoding);', '            } else {', '                return new DumpArchiveInputStream(in);', '            }']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java', 'target_lines': [['79', '//'], ['142', '//']], 'insertions': [{'line_number': 79, 'new_lines': ['            if (entryEncoding != null) {', '                return new TarArchiveInputStream(in, entryEncoding);', '            } else {', '                return new TarArchiveInputStream(in);', '            }']}, {'line_number': 142, 'new_lines': ['            if (entryEncoding != null) {', '                return new TarArchiveInputStream(in, entryEncoding);', '            } else {', '                return new TarArchiveInputStream(in);', '            }']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java', 'target_lines': [['90', '//'], ['155', '//']], 'insertions': [{'line_number': 90, 'new_lines': ['            if (entryEncoding != null) {', '                return new TarArchiveOutputStream(out, entryEncoding);', '            } else {', '                return new TarArchiveOutputStream(out);', '            }']}, {'line_number': 155, 'new_lines': ['            if (entryEncoding != null) {', '                return new TarArchiveOutputStream(out, entryEncoding);', '            } else {', '                return new TarArchiveOutputStream(out);', '            }']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java', 'target_lines': [['65', '//'], ['184', '//']], 'insertions': [{'line_number': 65, 'new_lines': ['            if (entryEncoding != null) {', '                return new ZipArchiveInputStream(in, entryEncoding);', '            } else {', '                return new ZipArchiveInputStream(in);', '            }']}, {'line_number': 184, 'new_lines': ['            if (entryEncoding != null) {', '                return new ZipArchiveInputStream(in, entryEncoding);', '            } else {', '                return new ZipArchiveInputStream(in);', '            }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/compress/archivers/ArchiveStreamFactory.java', 'insertions': [{'line_number': 297, 'new_lines': ['            if (ZIP.equalsIgnoreCase(archiverName)) {', '                if (entryEncoding != null) {', '                    return new ZipArchiveInputStream(in, entryEncoding);', '                } else {', '                    return new ZipArchiveInputStream(in);', '                }', '            } else if (TAR.equalsIgnoreCase(archiverName)) {', '                if (entryEncoding != null) {', '                    return new TarArchiveInputStream(in, entryEncoding);', '                } else {', '                    return new TarArchiveInputStream(in);', '                }']}], 'modifications': [{'line_number': 312, 'modified_line': '// Create an archive input stream from an input stream, autodetecting the archive type from the first few bytes of the stream. The InputStream must support marks, like BufferedInputStream.'}]}]

###Fix:
[{'file_name': 'org/apache/commons/compress/archivers/ArchiveStreamFactory.java', 'target_lines': [['297', '//'], ['298', '//'], ['360', '//'], ['361', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java', 'target_lines': [['97', '//'], ['155', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java', 'target_lines': [['98', '//'], ['162', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java', 'target_lines': [['80', '//'], ['104', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java', 'target_lines': [['79', '//'], ['142', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java', 'target_lines': [['90', '//'], ['155', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java', 'target_lines': [['65', '//'], ['184', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[]


