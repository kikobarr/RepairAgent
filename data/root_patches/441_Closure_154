###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'insertions': [{'line_number': 1052, 'new_lines': ['if (propertyType.isUnknownType() || interfacePropType.isUnknownType()) {', 'compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,', 'interfaceType.getTopMostDefiningType(propertyName).toString(),', 'interfacePropType.toString(), propertyType.toString()));', '}']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString()));'], ['1057', '          }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString()));'], ['1057', '          }']], 'insertions': [{'line_number': 1052, 'new_lines': ['if (propertyType.isUnknownType() || interfacePropType.isUnknownType()) {', 'compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,', 'interfaceType.getTopMostDefiningType(propertyName).toString(),', 'interfacePropType.toString(), propertyType.toString()));', '}']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }']], 'insertions': [{'line_number': 1052, 'new_lines': ['if (propertyType.isUnknownType() || interfacePropType.isUnknownType()) {', 'compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,', 'interfaceType.getTopMostDefiningType(propertyName).toString(),', 'interfacePropType.toString(), propertyType.toString()));', '}']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }']], 'insertions': [{'line_number': 1052, 'new_lines': ['if (propertyType.isUnknownType() || interfacePropType.isUnknownType()) {', 'compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,', 'interfaceType.getTopMostDefiningType(propertyName).toString(),', 'interfacePropType.toString(), propertyType.toString()));', '}']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }']], 'insertions': [{'line_number': 1052, 'new_lines': ['if (propertyType.isUnknownType() || interfacePropType.isUnknownType()) {', 'compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,', 'interfaceType.getTopMostDefiningType(propertyName).toString(),', 'interfacePropType.toString(), propertyType.toString()));', '}']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }']], 'insertions': [{'line_number': 1052, 'new_lines': ['if (propertyType.isUnknownType() || interfacePropType.isUnknownType()) {', 'compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,', 'interfaceType.getTopMostDefiningType(propertyName).toString(),', 'interfacePropType.toString(), propertyType.toString()));', '}']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'target_lines': [['185', '  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH ='], ['186', '      DiagnosticType.warning('], ['187', '          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",'], ['188', '          "mismatch of the {0} property type and the type " +'], ['189', '          "of the property it overrides from interface {1}\\n" +'], ['190', '          "original: {2}\\n" +'], ['191', '          "override: {3}");'], ['242', '      HIDDEN_INTERFACE_PROPERTY_MISMATCH,'], ['1048', '        }'], ['1049', '        if (interfaceHasProperty) {'], ['1050', '          JSType interfacePropType ='], ['1051', '              interfaceType.getPrototype().getPropertyType(propertyName);'], ['1052', '          if (!propertyType.canAssignTo(interfacePropType)) {'], ['1053', '            compiler.report(t.makeError(n,'], ['1054', '                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,'], ['1055', '                interfaceType.getTopMostDefiningType(propertyName).toString(),'], ['1056', '                interfacePropType.toString(), propertyType.toString());'], ['1057', '          }'], ['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/TypeValidator.java', 'target_lines': [['117', '      INTERFACE_METHOD_NOT_IMPLEMENTED);'], ['110', '//'], ['588', '//'], ['589', '//']], 'insertions': [{'line_number': 110, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'insertions': [{'line_number': 1052, 'new_lines': ['if (propertyType.isUnknownType() || interfacePropType.isUnknownType()) {', 'compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,', 'interfaceType.getTopMostDefiningType(propertyName).toString(),', 'interfacePropType.toString(), propertyType.toString()));', '}']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeCheck.java', 'insertions': [{'line_number': 1052, 'new_lines': ['if (propertyType.isUnknownType() || interfacePropType.isUnknownType()) {', 'compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,', 'interfaceType.getTopMostDefiningType(propertyName).toString(),', 'interfacePropType.toString(), propertyType.toString()));', '}']}]}]


