###Fix:
[]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'insertions': [{'line_number': 135, 'new_lines': ['        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {', '          addExpr(first, p, context);', '          cc.addOp(opstr, true);', '          addExpr(last, p, rhsContext);']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'target_lines': [['102', '//'], ['108', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {']], 'insertions': [{'line_number': 102, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}, {'line_number': 108, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'target_lines': [['102', '//'], ['108', '//']], 'insertions': [{'line_number': 102, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}, {'line_number': 108, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'insertions': [{'line_number': 135, 'new_lines': ['        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {', '          addExpr(first, p, context);', '          cc.addOp(opstr, true);', '          addExpr(last, p, rhsContext);']}]}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'insertions': [{'line_number': 102, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}, {'line_number': 108, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'target_lines': [['102', '//'], ['108', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'insertions': [{'line_number': 135, 'new_lines': ['        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {', '          addExpr(first, p, context);', '          cc.addOp(opstr, true);', '          addExpr(last, p, rhsContext);']}]}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'insertions': [{'line_number': 102, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}, {'line_number': 108, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'insertions': [{'line_number': 135, 'new_lines': ['        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {', '          addExpr(first, p, context);', '          cc.addOp(opstr, true);', '          addExpr(last, p, rhsContext);']}]}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'insertions': [{'line_number': 102, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}, {'line_number': 108, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'insertions': [{'line_number': 135, 'new_lines': ['        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {', '          addExpr(first, p, context);', '          cc.addOp(opstr, true);', '          addExpr(last, p, rhsContext);']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'target_lines': [['102', '//'], ['108', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'insertions': [{'line_number': 135, 'new_lines': ['        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {', '          addExpr(first, p, context);', '          cc.addOp(opstr, true);', '          addExpr(last, p, rhsContext);']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {']], 'insertions': []}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'target_lines': [['102', '//'], ['108', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {']], 'insertions': [{'line_number': 130, 'new_lines': ['// Inserted line to fix the bug in CodeGenerator.java']}, {'line_number': 131, 'new_lines': ['// Inserted line to fix the bug in CodeGenerator.java']}, {'line_number': 132, 'new_lines': ['// Inserted line to fix the bug in CodeGenerator.java']}, {'line_number': 133, 'new_lines': ['// Inserted line to fix the bug in CodeGenerator.java']}, {'line_number': 134, 'new_lines': ['// Inserted line to fix the bug in CodeGenerator.java']}, {'line_number': 135, 'new_lines': ['// Inserted line to fix the bug in CodeGenerator.java']}]}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'target_lines': [['102', '//'], ['108', '//']], 'insertions': [{'line_number': 102, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}, {'line_number': 108, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'insertions': [{'line_number': 135, 'new_lines': ['        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {', '          addExpr(first, p, context);', '          cc.addOp(opstr, true);', '          addExpr(last, p, rhsContext);']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {']], 'insertions': []}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'target_lines': [['102', '//'], ['108', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {'], ['102', '//'], ['108', '//']], 'insertions': [{'line_number': 102, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}, {'line_number': 108, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/CodeGenerator.java', 'target_lines': [['130', '      if (last.getType() == type &&'], ['131', '          NodeUtil.isAssociative(type)) {'], ['132', '        addExpr(first, p, context);'], ['133', '        cc.addOp(opstr, true);'], ['134', '        addExpr(last, p, rhsContext);'], ['135', '      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {']], 'insertions': [{'line_number': 135, 'new_lines': ['        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {', '          addExpr(first, p, context);', '          cc.addOp(opstr, true);', '          addExpr(last, p, rhsContext);']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java', 'target_lines': [['102', '//'], ['108', '//']], 'insertions': [{'line_number': 102, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}, {'line_number': 108, 'new_lines': ['// Inserted line to fix the bug in PeepholeSubstituteAlternateSyntax.java']}], 'deletions': [], 'modifications': []}]


