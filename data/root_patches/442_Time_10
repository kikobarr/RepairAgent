###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'insertions': [{'line_number': 104, 'new_lines': ['        if (values[0] < 1 || values[0] > 28) {', '            throw new IllegalFieldValueException("Value " + values[0] + " for dayOfMonth must be in the range [1,28]");', '        }']}]}]

###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'target_lines': [['104', '        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));'], ['52', '//']], 'insertions': [{'line_number': 104, 'new_lines': ['        if (values[0] < 1 || values[0] > 28) {', '            throw new IllegalFieldValueException("Value " + values[0] + " for dayOfMonth must be in the range [1,28]");', '        }']}, {'line_number': 52, 'new_lines': ['        // Insert new line(s) here to fix the bug at line 52']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'insertions': [{'line_number': 104, 'new_lines': ['        if (values[0] < 1 || values[0] > 28) {', '            throw new IllegalFieldValueException("Value " + values[0] + " for dayOfMonth must be in the range [1,28]");', '        }']}]}]

###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'target_lines': [['104', '        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));'], ['52', '//']], 'insertions': [{'line_number': 104, 'new_lines': ['        if (values[0] < 1 || values[0] > 28) {', '            throw new IllegalFieldValueException("Value " + values[0] + " for dayOfMonth must be in the range [1,28]");', '        }']}, {'line_number': 52, 'new_lines': ['        // Insert new line(s) here to fix the bug at line 52']}], 'deletions': [], 'modifications': []}]

###Fix:
[]

###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'insertions': [{'line_number': 104, 'new_lines': ['        if (start.getDayOfMonth() < 1 || start.getDayOfMonth() > 28) {', '            throw new IllegalFieldValueException("Value " + start.getDayOfMonth() + " for dayOfMonth must be in the range [1,28]");', '        }']}]}]

###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'target_lines': [['104', '        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));'], ['52', '//']], 'insertions': [{'line_number': 104, 'new_lines': ['        if (start.getDayOfMonth() < 1 || start.getDayOfMonth() > 28) {', '            throw new IllegalFieldValueException("Value " + start.getDayOfMonth() + " for dayOfMonth must be in the range [1,28]");', '        }']}, {'line_number': 52, 'new_lines': ['        // Insert new line(s) here to fix the bug at line 52']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'insertions': [{'line_number': 104, 'new_lines': ['        if (values[0] < 1 || values[0] > 28) {', '            throw new IllegalFieldValueException("Value " + values[0] + " for dayOfMonth must be in the range [1,28]");', '        }']}]}]

###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'target_lines': [['104', '        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));'], ['52', '//']], 'insertions': [{'line_number': 104, 'new_lines': ['        if (values[0] < 1 || values[0] > 28) {', '            throw new IllegalFieldValueException("Value " + values[0] + " for dayOfMonth must be in the range [1,28]");', '        }']}, {'line_number': 52, 'new_lines': ['        // Insert new line(s) here to fix the bug at line 52']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/joda/time/base/BaseSingleFieldPeriod.java', 'modifications': [{'line_number': 109, 'modified_line': 'protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field) {'}, {'line_number': 104, 'modified_line': '        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));'}]}]


