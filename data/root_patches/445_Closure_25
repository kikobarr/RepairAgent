###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1037, 'new_lines': ['    Node constructor = n.getFirstChild();']}, {'line_number': 1054, 'new_lines': ['          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1038', '    scope = traverse(constructor, scope);'], ['1059', '    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {'], ['1060', '      scope = traverse(arg, scope);'], ['1061', '    }'], ['1036', '//'], ['1055', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1038', '    scope = traverse(constructor, scope);'], ['1059', '    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {'], ['1060', '      scope = traverse(arg, scope);'], ['1061', '    }'], ['1036', '//'], ['1055', '//']], 'insertions': [{'line_number': 1036, 'new_lines': ['    JSType constructorType = constructor.getJSType();']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {']}, {'line_number': 1055, 'new_lines': ['          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1036, 'new_lines': ['    JSType constructorType = constructor.getJSType();']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1038', '    scope = traverse(constructor, scope);'], ['1059', '    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {'], ['1060', '      scope = traverse(arg, scope);'], ['1061', '    }'], ['1036', '//'], ['1055', '//']], 'insertions': [{'line_number': 1036, 'new_lines': ['    JSType constructorType = constructor.getJSType();']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1038', '    scope = traverse(constructor, scope);'], ['1059', '    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {'], ['1060', '      scope = traverse(arg, scope);'], ['1061', '    }'], ['1036', '//'], ['1055', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1038', '    scope = traverse(constructor, scope);'], ['1059', '    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {'], ['1060', '      scope = traverse(arg, scope);'], ['1061', '    }'], ['1036', '//'], ['1055', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1036, 'new_lines': ['    JSType constructorType = constructor.getJSType();']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1036, 'new_lines': ['    JSType constructorType = constructor.getJSType();']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1037, 'new_lines': ['    JSType constructorType = constructor.getJSType();']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1036, 'new_lines': ['    JSType constructorType = constructor.getJSType();']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType();']}]}]

###Fix:
[]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1036, 'new_lines': ['    JSType constructorType = constructor.getJSType(constructor);']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType(constructor);']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'target_lines': [['1038', '    scope = traverse(constructor, scope);'], ['1059', '    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {'], ['1060', '      scope = traverse(arg, scope);'], ['1061', '    }'], ['1036', '//'], ['1055', '//']], 'insertions': [{'line_number': 1036, 'new_lines': ['    JSType constructorType = constructor.getJSType(constructor);']}, {'line_number': 1055, 'new_lines': ['        if (ct != null && ct.isConstructor()) {', '          type = ct.getInstanceType(constructor);']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypeInference.java', 'insertions': [{'line_number': 1054, 'new_lines': ['          type = ct.getInstanceType();']}], 'deletions': [], 'modifications': []}]


