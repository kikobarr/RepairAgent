###Fix:
[]

###Fix:
[{'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    }', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    }', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    }', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    }', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    }']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    }', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    }']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    }', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {']], 'insertions': [{'line_number': 1413, 'new_lines': ['    // Adjusting type inference check to potentially fix the bug', '    if (qVar == null || !qVar.isTypeInferred()) {', '        return;', '    ']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [{'line_number': 372, 'new_lines': ['    // Adjusting prototype setting logic to potentially fix the bug', '    if (prototype == null) {', '        return false;', '    ', '    // getInstanceType fails if the function is not a constructor', '    if (isConstructor() && prototype == getInstanceType()) {', '        return false;', '    }', '    boolean replacedPrototype = prototype != null;', '    this.prototype = prototype;', '    this.prototypeSlot = new SimpleSlot("prototype", prototype, true);', '    this.prototype.setOwnerFunction(this);', '    // Disassociating the old prototype makes this easier to debug--', "    // we don't have to worry about two prototypes running around."]}, {'line_number': 374, 'new_lines': ['    // Inserted new lines to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {'], 'insertions']}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/TypedScopeCreator.java', 'target_lines': [['1413', '          if (!qVar.isTypeInferred()) {'], 'insertions']}, {'file_name': 'com/google/javascript/rhino/jstype/FunctionType.java', 'target_lines': [['341', '        baseType.isUnknownType() ||'], ['366', '    boolean replacedPrototype = prototype != null;'], ['372', '//'], ['374', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]


