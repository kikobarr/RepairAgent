###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 722, 'modified_line': '            return NodeUtil.mayEffectMutableState(cArg, compiler) || NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 ? CanInlineResult.NO : CanInlineResult.YES;'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here\n']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 722, 'modified_line': '            return NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 ? CanInlineResult.NO : CanInlineResult.YES;'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here\n']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'insertions': [{'line_number': 722, 'new_lines': ['            return NodeUtil.mayEffectMutableState(cArg, compiler) || NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 ? CanInlineResult.NO : CanInlineResult.YES;']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here\n']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here\n']}], 'deletions': [], 'modifications': [{'line_number': 46, 'modified_line': '    // Inserted line to fix the bug here'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here\n']}], 'deletions': [], 'modifications': [{'line_number': 46, 'modified_line': '    // Inserted line to fix the bug here'}, {'line_number': 208, 'modified_line': '      return canInlineReferenceDirectly(callNode, fnNode);'}, {'line_number': 690, 'modified_line': '      Node callNode, Node fnNode) {'}, {'line_number': 695, 'modified_line': '    Node block = fnNode.getLastChild();'}, {'line_number': 715, 'modified_line': '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'}, {'line_number': 716, 'modified_line': '    while (cArg != null || fnParam != null) {'}, {'line_number': 717, 'modified_line': '      if (fnParam != null) {'}, {'line_number': 718, 'modified_line': '        if (cArg != null) {'}, {'line_number': 719, 'modified_line': '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'}, {'line_number': 720, 'modified_line': '              && NodeUtil.getNameReferenceCount('}, {'line_number': 721, 'modified_line': '                  block, fnParam.getString()) > 1) {'}, {'line_number': 722, 'modified_line': '            return CanInlineResult.NO;'}, {'line_number': 723, 'modified_line': '          }'}, {'line_number': 724, 'modified_line': '        }'}, {'line_number': 725, 'modified_line': '        fnParam = fnParam.getNext();'}, {'line_number': 726, 'modified_line': '      }'}, {'line_number': 728, 'modified_line': '      if (cArg != null) {'}, {'line_number': 729, 'modified_line': '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'}, {'line_number': 731, 'modified_line': '        }'}, {'line_number': 732, 'modified_line': '        cArg = cArg.getNext();'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'insertions': [{'line_number': 208, 'new_lines': ['    // Checks if a reference can be inlined directly', '    public boolean canInlineReferenceDirectly(Node node, Node parent) {', '        // Check if the node is a NAME node', '        if (node.isName()) {', '            // Check if the parent node is a VAR node', '            if (NodeUtil.isVar(parent)) {', '                return true;', '            }', '            // Check if the parent node is a ASSIGN node', '            if (parent.isAssign()) {', '                Node assignParent = parent.getParent();', '                // Check if the assign node is the only child of its parent', '                if (assignParent != null && assignParent.hasOneChild()) {', '                    return true;', '                }', '            }', '        }', '        return false;', '    }']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '    // Inserted line to fix the bug here']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '    // Inserted line to fix the bug here']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here']}], 'deletions': [], 'modifications': [{'line_number': 46, 'modified_line': '    // Inserted line to fix the bug here'}, {'line_number': 208, 'modified_line': '      return canInlineReferenceDirectly(callNode, fnNode);'}, {'line_number': 690, 'modified_line': '      Node callNode, Node fnNode) {'}, {'line_number': 695, 'modified_line': '    Node block = fnNode.getLastChild();'}, {'line_number': 715, 'modified_line': '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'}, {'line_number': 716, 'modified_line': '    while (cArg != null || fnParam != null) {'}, {'line_number': 717, 'modified_line': '      if (fnParam != null) {'}, {'line_number': 718, 'modified_line': '        if (cArg != null) {'}, {'line_number': 719, 'modified_line': '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'}, {'line_number': 720, 'modified_line': '              && NodeUtil.getNameReferenceCount('}, {'line_number': 721, 'modified_line': '                  block, fnParam.getString()) > 1) {'}, {'line_number': 722, 'modified_line': '            return CanInlineResult.NO;'}, {'line_number': 723, 'modified_line': '          }'}, {'line_number': 724, 'modified_line': '        }'}, {'line_number': 725, 'modified_line': '        fnParam = fnParam.getNext();'}, {'line_number': 726, 'modified_line': '      '}, {'line_number': 728, 'modified_line': '      if (cArg != null) {'}, {'line_number': 729, 'modified_line': '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'}, {'line_number': 731, 'modified_line': '        }'}, {'line_number': 732, 'modified_line': '        cArg = cArg.getNext();'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 722, 'modified_line': '            return NodeUtil.mayEffectMutableState(cArg, compiler) || NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 ? CanInlineResult.YES : CanInlineResult.NO;'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '    // Inserted line to fix the bug here']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'insertions': [{'line_number': 46, 'new_lines': ['    // Inserted line to fix the bug here']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/FunctionInjector.java', 'target_lines': [['208', '      return canInlineReferenceDirectly(callNode, fnNode);'], ['690', '      Node callNode, Node fnNode) {'], ['695', '    Node block = fnNode.getLastChild();'], ['715', '    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();'], ['716', '    while (cArg != null || fnParam != null) {'], ['717', '      if (fnParam != null) {'], ['718', '        if (cArg != null) {'], ['719', '          if (NodeUtil.mayEffectMutableState(cArg, compiler)'], ['720', '              && NodeUtil.getNameReferenceCount('], ['721', '                  block, fnParam.getString()) > 1) {'], ['722', '            return CanInlineResult.NO;'], ['723', '          }'], ['724', '        }'], ['725', '        fnParam = fnParam.getNext();'], ['726', '      }'], ['728', '      if (cArg != null) {'], ['729', '        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {'], ['731', '        }'], ['732', '        cArg = cArg.getNext();'], ['46', '//']], 'insertions': []}]


