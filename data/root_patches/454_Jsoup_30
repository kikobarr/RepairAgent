###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'insertions': [{'line_number': 70, 'new_lines': ['    public void copySafeNodes(Element root, Element destination) {', '        Validate.notNull(root);', '        Validate.notNull(destination);', '', '        List<Node> sourceNodes = root.childNodesCopy();', '        for (Node sourceNode : sourceNodes) {', '            if (sourceNode instanceof Element) {', '                Element sourceElement = (Element) sourceNode;', '                if (destination.whitelist().isSafeTag(sourceElement.tag())) {', '                    Element destinationElement = new Element(sourceElement.tag(), root.baseUri()); // Copy the tag and base URI', '                    destinationElement.attributes().addAll(sourceElement.attributes()); // Copy attributes', '                    destination.appendChild(destinationElement);', '                    copySafeNodes(sourceElement, destinationElement); // Recursively copy safe nodes', '                }', '            } else if (sourceNode instanceof TextNode) {', '                destination.appendChild(new TextNode(((TextNode) sourceNode).getWholeText(), root.baseUri())); // Copy text nodes', '            } else if (sourceNode instanceof DataNode) {', '                destination.appendChild(new DataNode(((DataNode) sourceNode).getWholeData(), root.baseUri())); // Copy data nodes', '            }', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'insertions': [{'line_number': 70, 'new_lines': ['    public void copySafeNodes(Element root, Element destination) {', '        Validate.notNull(root);', '        Validate.notNull(destination);', '', '        List<Node> sourceChildren = root.childNodes();', '        for (Node sourceChild : sourceChildren) {', '            if (sourceChild instanceof Element) {', '                Element sourceElement = (Element) sourceChild;', '                if (whitelist.isSafeTag(sourceElement.tagName())) {', '                    Element destinationChild = new Element(Tag.valueOf(sourceElement.tagName()), "");', '                    destinationChild.attr(sourceElement.attributes());', '                    destination.appendChild(destinationChild);', '                    copySafeNodes(sourceElement, destinationChild); // Recursively copy safe nodes', '                }', '            } else if (sourceChild instanceof TextNode) {', '                TextNode sourceTextNode = (TextNode) sourceChild;', '                TextNode destinationTextNode = new TextNode(sourceTextNode.getWholeText(), "");', '                destination.appendChild(destinationTextNode);', '            }', '        }', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'insertions': [{'line_number': 70, 'new_lines': ['    public void copySafeNodes(Element root, Element destination) {']}, {'line_number': 71, 'new_lines': ['        List<Node> sourceNodes = root.childNodesCopy();']}, {'line_number': 72, 'new_lines': ['        int numDiscarded = 0;']}, {'line_number': 74, 'new_lines': ['        for (Node source : sourceNodes) {']}, {'line_number': 84, 'new_lines': ['                    numDiscarded += copySafeNodes(sourceEl, destChild);']}, {'line_number': 85, 'new_lines': ['                } else {']}, {'line_number': 87, 'new_lines': ['                    numDiscarded += copySafeNodes(sourceEl, destination);']}, {'line_number': 95, 'new_lines': ['        return numDiscarded;']}]}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/safety/Cleaner.java', 'target_lines': [['70', '    private int copySafeNodes(Element root, Element destination) {'], ['71', '        List<Node> sourceChildren = root.childNodes();'], ['72', '        int numDiscarded = 0;'], ['74', '        for (Node source : sourceChildren) {'], ['84', '                    numDiscarded += copySafeNodes(sourceEl, destChild);'], ['85', '                } else {'], ['87', '                    numDiscarded += copySafeNodes(sourceEl, destination);'], ['95', '        return numDiscarded;'], ['6', '//'], ['93', '//'], ['97', '//'], ['98', '//']], 'insertions': [{'line_number': 6, 'new_lines': ['        if (source instanceof Element) {', '            Element sourceEl = (Element) source;', '            if (whitelist.isSafeTag(sourceEl.tagName())) {', '                Element destChild = sourceEl.clone();', '                destination.appendChild(destChild);', '                numDiscarded += copySafeNodes(sourceEl, destChild);', '            } else {', '                numDiscarded += copySafeNodes(sourceEl, destination);', '            }', '        } else if (source instanceof TextNode) {', '            TextNode sourceText = (TextNode) source;', '            TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());', '            destination.appendChild(destText);', '        }']}, {'line_number': 93, 'new_lines': ['        } else if (source instanceof DataNode) {', '            DataNode sourceData = (DataNode) source;', '            DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());', '            destination.appendChild(destData);']}, {'line_number': 97, 'new_lines': ['        }']}, {'line_number': 98, 'new_lines': ['        }']}], 'deletions': [], 'modifications': []}]


