###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    public static Document parseInputStream(InputStream input, String charsetName, String baseUri) throws IOException {', '        Charset charset = Charset.forName(charsetName != null ? charsetName : defaultCharset);', '', '        ConstrainableInputStream cis = ConstrainableInputStream.wrap(input, bufferSize, 0);', '        cis.request(0); // prepare for buffer reading', '', '        // buffer to read to. if not enough space, reallocate.', '        ByteBuffer byteData = ByteBuffer.allocate(firstReadBufferSize);', '        byteData.position(0); // prepare to read', '', '        // read to buffer. if full, double size and read again', '        while (cis.read(byteData.array()) == firstReadBufferSize) {', '            byteData = DataUtil.resizeBuffer(byteData, byteData.capacity() * 2);', '            byteData.position(byteData.capacity() / 2); // move position to end', '        }', '        byteData.position(0);', '', '        // create proper sized buffer and read to it', '        ByteBuffer buffer = ByteBuffer.allocate(byteData.position());', '        byteData.get(buffer.array(), 0, buffer.capacity());', '        buffer.position(0); // prepare to read from beginning', '', '        Parser parser = Parser.htmlParser();', '        parser.settings(new Parser.Settings().defaultCharset(charset));', '        return parser.parseInput(buffer, baseUri, cis, charset);', '    }', '', '    private static ByteBuffer resizeBuffer(ByteBuffer buffer, int newSize) {', '        ByteBuffer newBuffer = ByteBuffer.allocate(newSize);', '        buffer.flip();', '        newBuffer.put(buffer);', '        return newBuffer;', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['5', '//'], ['136', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['5', '//'], ['136', '//']], 'insertions': [{'line_number': 5, 'new_lines': ['    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {']}, {'line_number': 136, 'new_lines': ['        if (charsetName == null) { // determine from meta. safe first parse as UTF-8', '            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();', '            doc = parser.parseInput(docData, baseUri);', '', '            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">', '            Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");', '            String foundCharset = null; // if not found, will keep utf-8 as best attempt', '            for (Element meta : metaElements) {', '                if (meta.hasAttr("http-equiv"))', '                    foundCharset = getCharsetFromContentType(meta.attr("content"));', '                if (foundCharset == null && meta.hasAttr("charset"))', '                    foundCharset = meta.attr("charset");', '                if (foundCharset != null)', '                    break;', '            }', '', "            // look for <?xml encoding='ISO-8859-1'?>", '            if (foundCharset == null && doc.childNodeSize() > 0) {', '                Node first = doc.childNode(0);', '                XmlDeclaration decl = null;', '                if (first instanceof XmlDeclaration)', '                    decl = (XmlDeclaration) first;', '                if (decl != null) {']}, {'line_number': 137, 'new_lines': ['                    foundCharset = decl.attr("encoding");']}, {'line_number': 138, 'new_lines': ['                }', '            }', '', '            if (foundCharset == null) {', '                foundCharset = defaultCharset;', '            }', '', '            charsetName = foundCharset;']}, {'line_number': 139, 'new_lines': ['        }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 5, 'new_lines': ['    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {', '        Charset charset = Charset.forName(charsetName != null ? charsetName : defaultCharset);', '', '        ConstrainableInputStream cis = ConstrainableInputStream.wrap(input, bufferSize, 0);', '        cis.request(0); // prepare for buffer reading', '', '        // buffer to read to. if not enough space, reallocate.', '        ByteBuffer byteData = ByteBuffer.allocate(firstReadBufferSize);', '        byteData.position(0); // prepare to read', '', '        // read to buffer. if full, double size and read again', '        while (cis.read(byteData.array()) == firstReadBufferSize) {', '            byteData = DataUtil.resizeBuffer(byteData, byteData.capacity() * 2);', '            byteData.position(byteData.capacity() / 2); // move position to end', '        }', '        byteData.position(0);', '', '        // create proper sized buffer and read to it', '        ByteBuffer buffer = ByteBuffer.allocate(byteData.position());', '        byteData.get(buffer.array(), 0, buffer.capacity());', '        buffer.position(0); // prepare to read from beginning', '', '        Parser parser = Parser.htmlParser();', '        parser.settings(new Parser.Settings().defaultCharset(charset));', '        return parser.parseInput(buffer, baseUri, cis, charset);', '    }', '', '    private static ByteBuffer resizeBuffer(ByteBuffer buffer, int newSize) {', '        ByteBuffer newBuffer = ByteBuffer.allocate(newSize);', '        buffer.flip();', '        newBuffer.put(buffer);', '        return newBuffer;', '    }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['5', '//'], ['136', '//']], 'insertions': [{'line_number': 5, 'new_lines': ['    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {']}, {'line_number': 136, 'new_lines': ['        if (charsetName == null) { // determine from meta. safe first parse as UTF-8', '            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();', '            doc = parser.parseInput(docData, baseUri);', '', '            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">', '            Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");', '            String foundCharset = null; // if not found, will keep utf-8 as best attempt', '            for (Element meta : metaElements) {', '                if (meta.hasAttr("http-equiv"))', '                    foundCharset = getCharsetFromContentType(meta.attr("content"));', '                if (foundCharset == null && meta.hasAttr("charset"))', '                    foundCharset = meta.attr("charset");', '                if (foundCharset != null)', '                    break;', '            }', '', "            // look for <?xml encoding='ISO-8859-1'?>", '            if (foundCharset == null && doc.childNodeSize() > 0) {', '                Node first = doc.childNode(0);', '                XmlDeclaration decl = null;', '                if (first instanceof XmlDeclaration)', '                    decl = (XmlDeclaration) first;', '                if (decl != null) {']}, {'line_number': 137, 'new_lines': ['                    foundCharset = decl.attr("encoding");']}, {'line_number': 138, 'new_lines': ['                }', '            }', '', '            if (foundCharset == null) {', '                foundCharset = defaultCharset;', '            }', '', '            charsetName = foundCharset;']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 137, 'new_lines': ['                    foundCharset = decl.attr("encoding");']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['5', '//'], ['136', '//']], 'insertions': [{'line_number': 5, 'new_lines': ['    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {']}, {'line_number': 136, 'new_lines': ['        if (charsetName == null) { // determine from meta. safe first parse as UTF-8', '            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();', '            doc = parser.parseInput(docData, baseUri);', '', '            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">', '            Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");', '            String foundCharset = null; // if not found, will keep utf-8 as best attempt', '            for (Element meta : metaElements) {', '                if (meta.hasAttr("http-equiv"))', '                    foundCharset = getCharsetFromContentType(meta.attr("content"));', '                if (foundCharset == null && meta.hasAttr("charset"))', '                    foundCharset = meta.attr("charset");', '                if (foundCharset != null)', '                    break;', '            }', '', "            // look for <?xml encoding='ISO-8859-1'?>", '            if (foundCharset == null && doc.childNodeSize() > 0) {', '                Node first = doc.childNode(0);', '                XmlDeclaration decl = null;', '                if (first instanceof XmlDeclaration)', '                    decl = (XmlDeclaration) first;']}, {'line_number': 137, 'new_lines': ['                    foundCharset = decl.attr("encoding");']}, {'line_number': 138, 'new_lines': ['                }', '            }', '', '            if (foundCharset == null) {', '                foundCharset = defaultCharset;', '            }', '', '            charsetName = foundCharset;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 95, 'new_lines': ['    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {', '        if (input == null) // empty body', '            return new Document(baseUri);', '        input = ConstrainableInputStream.wrap(input, bufferSize, 0);', '', '        Document doc = null;', '        boolean fullyRead = false;', '', '        // read the start of the stream and look for a BOM or meta charset', '        input.mark(bufferSize);', "        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.", '        fullyRead = input.read() == -1;', '        input.reset();', '', '        // look for BOM - overrides any other header or input', '        BomCharset bomCharset = detectCharsetFromBom(firstBytes);', '        if (bomCharset != null)', '            charsetName = bomCharset.charset;', '', '        if (charsetName == null) { // determine from meta. safe first parse as UTF-8', '            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();', '            doc = parser.parseInput(docData, baseUri);', '', '            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">', '            Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");', '            String foundCharset = null; // if not found, will keep utf-8 as best attempt', '            for (Element meta : metaElements) {', '                if (meta.hasAttr("http-equiv"))', '                    foundCharset = getCharsetFromContentType(meta.attr("content"));', '                if (foundCharset == null && meta.hasAttr("charset"))', '                    foundCharset = meta.attr("charset");', '                if (foundCharset != null)', '                    break;', '            }', '', "            // look for <?xml encoding='ISO-8859-1'?>", '            if (foundCharset == null && doc.childNodeSize() > 0) {', '                Node first = doc.childNode(0);', '                XmlDeclaration decl = null;', '                if (first instanceof XmlDeclaration)', '                    decl = (XmlDeclaration) first;', '                if (decl != null) {']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['5', '//'], ['136', '//']], 'insertions': [{'line_number': 5, 'new_lines': ['    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {']}, {'line_number': 136, 'new_lines': ['        if (charsetName == null) { // determine from meta. safe first parse as UTF-8', '            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();', '            doc = parser.parseInput(docData, baseUri);', '', '            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">', '            Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");', '            String foundCharset = null; // if not found, will keep utf-8 as best attempt', '            for (Element meta : metaElements) {', '                if (meta.hasAttr("http-equiv"))', '                    foundCharset = getCharsetFromContentType(meta.attr("content"));', '                if (foundCharset == null && meta.hasAttr("charset"))', '                    foundCharset = meta.attr("charset");', '                if (foundCharset != null)', '                    break;', '            }', '', "            // look for <?xml encoding='ISO-8859-1'?>", '            if (foundCharset == null && doc.childNodeSize() > 0) {', '                Node first = doc.childNode(0);', '                XmlDeclaration decl = null;', '                if (first instanceof XmlDeclaration)', '                    decl = (XmlDeclaration) first;']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 5, 'new_lines': ['    static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {', '        if (charsetName == null) {', '            charsetName = defaultCharset;', '        }']}, {'line_number': 136, 'new_lines': ['        if (charsetName == null) {', '            charsetName = defaultCharset;', '        }']}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'insertions': [{'line_number': 136, 'new_lines': ['                if (decl != null) {', '                    if (decl.name().equalsIgnoreCase("xml"))', '                        foundCharset = decl.attr("encoding");', '                }']}]}]


