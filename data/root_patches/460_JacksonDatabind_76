###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 598, 'modified_line': 'if (!bean.getClass().equals(_beanType.getRawClass())) {'}, {'line_number': 599, 'modified_line': 'ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt)) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (!bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (!bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (!bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [{'line_number': 600, 'new_lines': ['                        return null;']}, {'line_number': 601, 'new_lines': ['                    }'], 'deletions': [], 'modifications': []}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 598, 'modified_line': 'if (!bean.getClass().equals(_beanType.getRawClass())) {'}, {'line_number': 599, 'modified_line': 'ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (!bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (!bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [{'line_number': 600, 'new_lines': ['                        return null;']}, {'line_number': 601, 'new_lines': ['                    }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'modifications': [{'line_number': 598, 'modified_line': 'if (!bean.getClass().equals(_beanType.getRawClass())) {'}, {'line_number': 599, 'modified_line': 'ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': [{'line_number': 600, 'new_lines': ['                        return null;']}, {'line_number': 601, 'new_lines': ['                    ']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'modifications': [{'line_number': 598, 'modified_line': 'if (!bean.getClass().equals(_beanType.getRawClass())) {'}, {'line_number': 599, 'modified_line': 'ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (!bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass().equals(_beanType.getRawClass())) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java', 'target_lines': [['583', '                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {'], ['584', '                    t = p.nextToken();'], ['585', '                    Object bean;'], ['586', '                    try {'], ['587', '                        bean = creator.build(ctxt, buffer);'], ['588', '                    } catch (Exception e) {'], ['589', '                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);'], ['590', '                        continue;'], ['591', '                    }'], ['592', '                    while (t == JsonToken.FIELD_NAME) {'], ['593', '                        p.nextToken();'], ['594', '                        tokens.copyCurrentStructure(p);'], ['595', '                        t = p.nextToken();'], ['596', '                    }'], ['597', '                    tokens.writeEndObject();'], ['598', '                    if (bean.getClass() != _beanType.getRawClass()) {'], ['599', '                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");'], ['600', '                        return null;'], ['601', '                    }'], ['602', '                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);'], ['603', '                }']], 'insertions': []}]


