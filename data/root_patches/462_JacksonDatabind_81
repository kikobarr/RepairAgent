###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass.isPrimitive() && serClass != null && serClass.isPrimitive()) {', '            if (valueClass.equals(serClass)) {', '                type = tf.constructType(serClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '            }', '        }']}, {'line_number': 797, 'new_lines': ['        if (keyClass != null && keyClass.isPrimitive()) {', '            if (keyType.hasRawClass(keyClass)) {', '                keyType = tf.constructType(keyClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '            }', '        }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {'], ['764', '//'], ['765', '//'], ['797', '//'], ['798', '//'], ['831', '//'], ['832', '//'], ['1457', '//'], ['1458', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {'], ['764', '//'], ['765', '//'], ['797', '//'], ['798', '//'], ['831', '//'], ['832', '//'], ['1457', '//'], ['1458', '//']], 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 797, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {'], ['764', '//'], ['765', '//'], ['797', '//'], ['798', '//'], ['831', '//'], ['832', '//'], ['1457', '//'], ['1458', '//']], 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 765, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}, {'line_number': 797, 'new_lines': ['        if (contentClass != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '        }']}, {'line_number': 831, 'new_lines': ['        if (contentType != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '        }']}, {'line_number': 1457, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName()));', '        }']}, {'line_number': 1458, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}]}]

###Fix:
[]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 765, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}, {'line_number': 797, 'new_lines': ['        if (contentClass != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '        }']}, {'line_number': 831, 'new_lines': ['        if (contentType != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '        }']}, {'line_number': 1457, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName()));', '        }']}, {'line_number': 1458, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {']], 'insertions': [{'line_number': 1119, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 1135, 'new_lines': ['            if (keyClass != null && keyType.hasRawClass(keyClass)) {', '                keyType = tf.constructType(keyClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '            }']}, {'line_number': 1151, 'new_lines': ['            if (contentClass != null && contentType.hasRawClass(contentClass)) {', '                contentType = tf.constructType(contentClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '            }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 797, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {'], ['764', '//'], ['765', '//'], ['797', '//'], ['798', '//'], ['831', '//'], ['832', '//'], ['1457', '//'], ['1458', '//']], 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 765, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}, {'line_number': 797, 'new_lines': ['        if (contentClass != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '        }']}, {'line_number': 831, 'new_lines': ['        if (contentType != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '        }']}, {'line_number': 1457, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName()));', '        }']}, {'line_number': 1458, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {'], ['764', '//'], ['765', '//'], ['797', '//'], ['798', '//'], ['831', '//'], ['832', '//'], ['1457', '//'], ['1458', '//']], 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 765, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}, {'line_number': 797, 'new_lines': ['        if (contentClass != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '        }']}, {'line_number': 798, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}, {'line_number': 831, 'new_lines': ['        if (contentType != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '        }']}, {'line_number': 832, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName()));', '        }']}, {'line_number': 1457, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '        }']}, {'line_number': 1458, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName()));', '        }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'insertions': [{'line_number': 1119, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 1135, 'new_lines': ['            if (keyClass != null && keyType.hasRawClass(keyClass)) {', '                keyType = tf.constructType(keyClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '            }']}, {'line_number': 1151, 'new_lines': ['            if (contentClass != null && contentType.hasRawClass(contentClass)) {', '                contentType = tf.constructType(contentClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '            }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {']], 'insertions': [{'line_number': 1119, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName()));', '        }']}, {'line_number': 1135, 'new_lines': ['            if (keyClass != null && keyType.hasRawClass(keyClass)) {', '                keyType = tf.constructType(keyClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName()));', '            }']}, {'line_number': 1151, 'new_lines': ['            if (contentClass != null && contentType.hasRawClass(contentClass)) {', '                contentType = tf.constructType(contentClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName()));', '            }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {'], ['764', '//'], ['765', '//'], ['797', '//'], ['798', '//'], ['831', '//'], ['832', '//'], ['1457', '//'], ['1458', '//']], 'insertions': [{'line_number': 1119, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName());', '        }']}, {'line_number': 1135, 'new_lines': ['            if (keyClass != null && keyType.hasRawClass(keyClass)) {', '                keyType = tf.constructType(keyClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '            }']}, {'line_number': 1151, 'new_lines': ['            if (contentClass != null && contentType.hasRawClass(contentClass)) {', '                contentType = tf.constructType(contentClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName());', '            }']}, {'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName());', '        }']}, {'line_number': 765, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '        }']}, {'line_number': 797, 'new_lines': ['        if (contentClass != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName());', '        }']}, {'line_number': 798, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '        }']}, {'line_number': 831, 'new_lines': ['        if (contentType != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName());', '        }']}, {'line_number': 832, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName());', '        }']}, {'line_number': 1457, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '        }']}, {'line_number': 1458, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName());', '        }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'target_lines': [['1119', '        if ((valueClass != null) && !type.hasRawClass(valueClass)) {'], ['1135', '            if (keyClass != null) {'], ['1151', '            if (contentClass != null) {']], 'insertions': [{'line_number': 1119, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName());', '        }']}, {'line_number': 1135, 'new_lines': ['            if (keyClass != null && keyType.hasRawClass(keyClass)) {', '                keyType = tf.constructType(keyClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '            }']}, {'line_number': 1151, 'new_lines': ['            if (contentClass != null && contentType.hasRawClass(contentClass)) {', '                contentType = tf.constructType(contentClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName());', '            }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'insertions': [{'line_number': 1119, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName());', '        }']}, {'line_number': 1135, 'new_lines': ['            if (keyClass != null && keyType.hasRawClass(keyClass)) {', '                keyType = tf.constructType(keyClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '            }']}, {'line_number': 1151, 'new_lines': ['            if (contentClass != null && contentType.hasRawClass(contentClass)) {', '                contentType = tf.constructType(contentClass);', '            } else {', '                throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName());', '            }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName());', '        }']}, {'line_number': 797, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '        }']}, {'line_number': 831, 'new_lines': ['        if (contentType != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName());', '        }']}, {'line_number': 1457, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '        }']}, {'line_number': 1458, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName());', '        }']}]}]

###Fix:
[]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java', 'insertions': [{'line_number': 764, 'new_lines': ['        if (valueClass != null && serClass != null && valueClass.equals(serClass)) {', '            type = tf.constructType(serClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization type %s into %s; types not related", type, serClass.getName());', '        }']}, {'line_number': 797, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '        }']}, {'line_number': 831, 'new_lines': ['        if (contentType != null && contentType.hasRawClass(contentClass)) {', '            contentType = tf.constructType(contentClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization content type %s into %s; types not related", contentType, contentClass.getName());', '        }']}, {'line_number': 1457, 'new_lines': ['        if (keyClass != null && keyType.hasRawClass(keyClass)) {', '            keyType = tf.constructType(keyClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization key type %s into %s; types not related", keyType, keyClass.getName());', '        }']}, {'line_number': 1458, 'new_lines': ['        if (valueClass != null && valueType.hasRawClass(valueClass)) {', '            valueType = tf.constructType(valueClass);', '        } else {', '            throw new JsonMappingException(null, String.format("Can not refine serialization value type %s into %s; types not related", valueType, valueClass.getName());', '        }']}]}]


