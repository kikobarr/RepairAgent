###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName()));', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName()));', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName()));', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName()));', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName()));', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 815, 'new_lines': ['            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }']}, {'line_number': 818, 'new_lines': ['                        type = tf.constructGeneralizedType(type, serClass);']}, {'line_number': 819, 'new_lines': ['                        type = tf.constructGeneralizedType(type, serClass);']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'target_lines': [['816', '//'], ['819', '//'], ['820', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'target_lines': [['816', '//'], ['819', '//'], ['820', '//']], 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \' %s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \' %s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 815, 'new_lines': ['            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }']}, {'line_number': 818, 'new_lines': ['                        type = tf.constructGeneralizedType(type, serClass);']}, {'line_number': 819, 'new_lines': ['                        type = tf.constructGeneralizedType(type, serClass);']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'target_lines': [['816', '//'], ['819', '//'], ['820', '//']], 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 817, 'new_lines': ['                    type = tf.constructGeneralizedType(type, serClass);']}, {'line_number': 820, 'new_lines': ['                if (contentType != null) {', '                    // And then value types for all containers:', '                    Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'target_lines': [['816', '//'], ['819', '//'], ['820', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'target_lines': [['816', '//'], ['819', '//'], ['820', '//']], 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/AnnotationIntrospector.java', 'insertions': [{'line_number': 816, 'new_lines': ['        if (type.hasRawClass(serClass)) {', '            type = type.withStaticTyping();', '        } else {', '            try {', '                type = tf.constructGeneralizedType(type, serClass);', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen type %s with annotation (value %s), from \'%s\': %s",', '                                type, serClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 819, 'new_lines': ['        if (keyType.hasRawClass(keyClass)) {', '            keyType = keyType.withStaticTyping();', '        } else {', '            Class<?> currRaw = keyType.getRawClass();', '            try {', '                if (keyClass.isAssignableFrom(currRaw)) {', '                    keyType = tf.constructGeneralizedType(keyType, keyClass);', '                } else if (currRaw.isAssignableFrom(keyClass)) {', '                    keyType = tf.constructSpecializedType(keyType, keyClass);', '                } else {', '                    throw new JsonMappingException(null,', '                            String.format("Can not refine serialization key type %s into %s; types not related",', '                                    keyType, keyClass.getName());', '                }', '            } catch (IllegalArgumentException iae) {', '                throw new JsonMappingException(null,', '                        String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from \'%s\': %s",', '                                type, keyClass.getName(), a.getName(), iae.getMessage()),', '                        iae);', '            }', '        }']}, {'line_number': 820, 'new_lines': ['        if (contentType != null) {', '            // And then value types for all containers:', '            Class<?> conten']}]}]


