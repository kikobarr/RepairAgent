###Fix:
[]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'insertions': [{'line_number': 341, 'new_lines': ['    public int getBasicRow(final int col) {', '    int row = 0;', '    for (int i = 0; i < matrix.length; i++) {', '        if (matrix[i][col] == 1) {', '            row = i;', '            break;', '        }', '    }', '    return row;', '}']}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'target_lines': [['292', '        int start = getNumObjectiveFunctions();'], ['341', '      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());'], ['345', '          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'target_lines': [['292', '        int start = getNumObjectiveFunctions();'], ['341', '      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());'], ['345', '          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);']], 'insertions': [{'line_number': 292, 'new_lines': ['        int start = getNumObjectiveFunctions(); // Fixing bug by initializing start correctly']}, {'line_number': 341, 'new_lines': ['      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset()); // Fixing bug by using getBasicRow method correctly']}, {'line_number': 345, 'new_lines': ['          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i); // Fixing bug by using getBasicRow method correctly']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'insertions': [{'line_number': 341, 'new_lines': ['    public int getBasicRow(final int col) {', '    int row = 0;', '    for (int i = 0; i < matrix.length; i++) {', '        if (matrix[i][col] == 1) {', '            row = i;', '            break;', '        }', '    }', '    return row;', '}']}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'insertions': [{'line_number': 341, 'new_lines': ['    private Integer getBasicRow(final int col) {', '        return getBasicRow(col, true);', '    }']}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'target_lines': [['292', '        int start = getNumObjectiveFunctions();'], ['341', '      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());'], ['345', '          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);']], 'insertions': [{'line_number': 341, 'new_lines': ['    private Integer getBasicRow(final int col) {', '        return getBasicRow(col, true);', '    }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'target_lines': [['292', '        int start = getNumObjectiveFunctions();'], ['341', '      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());'], ['345', '          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);']], 'insertions': [{'line_number': 292, 'new_lines': ['    private Integer getBasicRow(final int col) {', '        return getBasicRow(col, true);', '    }']}, {'line_number': 341, 'new_lines': ['    private Integer getBasicRow(final int col) {', '        return getBasicRow(col, true);', '    }']}, {'line_number': 345, 'new_lines': ['    private Integer getBasicRow(final int col) {', '        return getBasicRow(col, true);', '    }']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'insertions': [{'line_number': 341, 'new_lines': ['    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {', '        Integer row = null;', '        int start = getNumObjectiveFunctions();', '        for (int i = start; i < getHeight(); i++) {', '            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {', '                row = i;', '            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {', '                return null;', '            }', '        }', '        return row;', '    }']}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'target_lines': [['292', '        int start = getNumObjectiveFunctions();'], ['341', '      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());'], ['345', '          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);']], 'insertions': [{'line_number': 341, 'new_lines': ['    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {', '        Integer row = null;', '        int start = getNumObjectiveFunctions();', '        for (int i = start; i < getHeight(); i++) {', '            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {', '                row = i;', '            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {', '                return null;', '            }', '        }', '        return row;', '    }']}]}]

###Fix:
[{'file_name': 'org/apache/commons/math/optimization/linear/SimplexTableau.java', 'target_lines': [['292', '        int start = getNumObjectiveFunctions();'], ['341', '      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());'], ['345', '          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);']], 'insertions': [{'line_number': 292, 'new_lines': ['    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {', '        Integer row = null;', '        int start = getNumObjectiveFunctions();', '        for (int i = start; i < getHeight(); i++) {', '            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {', '                row = i;', '            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {', '                return null;', '            }', '        }', '        return row;', '    }']}, {'line_number': 341, 'new_lines': ['    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {', '        Integer row = null;', '        int start = getNumObjectiveFunctions();', '        for (int i = start; i < getHeight(); i++) {', '            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {', '                row = i;', '            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {', '                return null;', '            }', '        }', '        return row;', '    }']}, {'line_number': 345, 'new_lines': ['    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {', '        Integer row = null;', '        int start = getNumObjectiveFunctions();', '        for (int i = start; i < getHeight(); i++) {', '            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {', '                row = i;', '            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {', '                return null;', '            }', '        }', '        return row;', '    }']}]}]


