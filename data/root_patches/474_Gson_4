###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      }'}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 584, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 584, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.";'}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.";'}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      }'}, {'line_number': 584, 'modified_line': '    }'}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 325, 'modified_line': '    beforeValue(true);'}, {'line_number': 418, 'modified_line': '    beforeValue(false);'}, {'line_number': 435, 'modified_line': '    beforeValue(false);'}, {'line_number': 454, 'modified_line': '    beforeValue(false);'}, {'line_number': 466, 'modified_line': '    beforeValue(false);'}, {'line_number': 483, 'modified_line': '    beforeValue(false);'}, {'line_number': 495, 'modified_line': '    beforeValue(false);'}, {'line_number': 518, 'modified_line': '    beforeValue(false);'}, {'line_number': 613, 'modified_line': '  private void beforeValue(boolean root) throws IOException {'}, {'line_number': 622, 'modified_line': '      if (!lenient && !root) {'}, {'line_number': 623, 'modified_line': '        throw new IllegalStateException('}, {'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.";'}, {'line_number': 625, 'modified_line': '      '}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      }'}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      '}, {'line_number': 584, 'modified_line': '    '}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 325, 'modified_line': '    beforeValue(true);'}, {'line_number': 418, 'modified_line': '    beforeValue(false);'}, {'line_number': 435, 'modified_line': '    beforeValue(false);'}, {'line_number': 454, 'modified_line': '    beforeValue(false);'}, {'line_number': 466, 'modified_line': '    beforeValue(false);'}, {'line_number': 483, 'modified_line': '    beforeValue(false);'}, {'line_number': 495, 'modified_line': '    beforeValue(false);'}, {'line_number': 518, 'modified_line': '    beforeValue(false);'}, {'line_number': 613, 'modified_line': '  private void beforeValue(boolean root) throws IOException {'}, {'line_number': 622, 'modified_line': '      if (!lenient && !root) {'}, {'line_number': 623, 'modified_line': '        throw new IllegalStateException('}, {'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.");'}, {'line_number': 625, 'modified_line': '      '}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      '}, {'line_number': 584, 'modified_line': '    '}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 325, 'modified_line': '    beforeValue(true);'}, {'line_number': 418, 'modified_line': '    beforeValue(false);'}, {'line_number': 435, 'modified_line': '    beforeValue(false);'}, {'line_number': 454, 'modified_line': '    beforeValue(false);'}, {'line_number': 466, 'modified_line': '    beforeValue(false);'}, {'line_number': 483, 'modified_line': '    beforeValue(false);'}, {'line_number': 495, 'modified_line': '    beforeValue(false);'}, {'line_number': 518, 'modified_line': '    beforeValue(false);'}, {'line_number': 613, 'modified_line': '  private void beforeValue(boolean root) throws IOException {'}, {'line_number': 622, 'modified_line': '      if (!lenient && !root) {'}, {'line_number': 623, 'modified_line': '        throw new IllegalStateException('}, {'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.");'}, {'line_number': 625, 'modified_line': '      '}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      '}, {'line_number': 584, 'modified_line': '    '}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 325, 'modified_line': '    beforeValue(true);'}, {'line_number': 418, 'modified_line': '    beforeValue(false);'}, {'line_number': 435, 'modified_line': '    beforeValue(false);'}, {'line_number': 454, 'modified_line': '    beforeValue(false);'}, {'line_number': 466, 'modified_line': '    beforeValue(false);'}, {'line_number': 483, 'modified_line': '    beforeValue(false);'}, {'line_number': 495, 'modified_line': '    beforeValue(false);'}, {'line_number': 518, 'modified_line': '    beforeValue(false);'}, {'line_number': 613, 'modified_line': '  private void beforeValue(boolean root) throws IOException {'}, {'line_number': 622, 'modified_line': '      if (!lenient && !root) {'}, {'line_number': 623, 'modified_line': '        throw new IllegalStateException('}, {'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.");'}, {'line_number': 625, 'modified_line': '      '}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'modifications': [{'line_number': 575, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1 && !hasSkipValue) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1 && !hasSkipValue) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      '}, {'line_number': 584, 'modified_line': '    '}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 325, 'modified_line': '    beforeValue(true);'}, {'line_number': 418, 'modified_line': '    beforeValue(false);'}, {'line_number': 435, 'modified_line': '    beforeValue(false);'}, {'line_number': 454, 'modified_line': '    beforeValue(false);'}, {'line_number': 466, 'modified_line': '    beforeValue(false);'}, {'line_number': 483, 'modified_line': '    beforeValue(false);'}, {'line_number': 495, 'modified_line': '    beforeValue(false);'}, {'line_number': 518, 'modified_line': '    beforeValue(false);'}, {'line_number': 613, 'modified_line': '  private void beforeValue(boolean root) throws IOException {'}, {'line_number': 622, 'modified_line': '      if (!lenient && !root) {'}, {'line_number': 623, 'modified_line': '        throw new IllegalStateException('}, {'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.");'}, {'line_number': 625, 'modified_line': '      '}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      '}, {'line_number': 584, 'modified_line': '    '}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 325, 'modified_line': '    beforeValue(true);'}, {'line_number': 418, 'modified_line': '    beforeValue(false);'}, {'line_number': 435, 'modified_line': '    beforeValue(false);'}, {'line_number': 454, 'modified_line': '    beforeValue(false);'}, {'line_number': 466, 'modified_line': '    beforeValue(false);'}, {'line_number': 483, 'modified_line': '    beforeValue(false);'}, {'line_number': 495, 'modified_line': '    beforeValue(false);'}, {'line_number': 518, 'modified_line': '    beforeValue(false);'}, {'line_number': 613, 'modified_line': '  private void beforeValue(boolean root) throws IOException {'}, {'line_number': 622, 'modified_line': '      if (!lenient && !root) {'}, {'line_number': 623, 'modified_line': '        throw new IllegalStateException('}, {'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.");'}, {'line_number': 625, 'modified_line': '      '}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.";'}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      '}, {'line_number': 584, 'modified_line': '    '}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 325, 'modified_line': '    beforeValue(true);'}, {'line_number': 418, 'modified_line': '    beforeValue(false);'}, {'line_number': 435, 'modified_line': '    beforeValue(false);'}, {'line_number': 454, 'modified_line': '    beforeValue(false);'}, {'line_number': 466, 'modified_line': '    beforeValue(false);'}, {'line_number': 483, 'modified_line': '    beforeValue(false);'}, {'line_number': 495, 'modified_line': '    beforeValue(false);'}, {'line_number': 518, 'modified_line': '    beforeValue(false);'}, {'line_number': 613, 'modified_line': '  private void beforeValue(boolean root) throws IOException {'}, {'line_number': 622, 'modified_line': '      if (!lenient && !root) {'}, {'line_number': 623, 'modified_line': '        throw new IllegalStateException('}, {'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.");'}, {'line_number': 625, 'modified_line': '      '}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'insertions': [{'line_number': 575, 'new_lines': ['        if (stackSize == 1 && !hasSkipValue) {', '          checkLenient();', '        }']}, {'line_number': 585, 'new_lines': ['    if (stackSize == 1 && !hasSkipValue) {', '      checkLenient();', '    }']}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'insertions': [{'line_number': 624, 'new_lines': ['            "JSON must start with an array or an object.";']}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      '}, {'line_number': 584, 'modified_line': '    '}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.";'}]}]

###Fix:
[{'file_name': 'com/google/gson/stream/JsonReader.java', 'target_lines': [['574', '      if (stackSize == 1) {'], ['575', '        checkLenient();'], ['576', '      }'], ['584', '    }'], ['585', '    if (stackSize == 1) {'], ['586', '      checkLenient();']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 574, 'modified_line': '      if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 575, 'modified_line': '        checkLenient();'}, {'line_number': 576, 'modified_line': '      '}, {'line_number': 584, 'modified_line': '    '}, {'line_number': 585, 'modified_line': '    if (stackSize == 1 && !hasSkipValue) {'}, {'line_number': 586, 'modified_line': '      checkLenient();'}]}, {'file_name': 'com/google/gson/stream/JsonWriter.java', 'target_lines': [['325', '    beforeValue(true);'], ['418', '    beforeValue(false);'], ['435', '    beforeValue(false);'], ['454', '    beforeValue(false);'], ['466', '    beforeValue(false);'], ['483', '    beforeValue(false);'], ['495', '    beforeValue(false);'], ['518', '    beforeValue(false);'], ['613', '  private void beforeValue(boolean root) throws IOException {'], ['622', '      if (!lenient && !root) {'], ['623', '        throw new IllegalStateException('], ['624', '            "JSON must start with an array or an object.");'], ['625', '      }']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 624, 'modified_line': '            "JSON must start with an array or an object.";'}]}]


