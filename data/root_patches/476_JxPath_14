###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'insertions': [{'line_number': 668, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);', '}']}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'target_lines': [['656', '//'], ['662', '//'], ['668', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'target_lines': [['656', '//'], ['662', '//'], ['668', '//']], 'insertions': [{'line_number': 656, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}, {'line_number': 662, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}, {'line_number': 668, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'insertions': [{'line_number': 668, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);', '}']}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'target_lines': [['656', '//'], ['662', '//'], ['668', '//']], 'insertions': [{'line_number': 656, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}, {'line_number': 662, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}, {'line_number': 668, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'modifications': [{'line_number': 668, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'target_lines': [['656', '//'], ['662', '//'], ['668', '//']], 'insertions': [{'line_number': 656, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}, {'line_number': 662, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}, {'line_number': 668, 'new_lines': ['if (Double.isNaN(v)) {', '    return new Double(Double.NaN);']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'modifications': [{'line_number': 668, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'target_lines': [['656', '//'], ['662', '//'], ['668', '//']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 656, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.floor(v));'}, {'line_number': 662, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.ceil(v));'}, {'line_number': 668, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'modifications': [{'line_number': 668, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));'}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/compiler/CoreFunction.java', 'target_lines': [['656', '//'], ['662', '//'], ['668', '//']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 656, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.floor(v));'}, {'line_number': 662, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.ceil(v));'}, {'line_number': 668, 'modified_line': 'return Double.isNaN(v) ? new Double(Double.NaN) : new Double(Math.round(v));'}]}]


