###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'insertions': [{'line_number': 311, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 632, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 641, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [{'line_number': 311, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 632, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 641, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//']], 'insertions': [{'line_number': 249, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//'], ['249', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//'], ['311', '//'], ['632', '//'], ['641', '//'], ['647', '//'], ['653', '//'], ['654', '//'], ['655', '//'], ['656', '//'], ['658', '//'], ['660', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//'], ['249', '//'], ['249', '//'], ['249', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//'], ['647', '//'], ['653', '//'], ['654', '//'], ['655', '//'], ['656', '//'], ['658', '//'], ['660', '//']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//'], ['249', '//'], ['249', '//'], ['249', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/XMLSpaceTest.java', 'modifications': [{'line_number': 55, 'modified_line': 'assertEquals(context.getValue("test/text[@id=\'" + id + "\']"), expectedValue.trim());'}, {'line_number': 67, 'modified_line': 'doTest("preserve", DocumentContainer.MODEL_DOM, "foo");'}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 311, 'modified_line': '        // Inserted new line to fix the bug by handling whitespace properly\n        return text == null ? "" : text.trim();'}, {'line_number': 632, 'modified_line': '        // Inserted new line to fix the bug by handling whitespace properly\n        return text == null ? "" : text.trim();'}, {'line_number': 641, 'modified_line': '        // Inserted new line to fix the bug by handling whitespace properly\n        return text == null ? "" : text.trim();'}]}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 249, 'modified_line': '        // Inserted new line to fix the bug by handling whitespace properly\n        return text == null ? "" : text.trim();'}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'insertions': [{'line_number': 249, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return attr == null ? "" : attr.trim();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [{'line_number': 311, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 632, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 641, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//']], 'insertions': [{'line_number': 249, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return attr == null ? "" : attr.trim();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'modifications': [{'line_number': 249, 'modified_line': '        return attr == null ? "" : attr.trim(); // Fixed whitespace handling'}]}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [{'line_number': 311, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 632, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 641, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//']], 'insertions': [{'line_number': 249, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return attr == null ? "" : attr.trim();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [{'line_number': 311, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 632, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 641, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//']], 'insertions': [{'line_number': 249, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return attr == null ? "" : attr.trim();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [{'line_number': 311, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 632, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 641, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//']], 'insertions': [{'line_number': 249, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return attr == null ? "" : attr.trim();']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java', 'target_lines': [['296', '    protected String getLanguage() {'], ['297', '        Node n = node;'], ['301', '                String attr = e.getAttribute("xml:lang");'], ['638', '            String text = ((Comment) node).getData();'], ['639', '            return text == null ? "" : text.trim();'], ['643', '            return text == null ? "" : text.trim();'], ['647', '            return text == null ? "" : text.trim();'], ['653', '            if (child.getNodeType() == Node.TEXT_NODE) {'], ['654', '                buf.append(child.getNodeValue());'], ['655', '            }'], ['656', '            else {'], ['658', '            }'], ['660', '        return buf.toString().trim();'], ['311', '//'], ['632', '//'], ['641', '//']], 'insertions': [{'line_number': 311, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 632, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}, {'line_number': 641, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return text == null ? "" : text.trim();']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java', 'target_lines': [['240', '            return ((Element) node).getTextTrim();'], ['250', '            return ((Text) node).getTextTrim();'], ['251', '        }'], ['252', '        if (node instanceof CDATA) {'], ['253', '            return ((CDATA) node).getTextTrim();'], ['256', '            String text = ((ProcessingInstruction) node).getData();'], ['257', '            if (text != null) {'], ['258', '                text = text.trim();'], ['259', '            }'], ['260', '            return text;'], ['262', '        return null;'], ['436', '        Object n = node;'], ['440', '                String attr ='], ['441', '                    e.getAttributeValue("lang", Namespace.XML_NAMESPACE);'], ['756', '}'], ['249', '//']], 'insertions': [{'line_number': 249, 'new_lines': ['        // Inserted new line to fix the bug by handling whitespace properly', '        return attr == null ? "" : attr.trim();']}], 'deletions': [], 'modifications': []}]


