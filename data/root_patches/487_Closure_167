###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 322, 'modified_line': 'JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);'}, {'line_number': 342, 'modified_line': 'JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(!condition);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'target_lines': [['301', '          left, leftIsRefineable, merged.typeA,'], ['302', '          right, rightIsRefineable, merged.typeB);'], ['348', '          left, leftIsRefineable, restrictedLeftType,'], ['349', '          right, rightIsRefineable, restrictedRightType);'], ['394', '    if (restrictedType != null && !restrictedType.equals(originalType)) {'], ['407', '      Node left, boolean leftIsRefineable, JSType restrictedLeftType,'], ['408', '      Node right, boolean rightIsRefineable, JSType restrictedRightType) {'], ['410', '        leftIsRefineable && restrictedLeftType != null;'], ['412', '        rightIsRefineable && restrictedRightType != null;'], ['430', '      JSType restrictedType ='], ['431', '          type.getRestrictedTypeGivenToBooleanOutcome(outcome);'], ['432', '      FlowScope informed = blindScope.createChildFlowScope();'], ['433', '      declareNameInScope(informed, name, restrictedType);'], ['434', '      return informed;']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'target_lines': [['883', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'target_lines': [['301', '          left, leftIsRefineable, merged.typeA,'], ['302', '          right, rightIsRefineable, merged.typeB);'], ['348', '          left, leftIsRefineable, restrictedLeftType,'], ['349', '          right, rightIsRefineable, restrictedRightType);'], ['394', '    if (restrictedType != null && !restrictedType.equals(originalType)) {'], ['407', '      Node left, boolean leftIsRefineable, JSType restrictedLeftType,'], ['408', '      Node right, boolean rightIsRefineable, JSType restrictedRightType) {'], ['410', '        leftIsRefineable && restrictedLeftType != null;'], ['412', '        rightIsRefineable && restrictedRightType != null;'], ['430', '      JSType restrictedType ='], ['431', '          type.getRestrictedTypeGivenToBooleanOutcome(outcome);'], ['432', '      FlowScope informed = blindScope.createChildFlowScope();'], ['433', '      declareNameInScope(informed, name, restrictedType);'], ['434', '      return informed;']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'target_lines': [['883', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'target_lines': [['301', '          left, leftIsRefineable, merged.typeA,'], ['302', '          right, rightIsRefineable, merged.typeB);'], ['348', '          left, leftIsRefineable, restrictedLeftType,'], ['349', '          right, rightIsRefineable, restrictedRightType);'], ['394', '    if (restrictedType != null && !restrictedType.equals(originalType)) {'], ['407', '      Node left, boolean leftIsRefineable, JSType restrictedLeftType,'], ['408', '      Node right, boolean rightIsRefineable, JSType restrictedRightType) {'], ['410', '        leftIsRefineable && restrictedLeftType != null;'], ['412', '        rightIsRefineable && restrictedRightType != null;'], ['430', '      JSType restrictedType ='], ['431', '          type.getRestrictedTypeGivenToBooleanOutcome(outcome);'], ['432', '      FlowScope informed = blindScope.createChildFlowScope();'], ['433', '      declareNameInScope(informed, name, restrictedType);'], ['434', '      return informed;']], 'insertions': [{'line_number': 883, 'new_lines': ['// Inserted line to fix the bug in JSType.java']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'target_lines': [['883', '//']], 'insertions': [{'line_number': 883, 'new_lines': ['// Inserted line to fix the bug in JSType.java']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'target_lines': [['301', '          left, leftIsRefineable, merged.typeA,'], ['302', '          right, rightIsRefineable, merged.typeB);'], ['348', '          left, leftIsRefineable, restrictedLeftType,'], ['349', '          right, rightIsRefineable, restrictedRightType);'], ['394', '    if (restrictedType != null && !restrictedType.equals(originalType)) {'], ['407', '      Node left, boolean leftIsRefineable, JSType restrictedLeftType,'], ['408', '      Node right, boolean rightIsRefineable, JSType restrictedRightType) {'], ['410', '        leftIsRefineable && restrictedLeftType != null;'], ['412', '        rightIsRefineable && restrictedRightType != null;'], ['430', '      JSType restrictedType ='], ['431', '          type.getRestrictedTypeGivenToBooleanOutcome(outcome);'], ['432', '      FlowScope informed = blindScope.createChildFlowScope();'], ['433', '      declareNameInScope(informed, name, restrictedType);'], ['434', '      return informed;'], ['883', '//']], 'insertions': [{'line_number': 883, 'new_lines': ['// Inserted line to fix the bug in JSType.java']}], 'deletions': [], 'modifications': []}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'target_lines': [['883', '//']], 'insertions': [{'line_number': 883, 'new_lines': ['// Inserted line to fix the bug in JSType.java']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'modifications': [{'line_number': 322, 'modified_line': 'JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);'}, {'line_number': 342, 'modified_line': 'JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(!condition);'}]}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'modifications': [{'line_number': 883, 'modified_line': '// Inserted line to fix the bug in JSType.java'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'modifications': [{'line_number': 301, 'modified_line': '          left, leftIsRefineable, merged.typeA,'}, {'line_number': 302, 'modified_line': '          right, rightIsRefineable, merged.typeB);'}, {'line_number': 348, 'modified_line': '          left, leftIsRefineable, restrictedLeftType,'}, {'line_number': 349, 'modified_line': '          right, rightIsRefineable, restrictedRightType);'}, {'line_number': 394, 'modified_line': '    if (restrictedType != null && !restrictedType.equals(originalType)) {'}, {'line_number': 407, 'modified_line': '      Node left, boolean leftIsRefineable, JSType restrictedLeftType,'}, {'line_number': 408, 'modified_line': '      Node right, boolean rightIsRefineable, JSType restrictedRightType) {'}, {'line_number': 410, 'modified_line': '        leftIsRefineable && restrictedLeftType != null;'}, {'line_number': 412, 'modified_line': '        rightIsRefineable && restrictedRightType != null;'}, {'line_number': 430, 'modified_line': '      JSType restrictedType ='}, {'line_number': 431, 'modified_line': '          type.getRestrictedTypeGivenToBooleanOutcome(outcome);'}, {'line_number': 432, 'modified_line': '      FlowScope informed = blindScope.createChildFlowScope();'}, {'line_number': 433, 'modified_line': '      declareNameInScope(informed, name, restrictedType);'}, {'line_number': 434, 'modified_line': '      return informed;'}]}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'modifications': [{'line_number': 883, 'modified_line': '// Inserted line to fix the bug in JSType.java'}]}]

###Fix:
[]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'modifications': [{'line_number': 322, 'modified_line': 'JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);'}, {'line_number': 342, 'modified_line': 'JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(!condition);'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'modifications': [{'line_number': 301, 'modified_line': '          left, leftIsRefineable, merged.typeA,'}, {'line_number': 302, 'modified_line': '          right, rightIsRefineable, merged.typeB);'}, {'line_number': 348, 'modified_line': '          left, leftIsRefineable, restrictedLeftType,'}, {'line_number': 349, 'modified_line': '          right, rightIsRefineable, restrictedRightType);'}, {'line_number': 394, 'modified_line': '    if (restrictedType != null && !restrictedType.equals(originalType)) {'}]}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'modifications': [{'line_number': 883, 'modified_line': '// Inserted line to fix the bug in JSType.java'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'target_lines': [['301', '          left, leftIsRefineable, merged.typeA,'], ['302', '          right, rightIsRefineable, merged.typeB);'], ['348', '          left, leftIsRefineable, restrictedLeftType,'], ['349', '          right, rightIsRefineable, restrictedRightType);'], ['394', '    if (restrictedType != null && !restrictedType.equals(originalType)) {'], ['407', '      Node left, boolean leftIsRefineable, JSType restrictedLeftType,'], ['408', '      Node right, boolean rightIsRefineable, JSType restrictedRightType) {'], ['410', '        leftIsRefineable && restrictedLeftType != null;'], ['412', '        rightIsRefineable && restrictedRightType != null;'], ['430', '      JSType restrictedType ='], ['431', '          type.getRestrictedTypeGivenToBooleanOutcome(outcome);'], ['432', '      FlowScope informed = blindScope.createChildFlowScope();'], ['433', '      declareNameInScope(informed, name, restrictedType);'], ['434', '      return informed;']], 'insertions': []}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'target_lines': [['883', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'target_lines': [['301', '          left, leftIsRefineable, merged.typeA,'], ['302', '          right, rightIsRefineable, merged.typeB);'], ['348', '          left, leftIsRefineable, restrictedLeftType,'], ['349', '          right, rightIsRefineable, restrictedRightType);'], ['394', '    if (restrictedType != null && !restrictedType.equals(originalType)) {'], ['407', '      Node left, boolean leftIsRefineable, JSType restrictedLeftType,'], ['408', '      Node right, boolean rightIsRefineable, JSType restrictedRightType) {'], ['410', '        leftIsRefineable && restrictedLeftType != null;'], ['412', '        rightIsRefineable && restrictedRightType != null;'], ['430', '      JSType restrictedType ='], ['431', '          type.getRestrictedTypeGivenToBooleanOutcome(outcome);'], ['432', '      FlowScope informed = blindScope.createChildFlowScope();'], ['433', '      declareNameInScope(informed, name, restrictedType);'], ['434', '      return informed;'], ['883', '//']], 'insertions': []}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'target_lines': [['883', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'target_lines': [['301', '          left, leftIsRefineable, merged.typeA,'], ['302', '          right, rightIsRefineable, merged.typeB);'], ['348', '          left, leftIsRefineable, restrictedLeftType,'], ['349', '          right, rightIsRefineable, restrictedRightType);'], ['394', '    if (restrictedType != null && !restrictedType.equals(originalType)) {'], ['407', '      Node left, boolean leftIsRefineable, JSType restrictedLeftType,'], ['408', '      Node right, boolean rightIsRefineable, JSType restrictedRightType) {'], ['410', '        leftIsRefineable && restrictedLeftType != null;'], ['412', '        rightIsRefineable && restrictedRightType != null;'], ['430', '      JSType restrictedType ='], ['431', '          type.getRestrictedTypeGivenToBooleanOutcome(outcome);'], ['432', '      FlowScope informed = blindScope.createChildFlowScope();'], ['433', '      declareNameInScope(informed, name, restrictedType);'], ['434', '      return informed;'], {'line_number': 883, 'new_lines': ['// Inserted line to fix the bug in JSType.java']}], 'insertions': []}, {'file_name': 'com/google/javascript/rhino/jstype/JSType.java', 'target_lines': [['883', '//']], 'insertions': [{'line_number': 883, 'new_lines': ['// Inserted line to fix the bug in JSType.java']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java', 'modifications': [{'line_number': 302, 'modified_line': '          right, rightIsRefineable, merged.typeB);'}]}]


