###Fix:
[{'file_name': 'com/google/javascript/jscomp/SourceMap.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 251, 'modified_line': 'void reset() {\n    mappings = Lists.newArrayList();\n    offsetPosition = new Position(0, 0);\n    prefixPosition = new Position(0, 0);\n  }'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/SourceMap.java', 'target_lines': [['50', '    int id;'], ['93', '    void appendTo(Appendable out) throws IOException {'], ['96', '      out.append(sourceFile);'], ['102', '      out.append(String.valueOf(originalPosition.getLineNumber()));'], ['105', '      out.append(String.valueOf(originalPosition.getCharacterIndex()));'], ['107', '      if (originalName != null) {'], ['109', '        out.append(originalName);'], ['112', '      out.append("]");'], ['143', '  private String lastSourceFile = null;'], ['144', '  private String lastSourceFileEscaped = null;'], ['163', '    String escapedSourceFile;'], ['164', '    if (lastSourceFile != sourceFile) {  // yes, "s1 != s2" not "!s1.equals(s2)"'], ['165', '      lastSourceFile = sourceFile;'], ['166', '      lastSourceFileEscaped = escapeString(sourceFile);'], ['167', '    }'], ['168', '    escapedSourceFile = lastSourceFileEscaped;'], ['171', '    mapping.id = mappings.size();'], ['172', '    mapping.sourceFile = escapedSourceFile;'], ['177', '      mapping.originalName = escapeString(originalName);'], ['257', '  private int findLastLine() {'], ['258', '    int maxLine = 0;'], ['259', '    for (Mapping mapping : mappings) {'], ['260', '      int endPositionLine = mapping.endPosition.getLineNumber();'], ['261', '      maxLine = Math.max(maxLine, endPositionLine);'], ['262', '    }'], ['263', '    return maxLine + prefixPosition.getLineNumber();'], ['264', '  }'], ['304', '    int maxLine = findLastLine();'], ['326', '    for (Mapping mapping : mappings) {'], ['327', '      mapping.appendTo(out);'], ['328', '      out.append("\\n");'], ['329', '    }'], ['341', '  private class LineMapper {'], ['344', '    private int line;'], ['345', '    private int col;'], ['351', '    private final static int UNMAPPED = -1;'], ['426', '          writeClosedMapping(previous);'], ['432', '        writeCharsBetween(parent, m);'], ['441', '        writeClosedMapping(m);'], ['442', '      }'], ['443', '      closeLine();'], ['444', '    }'], ['445', '    private void openLine() throws IOException {'], ['446', '      out.append("[");'], ['447', '      this.firstChar = true;'], ['448', '    }'], ['449', '    private void closeLine() throws IOException {'], ['450', '      out.append("]\\n");'], ['451', '    }'], ['452', '    private void addCharEntry(String id) throws IOException {'], ['453', '      if (firstChar) {'], ['454', '        firstChar = false;'], ['455', '      } else {'], ['456', '        out.append(",");'], ['458', '      out.append(id);'], ['496', '    private void writeClosedMapping(Mapping m) throws IOException {'], ['502', '        writeCharsUpTo(nextLine, nextCol, m.id);'], ['509', '    private void writeCharsBetween(Mapping prev, Mapping next)'], ['511', '      int nextLine = getAdjustedLine(next.startPosition);'], ['512', '      int nextCol = getAdjustedCol(next.startPosition);'], ['514', '      int id = (prev != null) ? prev.id : UNMAPPED;'], ['515', '      writeCharsUpTo(nextLine, nextCol, id);'], ['522', '    private void writeCharsUpTo('], ['523', '        int nextLine, int nextCol, int id)'], ['525', '      Preconditions.checkState(line <= nextLine, "");'], ['526', '      Preconditions.checkState(line < nextLine || col <= nextCol);'], ['533', '      String idString = (id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id);'], ['534', '      for (int i = line; i <= nextLine; i++) {'], ['535', '        if (i == nextLine) {'], ['536', '          for (int j = col; j < nextCol; j++) {'], ['537', '            addCharEntry(idString);'], ['538', '          }'], ['539', '          break;'], ['540', '        }'], ['541', '        closeLine();'], ['542', '        openLine();'], ['543', '      }'], ['182', ' '], ['41', ' '], ['85', ' '], ['86', ' '], ['89', ' '], ['98', ' '], ['99', ' '], ['101', ' '], ['114', ' '], ['117', ' '], ['180', ' '], ['203', ' '], ['335', ' '], ['336', ' '], ['338', ' '], ['340', ' '], ['360', ' '], ['361', ' '], ['363', ' '], ['364', ' '], ['365', ' '], ['373', ' '], ['375', ' '], ['379', ' '], ['383', ' '], ['388', ' '], ['392', ' '], ['395', ' '], ['396', ' '], ['405', ' '], ['410', ' '], ['411', ' '], ['412', ' '], ['414', ' '], ['530', ' ']]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/SourceMap.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 251, 'modified_line': 'void reset() {\n    mappings = Lists.newArrayList();\n    offsetPosition = new Position(0, 0);\n    prefixPosition = new Position(0, 0);\n  }'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/SourceMap.java', 'target_lines': [['50', '    int id;'], ['93', '    void appendTo(Appendable out) throws IOException {'], ['96', '      out.append(sourceFile);'], ['102', '      out.append(String.valueOf(originalPosition.getLineNumber()));'], ['105', '      out.append(String.valueOf(originalPosition.getCharacterIndex()));'], ['107', '      if (originalName != null) {'], ['109', '        out.append(originalName);'], ['112', '      out.append("]");'], ['143', '  private String lastSourceFile = null;'], ['144', '  private String lastSourceFileEscaped = null;'], ['163', '    String escapedSourceFile;'], ['164', '    if (lastSourceFile != sourceFile) {  // yes, "s1 != s2" not "!s1.equals(s2)"'], ['165', '      lastSourceFile = sourceFile;'], ['166', '      lastSourceFileEscaped = escapeString(sourceFile);'], ['167', '    }'], ['168', '    escapedSourceFile = lastSourceFileEscaped;'], ['171', '    mapping.id = mappings.size();'], ['172', '    mapping.sourceFile = escapedSourceFile;'], ['177', '      mapping.originalName = escapeString(originalName);'], ['257', '  private int findLastLine() {'], ['258', '    int maxLine = 0;'], ['259', '    for (Mapping mapping : mappings) {'], ['260', '      int endPositionLine = mapping.endPosition.getLineNumber();'], ['261', '      maxLine = Math.max(maxLine, endPositionLine);'], ['262', '    }'], ['263', '    return maxLine + prefixPosition.getLineNumber();'], ['264', '  }'], ['304', '    int maxLine = findLastLine();'], ['326', '    for (Mapping mapping : mappings) {'], ['327', '      mapping.appendTo(out);'], ['328', '      out.append("\\n");'], ['329', '    }'], ['341', '  private class LineMapper {'], ['344', '    private int line;'], ['345', '    private int col;'], ['351', '    private final static int UNMAPPED = -1;'], ['426', '          writeClosedMapping(previous);'], ['432', '        writeCharsBetween(parent, m);'], ['441', '        writeClosedMapping(m);'], ['442', '      }'], ['443', '      closeLine();'], ['444', '    }'], ['445', '    private void openLine() throws IOException {'], ['446', '      out.append("[");'], ['447', '      this.firstChar = true;'], ['448', '    }'], ['449', '    private void closeLine() throws IOException {'], ['450', '      out.append("]\\n");'], ['451', '    }'], ['452', '    private void addCharEntry(String id) throws IOException {'], ['453', '      if (firstChar) {'], ['454', '        firstChar = false;'], ['455', '      } else {'], ['456', '        out.append(",");'], ['458', '      out.append(id);'], ['496', '    private void writeClosedMapping(Mapping m) throws IOException {'], ['502', '        writeCharsUpTo(nextLine, nextCol, m.id);'], ['509', '    private void writeCharsBetween(Mapping prev, Mapping next)'], ['511', '      int nextLine = getAdjustedLine(next.startPosition);'], ['512', '      int nextCol = getAdjustedCol(next.startPosition);'], ['514', '      int id = (prev != null) ? prev.id : UNMAPPED;'], ['515', '      writeCharsUpTo(nextLine, nextCol, id);'], ['522', '    private void writeCharsUpTo('], ['523', '        int nextLine, int nextCol, int id)'], ['525', '      Preconditions.checkState(line <= nextLine, "");'], ['526', '      Preconditions.checkState(line < nextLine || col <= nextCol);'], ['533', '      String idString = (id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id);'], ['534', '      for (int i = line; i <= nextLine; i++) {'], ['535', '        if (i == nextLine) {'], ['536', '          for (int j = col; j < nextCol; j++) {'], ['537', '            addCharEntry(idString);'], ['538', '          }'], ['539', '          break;'], ['540', '        }'], ['541', '        closeLine();'], ['542', '        openLine();'], ['543', '      }'], ['182', ' '], ['41', ' '], ['85', ' '], ['86', ' '], ['89', ' '], ['98', ' '], ['99', ' '], ['101', ' '], ['114', ' '], ['117', ' '], ['180', ' '], ['203', ' '], ['335', ' '], ['336', ' '], ['338', ' '], ['340', ' '], ['360', ' '], ['361', ' '], ['363', ' '], ['364', ' '], ['365', ' '], ['373', ' '], ['375', ' '], ['379', ' '], ['383', ' '], ['388', ' '], ['392', ' '], ['395', ' '], ['396', ' '], ['405', ' '], ['410', ' '], ['411', ' '], ['412', ' '], ['414', ' '], ['530', ' ']]}]


