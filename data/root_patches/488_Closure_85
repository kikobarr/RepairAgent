###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '        // Inserted line to fix the bug']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 154, 'new_lines': ['      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();']}, {'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 154, 'new_lines': ['      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();']}, {'line_number': 155, 'new_lines': ['      if (outEdges.size() == 1) {']}, {'line_number': 157, 'new_lines': ['      }']}, {'line_number': 160, 'new_lines': ['      case Token.BLOCK:']}, {'line_number': 161, 'new_lines': ['        if (n.hasChildren()) {']}, {'line_number': 162, 'new_lines': ['          Node first = n.getFirstChild();']}, {'line_number': 163, 'new_lines': ['          return tryRemoveUnconditionalBranching(first);']}, {'line_number': 164, 'new_lines': ['        } else {']}, {'line_number': 165, 'new_lines': ['          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));']}, {'line_number': 166, 'new_lines': ['        }']}, {'line_number': 183, 'new_lines': ['          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));']}, {'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 154, 'new_lines': ['      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();']}, {'line_number': 155, 'new_lines': ['      if (outEdges.size() == 1) {']}, {'line_number': 157, 'new_lines': ['      }']}, {'line_number': 160, 'new_lines': ['      case Token.BLOCK:']}, {'line_number': 161, 'new_lines': ['        if (n.hasChildren()) {']}, {'line_number': 162, 'new_lines': ['          Node first = n.getFirstChild();']}, {'line_number': 163, 'new_lines': ['          return tryRemoveUnconditionalBranching(first);']}, {'line_number': 164, 'new_lines': ['        } else {']}, {'line_number': 165, 'new_lines': ['          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));']}, {'line_number': 166, 'new_lines': ['        }']}, {'line_number': 183, 'new_lines': ['          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));']}, {'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'modifications': [{'line_number': 153, 'modified_line': '    if (n.getParent() == null && n.getType() != Token.RETURN && n.getType() != Token.BREAK && n.getType() != Token.CONTINUE) {'}, {'line_number': 196, 'modified_line': '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 153, 'modified_line': '    if (n.getParent() == null && n.getType() != Token.RETURN && n.getType() != Token.BREAK && n.getType() != Token.CONTINUE) {'}, {'line_number': 196, 'modified_line': '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': [{'line_number': 153, 'modified_line': '    if (n.getParent() == null && n.getType() != Token.RETURN && n.getType() != Token.BREAK && n.getType() != Token.CONTINUE) {'}, {'line_number': 196, 'modified_line': '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': [{'line_number': 153, 'modified_line': '    if (n.getParent() == null && n.getType() != Token.RETURN && n.getType() != Token.BREAK && n.getType() != Token.CONTINUE) {'}, {'line_number': 196, 'modified_line': '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug'}]}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': [{'line_number': 196, 'new_lines': ['        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']], 'insertions': []}]

###Fix:
[{'file_name': 'com/google/javascript/jscomp/UnreachableCodeElimination.java', 'target_lines': [['153', '    if (n.getParent() == null) {'], ['154', '      List<DiGraphEdge<Node,Branch> outEdges = gNode.getOutEdges();'], ['155', '      if (outEdges.size() == 1) {'], ['156', '        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());'], ['157', '      }'], ['158', '    }'], ['160', '      case Token.BLOCK:'], ['161', '        if (n.hasChildren()) {'], ['162', '          Node first = n.getFirstChild();'], ['163', '          return tryRemoveUnconditionalBranching(first);'], ['164', '        } else {'], ['165', '          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));'], ['166', '        }'], ['183', '          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));'], ['196', '        return tryRemoveUnconditionalBranching(n); // Inserted line to fix the bug']], 'insertions': []}]


