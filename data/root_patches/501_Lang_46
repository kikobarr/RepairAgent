###Fix:
[]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]

###Fix:
[{'file_name': 'org/apache/commons/lang/StringEscapeUtils.java', 'target_lines': [['86', '        return escapeJavaStyleString(str, false);'], ['102', '        escapeJavaStyleString(out, str, false);'], ['127', '        return escapeJavaStyleString(str, true);'], ['143', '        escapeJavaStyleString(out, str, true);'], ['154', '    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {'], ['160', '            escapeJavaStyleString(writer, str, escapeSingleQuotes);'], ['178', '    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {'], ['244', '//'], ['245', '//']], 'insertions': [{'line_number': 244, 'new_lines': ['        if (str == null) {', '            return null;', '        }', '        StringBuilder result = new StringBuilder();', '        for (int i = 0; i < str.length(); i++) {', '            char c = str.charAt(i);', "            if (c == '\\\\') {", "                result.append('\\\\\\\\'); // escape backslash", '            } else {', '                result.append(c);', '            }', '        }', '        return result.toString();']}]}]


