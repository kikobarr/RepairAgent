###Fix:
[{'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'insertions': [], 'deletions': [], 'modifications': [{'line_number': 53, 'modified_line': 'sb.append(" encoding=\\"" + encoding + "\\"");'}]}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [{'line_number': 3, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [{'line_number': 3, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [{'line_number': 3, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/helper/DataUtil.java', 'target_lines': [['112', '                    try {'], ['113', '                        if (Charset.isSupported(meta.attr("charset"))) {'], ['115', '                        }'], ['116', '                    } catch (IllegalCharsetNameException e) {'], ['117', '                        foundCharset = null;'], ['118', '                    }']], 'insertions': [{'line_number': 3, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'target_lines': [['46', '        final String decl = this.name;'], ['47', '        if(decl.equals("xml") && attributes.size() > 1 ) {'], ['48', '            StringBuilder sb = new StringBuilder(decl);'], ['49', '            final String version = attributes.get("version");'], ['50', '            if( version != null ) {'], ['51', '                sb.append(" version=\\"").append(version).append("\\"");'], ['52', '            }'], ['53', '            final String encoding = attributes.get("encoding");'], ['54', '            if( encoding != null ) {'], ['55', '                sb.append(" encoding=\\"").append(encoding).append("\\"");'], ['56', '            }'], ['57', '            return sb.toString();'], ['58', '        }'], ['59', '        else {'], ['60', '            return this.name;'], ['61', '        }'], ['68', '                .append(getWholeDeclaration())']], 'insertions': [{'line_number': 3, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}, {'file_name': 'org/jsoup/parser/XmlTreeBuilder.java', 'target_lines': [['76', '                String declaration = data.substring(1);'], ['77', '                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith("!"));'], ['3', '//']], 'insertions': [{'line_number': 3, 'new_lines': ['// Inserted line to fix the bug']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'insertions': [{'line_number': 53, 'new_lines': ['sb.append(" encoding=\\"" + encoding + "\\"");']}], 'deletions': [], 'modifications': []}]

###Fix:
[{'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'insertions': [{'line_number': 53, 'new_lines': ['sb.append(" encoding=\\"" + encoding + "\\"");']}]}]

###Fix:
[{'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'insertions': [{'line_number': 53, 'new_lines': ['sb.append(" encoding=\\"" + encoding + "\\"");']}]}]

###Fix:
[{'file_name': 'org/jsoup/nodes/XmlDeclaration.java', 'insertions': [{'line_number': 53, 'new_lines': ['sb.append(" encoding=\\"" + encoding + "\\"");']}]}]


