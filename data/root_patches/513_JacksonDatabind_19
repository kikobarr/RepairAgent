###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'insertions': [{'line_number': 1019, 'new_lines': ['    // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '    public JavaType _mapType(JavaType type) {\n', '        if (type.isContainerType() || type.isReferenceType()) {\n', '            return type;\n', '        }\n', '        Class<?> raw = type.getRawClass();\n', '        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '        if (AtomicReference.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = _typeParameters(raw, AtomicReference.class);\n', '            // 20-Sep-2017, tatu: Should be at most 1 parameterization, if any\n', '            if (params == null || params.length != 1) {\n', '                throw new IllegalArgumentException("Invalid `AtomicReference` configuration: type  has no type parameters");\n', '            }\n', '            return params[0];\n', '        }\n', '        if (Map.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = type.findTypeParameters(Map.class);\n', '            if (params == null || params.length != 2) {\n', '                throw new IllegalArgumentException("Invalid Map configuration: type " + type + " has invalid number of type parameters; must be 2");\n', '            }\n', '            return params[1];\n', '        }\n', '        if (Collection.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = type.findTypeParameters(Collection.class);\n', '            if (params == null || params.length != 1) {\n', '                throw new IllegalArgumentException("Invalid Collection configuration: type " + type + " has invalid number of type parameters; must be 1");\n', '            }\n', '            return params[0];\n', '        }\n', '        return null;\n', '    }\n']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'insertions': [{'line_number': 1019, 'new_lines': ['    // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '    public JavaType _mapType(JavaType type) {\n', '        if (type.isContainerType() || type.isReferenceType()) {\n', '            return type;\n', '        }\n', '        Class<?> raw = type.getRawClass();\n', '        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '        if (AtomicReference.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = _typeParameters(raw, AtomicReference.class);\n', '            // 20-Sep-2017, tatu: Should be at most 1 parameterization, if any\n', '            if (params == null || params.length != 1) {\n', '                throw new IllegalArgumentException("Invalid `AtomicReference` configuration: type  has no type parameters");\n', '            }\n', '            return params[0];\n', '        }\n', '        if (Map.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = type.findTypeParameters(Map.class);\n', '            if (params == null || params.length != 2) {\n', '                throw new IllegalArgumentException("Invalid Map configuration: type " + type + " has invalid number of type parameters; must be 2");\n', '            }\n', '            return params[1];\n', '        }\n', '        if (Collection.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = type.findTypeParameters(Collection.class);\n', '            if (params == null || params.length != 1) {\n', '                throw new IllegalArgumentException("Invalid Collection configuration: type " + type + " has invalid number of type parameters; must be 1");\n', '            }\n', '            return params[0];\n', '        }\n', '        return null;\n', '    }\n']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'target_lines': [['1021', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'target_lines': [['1021', '//']], 'insertions': [{'line_number': 1021, 'new_lines': ['        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n', '        if (typeParams == null) {\n', '            return MapType.construct(rawClass, _unknownType(), _unknownType());\n', '        }\n', '        if (typeParams.length != 2) {\n', '            throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");\n', '        }\n', '        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'insertions': [{'line_number': 1019, 'new_lines': ['    // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '    public JavaType _mapType(JavaType type) {\n', '        if (type.isContainerType() || type.isReferenceType()) {\n', '            return type;\n', '        }\n', '        Class<?> raw = type.getRawClass();\n', '        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '        if (AtomicReference.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = _typeParameters(raw, AtomicReference.class);\n', '            // 20-Sep-2017, tatu: Should be at most 1 parameterization, if any\n', '            if (params == null || params.length != 1) {\n', '                throw new IllegalArgumentException("Invalid `AtomicReference` configuration: type  has no type parameters");\n', '            }\n', '            return params[0];\n', '        }\n', '        if (Map.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = type.findTypeParameters(Map.class);\n', '            if (params == null || params.length != 2) {\n', '                throw new IllegalArgumentException("Invalid Map configuration: type " + type + " has invalid number of type parameters; must be 2");\n', '            }\n', '            return params[1];\n', '        }\n', '        if (Collection.class.isAssignableFrom(raw)) {\n', '            JavaType[] params = type.findTypeParameters(Collection.class);\n', '            if (params == null || params.length != 1) {\n', '                throw new IllegalArgumentException("Invalid Collection configuration: type " + type + " has invalid number of type parameters; must be 1");\n', '            }\n', '            return params[0];\n', '        }\n', '        return null;\n', '    }\n']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'target_lines': [['1021', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'target_lines': [['1021', '//']], 'insertions': [{'line_number': 1021, 'new_lines': ['        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n', '        if (typeParams == null) {\n', '            return MapType.construct(rawClass, _unknownType(), _unknownType());\n', '        }\n', '        if (typeParams.length != 2) {\n', '            throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");\n', '        }\n', '        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'insertions': [{'line_number': 1019, 'new_lines': ['    // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference', '    public JavaType _mapType(JavaType type) {', '        if (type.isContainerType() || type.isReferenceType()) {', '            return type;', '        }', '        Class<?> raw = type.getRawClass();', '        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference', '        if (AtomicReference.class.isAssignableFrom(raw)) {', '            JavaType[] params = _typeParameters(raw, AtomicReference.class);', '            // 20-Sep-2017, tatu: Should be at most 1 parameterization, if any', '            if (params == null || params.length != 1) {', '                throw new IllegalArgumentException("Invalid `AtomicReference` configuration: type  has no type parameters");', '            }', '            return params[0];', '        }', '        if (Map.class.isAssignableFrom(raw)) {', '            JavaType[] params = type.findTypeParameters(Map.class);', '            if (params == null || params.length != 2) {', '                throw new IllegalArgumentException("Invalid Map configuration: type " + type + " has invalid number of type parameters; must be 2");', '            }', '            return params[1];', '        }', '        if (Collection.class.isAssignableFrom(raw)) {', '            JavaType[] params = type.findTypeParameters(Collection.class);', '            if (params == null || params.length != 1) {', '                throw new IllegalArgumentException("Invalid Collection configuration: type " + type + " has invalid number of type parameters; must be 1");', '            }', '            return params[0];', '        }', '        return null;', '    }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'target_lines': [['1021', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'target_lines': [['1021', '//']], 'insertions': [{'line_number': 1021, 'new_lines': ['        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference\n', '        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);\n', '        if (typeParams == null) {\n', '            return MapType.construct(rawClass, _unknownType(), _unknownType());\n', '        }\n', '        if (typeParams.length != 2) {\n', '            throw new IllegalArgumentException("Strange Map type " + rawClass.getName() + ": can not determine type parameters");\n', '        }\n', '        return MapType.construct(rawClass, typeParams[0], typeParams[1]);\n']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'insertions': [{'line_number': 1019, 'new_lines': ['    // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference', '    public JavaType _mapType(JavaType type) {', '        if (type.isContainerType() || type.isReferenceType()) {', '            return type;', '        }', '        Class<?> raw = type.getRawClass();', '        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference', '        if (AtomicReference.class.isAssignableFrom(raw)) {', '            JavaType[] params = _typeParameters(raw, AtomicReference.class);', '            // 20-Sep-2017, tatu: Should be at most 1 parameterization, if any', '            if (params == null || params.length != 1) {', '                throw new IllegalArgumentException("Invalid `AtomicReference` configuration: type  has no type parameters");', '            }', '            return params[0];', '        }', '        if (Map.class.isAssignableFrom(raw)) {', '            JavaType[] params = type.findTypeParameters(Map.class);', '            if (params == null || params.length != 2) {', '                throw new IllegalArgumentException("Invalid Map configuration: type " + type + " has invalid number of type parameters; must be 2");', '            }', '            return params[1];', '        }', '        if (Collection.class.isAssignableFrom(raw)) {', '            JavaType[] params = type.findTypeParameters(Collection.class);', '            if (params == null || params.length != 1) {', '                throw new IllegalArgumentException("Invalid Collection configuration: type " + type + " has invalid number of type parameters; must be 1");', '            }', '            return params[0];', '        }', '        return null;', '    }']}]}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'target_lines': [['1021', '//']], 'insertions': []}]

###Fix:
[{'file_name': 'com/fasterxml/jackson/databind/type/TypeFactory.java', 'target_lines': [['1021', '//']], 'insertions': [{'line_number': 1021, 'new_lines': ['        // 19-Sep-2017, tatu: As per [databind#1773], improve handling of AtomicReference', '        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);', '        if (typeParams == null) {', '            return MapType.construct(rawClass, _unknownType(), _unknownType());', '        }', '        if (typeParams.length != 2) {', '            throw new IllegalArgumentException("Strange Map type " + rawClass.getName() + ": can not determine type parameters");', '        }', '        return MapType.construct(rawClass, typeParams[0], typeParams[1]);']}]}]


